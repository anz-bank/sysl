let (:invokeMacro, ...) = //{github.com/arr-ai/arrai/contrib/util};

let spannerType = \(:fieldType, :fieldConstraint, ...)
    let len = fieldConstraint.length?.max?:{};
    let rec type = \fieldType
        cond fieldType {
            (:fkType, ...): type((fkType => .fieldType) single),
            (:sequence): $`ARRAY<${type(sequence)}>`,
            (:set): $`ARRAY<${type(set)}>`,
            (:primitive): type(primitive),
            'BOOL': 'BOOL',
            'INT': 'INT64',
            'FLOAT': 'FLOAT64',
            'BYTES': $`BYTES${cond len {'': '', s: $`(${s})`}}`,
            'STRING': $`STRING${cond len {'': '', s: $`(${s})`}}`,
            'DATE': 'DATE',
            'DATETIME': 'TIMESTAMP',
            'timestamp': 'TIMESTAMP',
            _: fieldType
        }
    ;
    type(fieldType)
;

# Grammar for parsing index annotation strings.
let ixGrammar = {://grammar.lang.wbnf:
    index -> col+;
    col   -> name=/{[^,(]+} order? ","?;
    order -> "(" val=("asc" | "desc") ")";
:};
let ixTx = (index: \ast ast.col >> (name: .name.'', order: //str.upper((.).order?.val.'':{})));
let ixParse = invokeMacro((@grammar: ixGrammar, @transform: ixTx));

# Returns an array of indexes defined on the table.
let indexes = \m \app \table
    cond {(:app.appName, :table.typeName)} <&> m.anno.type nest ~|appName,typeName|typeAnnotations {
        {item}: item.typeAnnotations where .typeAnnoName = 'indexes' => .typeAnnoValue => \. . >> (
            name: //seq.split(':', .(0))(1),
            key_parts: ixParse(//seq.split(':', .(1))(1)),
        )
    }
;

# Returns a representation of the position of something with sourceContext to orderby.
let pos = \(start: (:line, :col), ...) [line, col];

# Transforms a relational Sysl model to a DDL model.
let toDdl = \m
    let dbs = m.app -&- (m.tag.app where .appTag = 'db');
    let fields = dbs <&> m.table <&> m.src.type <&> m.field <&> m.src.field;
    fields nest ~|appName|tables => # aggregates app by appName
        \app app +> (tables: app.tables nest ~|typeName,typeSrcs,pk|fields => # aggregates table by typeName
            \table table +> (
                fields: table.fields => . +> cond .fieldType {
                    (:appName, :typePath):
                        let [typeName, fieldName] = typePath;
                        (fieldType:
                            .fieldType +> (fkType:
                                m.field <&> {(:appName, :typeName, :fieldName)})),
                    _: (:.fieldType),
                },
                indexes: indexes(m, app, table),
            )
        )
;

let tableName = //seq.sub(' ', '_');
let dbName = \. //str.lower(tableName(.));

# Transforms a DDL structure into a Spanner DDL string.
# TODO? CREATE DATABASE ${dbName(.appName)};
# TODO? How to handle case the length of typeSrcs or fieldSrcs is more than 1?
let writeDdl = \ddl $`
    ${ddl orderby .appName >> \app $`
        ${app.tables orderby pos(.typeSrcs(0)) >> \table
            let typeName = tableName(table.typeName);
            $`
                CREATE TABLE ${typeName} (
                    ${table.fields orderby pos(.fieldSrcs(0)) >> $`
                        ${.fieldName} ${spannerType(.)}${!.fieldOpt && ' NOT NULL'},
                    `::\i}
                    ${table.fields orderby pos(.fieldSrcs(0)) >> $`
                        ${cond .fieldType {
                            (:appName, :typePath, ...): $`
                                FOREIGN KEY (${.fieldName}) REFERENCES ${tableName(typePath(0))} (${typePath(1)})`,
                        }}` where .@item rank (:.@)::,\i}
                )${cond {table.pk: ' '++$`PRIMARY KEY (${table.pk >> .::, })`}};
                ${table.indexes orderby . >> $`${. >> $`CREATE INDEX ${.name} ON ${typeName}(${
                    .key_parts >> $`${.name }${cond {.order: ' '++.order}}`
                ::, });`::\i:\n}`::\i}
            `::\i}
    `::\i}
`;

# Trim trailing whitespace.
let trim = \str
    let re = //re.compile(`^(.*[^\s])\s*$`);
    $`${//seq.split('\n', str) >> cond re.match(.) {[[_, s]]: s, _: ''}::\n}`;

# Transforms a relational Sysl model to a DDL file.
let export = \m
    let ddl = toDdl(m);
    trim(writeDdl(ddl))
;

# Loads and transforms a Sysl model to a DDL file.
let exportFile = \syslPath
    let sysl = //{//pkg/arrai/sysl.arrai};
    export(sysl.newNormalize(sysl.load(syslPath)))
;

(
    :toDdl,
    :writeDdl,
    :export,
    :exportFile,
)
