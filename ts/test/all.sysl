# This sysl file is a subset of https://github.com/anzx/sysl/blob/master/pkg/arrai/all.sysl, which meant to show every sysl feature.
# Currently the Typescript renderer does not support the following:
#   - Nested Rest endpoints
#   - Inplace type definitions
#   - Pubsubs
#   - Mixins
#   - Inline annotations, which includes Param annotations
# Furthermore comments are not retained during a `sysl pb` command, so they cannot be returned when converting back from json to Sysl.
# Header comments (such as this one) are extracted before `sysl pb` is called, and then added back at the end, allowing them to be retained

import imported.sysl

App [~abstract]:
    ...

AppWithAnnotation [~tag]:
    @annotation = "annotation"
    @annotation1 = "you can do \"string\" annotation like this"
    @annotation2 = ["or", "in", "an", ["array"]]
    @annotation3 =:
        | you can also do
        | multiline annotations
        |
        | like this

App :: with :: subpackages [~tag]:
    ...

RestEndpoint [~tag]:
    /:
        GET:
            ...

    /pathwithtype/{native <: int}:
        GET:
            ...

    /query:
        GET?native=string&optional=string?:
            ...

    /param:
        PATCH (t <: Types.Type [~body]):
            ...

    /param:
        POST (native <: string):
            ...

    /param:
        PUT (unlimited <: string(5..), limited <: string(5..10), num <: int(5)):
            ...

    /report%2Ecsv:
        GET:
            ...

SimpleEndpoint [~tag]:
    SimpleEp [~SimpleEpTag]:
        @annotation = "annotation"
        @annotation1 = "you can do \"string\" annotation like this"
        @annotation2 = ["or", "in", "an", ["array"]]
        @annotation3 =:
            | you can also do
            | multiline annotations
            |
            | like this

    SimpleEpWithParamsRef (Types.type) [~tag]:
        ...

    SimpleEpWithTypes (native <: string) [~tag]:
        ...

    SimpleEpWithArray (unlimited <: string(5..), limited <: string(5..10), num <: int(5)) [~tag]:
        ...

Types:
    !type Type [~tag]:
        @annotation = "annotation"
        nativeTypeField <: string [~tag]
        reference <: RestEndpoint.Type [~tag]
        optional <: string? [~tag]
        set <: set of string [~tag]
        sequence <: sequence of string [~tag]
        aliasSequence <: AliasSequence [~tag]
        with_anno <: string [~tag]:
            @annotation = "this is an annotation"

    !table Table [~tag]:
        primaryKey <: string [~pk]
        nativeTypeField <: string
        reference <: RestEndpoint.Type
        optional <: string?
        set <: set of string
        sequence <: sequence of string
        with_anno <: string:
            @annotation = "this is an annotation"
        decimal_with_precision <: decimal(5.8)
        string_max_constraint <: string(5)
        string_range_constraint <: string(5..10)
        int_with_bitwidth <: int64
        float_with_bitwidth <: float64

    !enum Enum [~tag]:
        ENUM_1: 1
        ENUM_2: 2
        ENUM_3: 3

    !union Union [~tag]:
        int
        string
        sequence of decimal(5.8)
        RestEndpoint.Type

    !union EmptyUnion [~tag]:
        ...

    !alias Alias [~tag]:
        @annotation1 = "you can do string annotation like this"
        @annotation2 = ["or", "in", "an", "array"]
        @annotation3 =:
            | you can also do
            | multiline annotations
            | like this
        int

    !alias AliasSequence [~tag]:
        @annotation1 = "you can do string annotation like this"
        @annotation2 = ["or", "in", "an", "array"]
        @annotation3 =:
            | you can also do
            | multiline annotations
            | like this
        sequence of string

    !alias AliasRef [~tag]:
        Type

    !alias AliasForeignRef [~tag]:
        RestEndpoint.Type

    !alias AliasForeignRefSet [~tag]:
        set of RestEndpoint.Type

Statements [~tag]:
    IfStmt [~tag]:
        if predicate1:
            return ok <: string
        else if predicate2:
            . <- IfStmt
        else:
            ...

    Loops [~tag]:
        alt predicate:
            ...
        until predicate:
            ...
        for each predicate:
            ...
        for predicate:
            ...
        loop predicate:
            ...
        while predicate:
            ...

    Returns [~tag]:
        return ok <: string
        return ok <: Types.Type
        return error <: Types.Type

    Calls [~tag]:
        . <- Returns
        RestEndpoint <- GET /param

    OneOfStatements [~tag]:
        one of:
            case1:
                return ok <: string
            case number 2:
                return ok <: int
            "case 3":
                return ok <: Types.Type
            :
                return error <: string

    GroupStatements [~tag]:
        grouped:
            . <- GroupStatements

    AnnotatedEndpoint [~tag]:
        @annotation1 = "you can do string annotation like this"
        @annotation2 = ["or", "in", "an", "array"]
        @annotation3 =:
            | you can also do
            | multiline annotations
            | like this

    AnnotatedStatements:
        . <- Miscellaneous
        return ok <: string [annotation=["as", "an", "array"]] #Doesn't work, annos/tags/comments are part of the name
        "statement"

    Miscellaneous:
        SimpleEndpoint -> SimpleEp

Unsafe%2FNamespace :: Unsafe%2FApp [~tag]:
    !type Unsafe%2EType [~tag]:
        Unsafe%2EField <: int [~tag]:
            @description = "Unsafe Field Description"
