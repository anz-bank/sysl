openapi: "3.0"
info:
  title: Simple
paths:
  /pets:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Feline.Cat"
                - $ref: "#/components/schemas/Canine.Dog"
              discriminator:
                propertyName: pet_type
      responses:
        "200":
          description: Updated
components:
  schemas:
    Pet:
      type: object
      required:
        - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    Canine.Dog: # "Dog" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Dog`-specific properties
        - $ref: "#/components/schemas/Pet"
        - type: object
          # all other properties specific to a `Dog`
          properties:
            color:
              type: string
              format: "uuid"
            bark:
              type: boolean
            breed:
              type: string
              enum: [Dingo, Husky, Retriever, Shepherd]
    Feline.Cat: # "Cat" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties
        - $ref: "#/components/schemas/Pet"
        - type: object
          # all other properties specific to a `Cat`
          properties:
            hunts:
              type: boolean
            age:
              type: integer
    SingularSimple:
      allOf:
        - $ref: "#/components/schemas/Pet"
    # oneOf is an unhandled scenario for allOf. This should just work as it
    # resolves the type directly when there is only one type.
    SingularUnhandled:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/Pet"
