# Code generated by Sysl. DO NOT EDIT.

google_protobuf:
    @go_package = "google.golang.org/protobuf/types/known/typepb"
    @java_package = "com.google.protobuf"
    @package = "google.protobuf"

    !type Any_:
        @description =:
            | `Any` contains an arbitrary serialized protocol buffer message along with a
            | URL that describes the type of the serialized message.
            |
            | Protobuf library provides support to pack/unpack Any values in the form
            | of utility functions or additional generated methods of the Any type.
            |
            | Example 1: Pack and unpack a message in C++.
            |
            |     Foo foo = ...;
            |     Any any;
            |     any.PackFrom(foo);
            |     ...
            |     if (any.UnpackTo(&foo)) {
            |       ...
            |     }
            |
            | Example 2: Pack and unpack a message in Java.
            |
            |     Foo foo = ...;
            |     Any any = Any.pack(foo);
            |     ...
            |     if (any.is(Foo.class)) {
            |       foo = any.unpack(Foo.class);
            |     }
            |
            |  Example 3: Pack and unpack a message in Python.
            |
            |     foo = Foo(...)
            |     any = Any()
            |     any.Pack(foo)
            |     ...
            |     if any.Is(Foo.DESCRIPTOR):
            |       any.Unpack(foo)
            |       ...
            |
            |  Example 4: Pack and unpack a message in Go
            |
            |      foo := &pb.Foo{...}
            |      any, err := anypb.New(foo)
            |      if err != nil {
            |        ...
            |      }
            |      ...
            |      foo := &pb.Foo{}
            |      if err := any.UnmarshalTo(foo); err != nil {
            |        ...
            |      }
            |
            | The pack methods provided by protobuf library will by default use
            | 'type.googleapis.com/full.type.name' as the type URL and the unpack
            | methods only use the fully qualified type name after the last '/'
            | in the type URL, for example "foo.bar.com/x/y.z" will yield type
            | name "y.z".
            |
            |
            | JSON
            | ====
            | The JSON representation of an `Any` value uses the regular
            | representation of the deserialized, embedded message, with an
            | additional field `@type` which contains the type URL. Example:
            |
            |     package google.profile;
            |     message Person {
            |       string first_name = 1;
            |       string last_name = 2;
            |     }
            |
            |     {
            |       "@type": "type.googleapis.com/google.profile.Person",
            |       "firstName": <string>,
            |       "lastName": <string>
            |     }
            |
            | If the embedded message type is well-known and has a custom JSON
            | representation, that representation will be embedded adding a field
            | `value` which holds the custom JSON in addition to the `@type`
            | field. Example (for message [google.protobuf.Duration][]):
            |
            |     {
            |       "@type": "type.googleapis.com/google.protobuf.Duration",
            |       "value": "1.212s"
            |     }
        @source_path = "google/protobuf/any.proto"
        type_url <: string:
            @description =:
                | A URL/resource name that uniquely identifies the type of the serialized
                | protocol buffer message. This string must contain at least
                | one "/" character. The last segment of the URL's path must represent
                | the fully qualified name of the type (as in
                | `path/google.protobuf.Duration`). The name should be in a canonical form
                | (e.g., leading "." is not accepted).
                |
                | In practice, teams usually precompile into the binary all types that they
                | expect it to use in the context of Any. However, for URLs which use the
                | scheme `http`, `https`, or no scheme, one can optionally set up a type
                | server that maps type URLs to message definitions as follows:
                |
                | * If no scheme is provided, `https` is assumed.
                | * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                |   value in binary format, or produce an error.
                | * Applications are allowed to cache lookup results based on the
                |   URL, or have them precompiled into a binary to avoid any
                |   lookup. Therefore, binary compatibility needs to be preserved
                |   on changes to types. (Use versioned type names to manage
                |   breaking changes.)
                |
                | Note: this functionality is not currently available in the official
                | protobuf release, and it is not used for type URLs beginning with
                | type.googleapis.com.
                |
                | Schemes other than `http`, `https` (or the empty scheme) might be
                | used with implementation specific semantics.
            @json_tag = "typeUrl"
            @rpcId = "1"
        value <: bytes:
            @description =:
                | Must be a valid serialized protocol buffer of the above specified type.
            @json_tag = "value"
            @rpcId = "2"

    !type Api:
        @description =:
            | Api is a light-weight descriptor for an API Interface.
            |
            | Interfaces are also described as "protocol buffer services" in some contexts,
            | such as by the "service" keyword in a .proto file, but they are different
            | from API Services, which represent a concrete implementation of an interface
            | as opposed to simply a description of methods and bindings. They are also
            | sometimes simply referred to as "APIs" in other contexts, such as the name of
            | this message itself. See https://cloud.google.com/apis/design/glossary for
            | detailed terminology.
        @source_path = "google/protobuf/api.proto"
        methods <: sequence of Method:
            @description =:
                | The methods of this interface, in unspecified order.
            @json_tag = "methods"
            @rpcId = "2"
        mixins <: sequence of Mixin:
            @description =:
                | Included interfaces. See [Mixin][].
            @json_tag = "mixins"
            @rpcId = "6"
        name <: string:
            @description =:
                | The fully qualified name of this interface, including package name
                | followed by the interface's simple name.
            @json_tag = "name"
            @rpcId = "1"
        options <: sequence of Option:
            @description =:
                | Any metadata attached to the interface.
            @json_tag = "options"
            @rpcId = "3"
        source_context <: SourceContext:
            @description =:
                | Source context for the protocol buffer service represented by this
                | message.
            @json_tag = "sourceContext"
            @rpcId = "5"
        syntax <: Syntax:
            @description =:
                | The source syntax of the service.
            @json_tag = "syntax"
            @rpcId = "7"
        version <: string:
            @description =:
                | A version string for this interface. If specified, must have the form
                | `major-version.minor-version`, as in `1.10`. If the minor version is
                | omitted, it defaults to zero. If the entire version field is empty, the
                | major version is derived from the package name, as outlined below. If the
                | field is not empty, the version in the package name will be verified to be
                | consistent with what is provided here.
                |
                | The versioning schema uses [semantic
                | versioning](http://semver.org) where the major version number
                | indicates a breaking change and the minor version an additive,
                | non-breaking change. Both version numbers are signals to users
                | what to expect from different versions, and should be carefully
                | chosen based on the product plan.
                |
                | The major version is also reflected in the package name of the
                | interface, which must end in `v<major-version>`, as in
                | `google.feature.v1`. For major versions 0 and 1, the suffix can
                | be omitted. Zero major versions must only be used for
                | experimental, non-GA interfaces.
                |
            @json_tag = "version"
            @rpcId = "4"

    !type Enum:
        @description =:
            | Enum type definition.
        @source_path = "google/protobuf/type.proto"
        enumvalue <: sequence of EnumValue:
            @description =:
                | Enum value definitions.
            @json_tag = "enumvalue"
            @rpcId = "2"
        name <: string:
            @description =:
                | Enum type name.
            @json_tag = "name"
            @rpcId = "1"
        options <: sequence of Option:
            @description =:
                | Protocol buffer options.
            @json_tag = "options"
            @rpcId = "3"
        source_context <: SourceContext:
            @description =:
                | The source context.
            @json_tag = "sourceContext"
            @rpcId = "4"
        syntax <: Syntax:
            @description =:
                | The source syntax.
            @json_tag = "syntax"
            @rpcId = "5"

    !type EnumValue:
        @description =:
            | Enum value definition.
        @source_path = "google/protobuf/type.proto"
        name <: string:
            @description =:
                | Enum value name.
            @json_tag = "name"
            @rpcId = "1"
        number <: int:
            @description =:
                | Enum value number.
            @json_tag = "number"
            @rpcId = "2"
        options <: sequence of Option:
            @description =:
                | Protocol buffer options.
            @json_tag = "options"
            @rpcId = "3"

    !type Field:
        @description =:
            | A single field of a message type.
        @source_path = "google/protobuf/type.proto"
        cardinality <: Cardinality:
            @description =:
                | The field cardinality.
            @json_tag = "cardinality"
            @rpcId = "2"
        default_value <: string:
            @description =:
                | The string value of the default value of this field. Proto2 syntax only.
            @json_tag = "defaultValue"
            @rpcId = "11"
        json_name <: string:
            @description =:
                | The field JSON name.
            @json_tag = "jsonName"
            @rpcId = "10"
        kind <: Kind:
            @description =:
                | The field type.
            @json_tag = "kind"
            @rpcId = "1"
        name <: string:
            @description =:
                | The field name.
            @json_tag = "name"
            @rpcId = "4"
        number <: int:
            @description =:
                | The field number.
            @json_tag = "number"
            @rpcId = "3"
        oneof_index <: int:
            @description =:
                | The index of the field type in `Type.oneofs`, for message or enumeration
                | types. The first type has index 1; zero means the type is not in the list.
            @json_tag = "oneofIndex"
            @rpcId = "7"
        options <: sequence of Option:
            @description =:
                | The protocol buffer options.
            @json_tag = "options"
            @rpcId = "9"
        packed <: bool:
            @description =:
                | Whether to use alternative packed wire representation.
            @json_tag = "packed"
            @rpcId = "8"
        type_url <: string:
            @description =:
                | The field type URL, without the scheme, for message or enumeration
                | types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
            @json_tag = "typeUrl"
            @rpcId = "6"

    !enum Field_Cardinality [description="Whether a field is optional, required, or repeated.", source_path="google/protobuf/type.proto"]:
        CARDINALITY_UNKNOWN : 0
        CARDINALITY_OPTIONAL : 1
        CARDINALITY_REQUIRED : 2
        CARDINALITY_REPEATED : 3

    !enum Field_Kind [description="Basic field types.", source_path="google/protobuf/type.proto"]:
        TYPE_UNKNOWN : 0
        TYPE_DOUBLE : 1
        TYPE_FLOAT : 2
        TYPE_INT64 : 3
        TYPE_UINT64 : 4
        TYPE_INT32 : 5
        TYPE_FIXED64 : 6
        TYPE_FIXED32 : 7
        TYPE_BOOL : 8
        TYPE_STRING : 9
        TYPE_GROUP : 10
        TYPE_MESSAGE : 11
        TYPE_BYTES : 12
        TYPE_UINT32 : 13
        TYPE_ENUM : 14
        TYPE_SFIXED32 : 15
        TYPE_SFIXED64 : 16
        TYPE_SINT32 : 17
        TYPE_SINT64 : 18

    !type Method:
        @description =:
            | Method represents a method of an API interface.
        @source_path = "google/protobuf/api.proto"
        name <: string:
            @description =:
                | The simple name of this method.
            @json_tag = "name"
            @rpcId = "1"
        options <: sequence of Option:
            @description =:
                | Any metadata attached to the method.
            @json_tag = "options"
            @rpcId = "6"
        request_streaming <: bool:
            @description =:
                | If true, the request is streamed.
            @json_tag = "requestStreaming"
            @rpcId = "3"
        request_type_url <: string:
            @description =:
                | A URL of the input message type.
            @json_tag = "requestTypeUrl"
            @rpcId = "2"
        response_streaming <: bool:
            @description =:
                | If true, the response is streamed.
            @json_tag = "responseStreaming"
            @rpcId = "5"
        response_type_url <: string:
            @description =:
                | The URL of the output message type.
            @json_tag = "responseTypeUrl"
            @rpcId = "4"
        syntax <: Syntax:
            @description =:
                | The source syntax of this method.
            @json_tag = "syntax"
            @rpcId = "7"

    !type Mixin:
        @description =:
            | Declares an API Interface to be included in this interface. The including
            | interface must redeclare all the methods from the included interface, but
            | documentation and options are inherited as follows:
            |
            | - If after comment and whitespace stripping, the documentation
            |   string of the redeclared method is empty, it will be inherited
            |   from the original method.
            |
            | - Each annotation belonging to the service config (http,
            |   visibility) which is not set in the redeclared method will be
            |   inherited.
            |
            | - If an http annotation is inherited, the path pattern will be
            |   modified as follows. Any version prefix will be replaced by the
            |   version of the including interface plus the [root][] path if
            |   specified.
            |
            | Example of a simple mixin:
            |
            |     package google.acl.v1;
            |     service AccessControl {
            |       // Get the underlying ACL object.
            |       rpc GetAcl(GetAclRequest) returns (Acl) {
            |         option (google.api.http).get = "/v1/{resource=**}:getAcl";
            |       }
            |     }
            |
            |     package google.storage.v2;
            |     service Storage {
            |       rpc GetAcl(GetAclRequest) returns (Acl);
            |
            |       // Get a data record.
            |       rpc GetData(GetDataRequest) returns (Data) {
            |         option (google.api.http).get = "/v2/{resource=**}";
            |       }
            |     }
            |
            | Example of a mixin configuration:
            |
            |     apis:
            |     - name: google.storage.v2.Storage
            |       mixins:
            |       - name: google.acl.v1.AccessControl
            |
            | The mixin construct implies that all methods in `AccessControl` are
            | also declared with same name and request/response types in
            | `Storage`. A documentation generator or annotation processor will
            | see the effective `Storage.GetAcl` method after inheriting
            | documentation and annotations as follows:
            |
            |     service Storage {
            |       // Get the underlying ACL object.
            |       rpc GetAcl(GetAclRequest) returns (Acl) {
            |         option (google.api.http).get = "/v2/{resource=**}:getAcl";
            |       }
            |       ...
            |     }
            |
            | Note how the version in the path pattern changed from `v1` to `v2`.
            |
            | If the `root` field in the mixin is specified, it should be a
            | relative path under which inherited HTTP paths are placed. Example:
            |
            |     apis:
            |     - name: google.storage.v2.Storage
            |       mixins:
            |       - name: google.acl.v1.AccessControl
            |         root: acls
            |
            | This implies the following inherited HTTP annotation:
            |
            |     service Storage {
            |       // Get the underlying ACL object.
            |       rpc GetAcl(GetAclRequest) returns (Acl) {
            |         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";
            |       }
            |       ...
            |     }
        @source_path = "google/protobuf/api.proto"
        name <: string:
            @description =:
                | The fully qualified name of the interface which is included.
            @json_tag = "name"
            @rpcId = "1"
        root <: string:
            @description =:
                | If non-empty specifies a path under which inherited HTTP paths
                | are rooted.
            @json_tag = "root"
            @rpcId = "2"

    !type Option:
        @description =:
            | A protocol buffer option, which can be attached to a message, field,
            | enumeration, etc.
        @source_path = "google/protobuf/type.proto"
        name <: string:
            @description =:
                | The option's name. For protobuf built-in options (options defined in
                | descriptor.proto), this is the short name. For example, `"map_entry"`.
                | For custom options, it should be the fully-qualified name. For example,
                | `"google.api.http"`.
            @json_tag = "name"
            @rpcId = "1"
        value <: Any_:
            @description =:
                | The option's value packed in an Any message. If the value is a primitive,
                | the corresponding wrapper type defined in google/protobuf/wrappers.proto
                | should be used. If the value is an enum, it should be stored as an int32
                | value using the google.protobuf.Int32Value type.
            @json_tag = "value"
            @rpcId = "2"

    !type SourceContext:
        @description =:
            | `SourceContext` represents information about the source of a
            | protobuf element, like the file in which it is defined.
        @source_path = "google/protobuf/source_context.proto"
        file_name <: string:
            @description =:
                | The path-qualified name of the .proto file that contained the associated
                | protobuf element.  For example: `"google/protobuf/source_context.proto"`.
            @json_tag = "fileName"
            @rpcId = "1"

    !enum Syntax [description="The syntax in which a protocol buffer element is defined.", source_path="google/protobuf/type.proto"]:
        SYNTAX_PROTO2 : 0
        SYNTAX_PROTO3 : 1

    !type Type:
        @description =:
            | A protocol buffer message type.
        @source_path = "google/protobuf/type.proto"
        fields <: sequence of Field:
            @description =:
                | The list of fields.
            @json_tag = "fields"
            @rpcId = "2"
        name <: string:
            @description =:
                | The fully qualified message name.
            @json_tag = "name"
            @rpcId = "1"
        oneofs <: sequence of string:
            @description =:
                | The list of types appearing in `oneof` definitions in this type.
            @json_tag = "oneofs"
            @rpcId = "3"
        options <: sequence of Option:
            @description =:
                | The protocol buffer options.
            @json_tag = "options"
            @rpcId = "4"
        source_context <: SourceContext:
            @description =:
                | The source context.
            @json_tag = "sourceContext"
            @rpcId = "5"
        syntax <: Syntax:
            @description =:
                | The source syntax.
            @json_tag = "syntax"
            @rpcId = "6"
