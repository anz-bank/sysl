# getNamespace returns the value of an option split and cleaned to resemble an app name, or an
# empty array if the given option is not present.
#
# Intend for the retrieval of namespace and app name values from options.
let getNamespace =
    let re = //re.compile(`(?m)\{"sysl":.*}`);
    \file
        let matches = cond {file.comments?:{}: (file.comments >> re.match(.)) where .@item rank (:.@)};

        cond {
            matches: //seq.split(" :: ", //encoding.json.decode(matches(0)(0)(0))('sysl')('namespace').s)
        }
;

let getPackage = \file (file.@value.package single).@;

let cleanAnnoName = \annoName //seq.sub("(", "", //seq.sub(")", "", //seq.sub(".", "_", annoName)));

let rec annoFromOption = \annoValue
    cond annoValue {
        (:fields, ...): fields => $`${.@}: ${annoFromOption(.@value)}`,
        (:s, ...): s,
        (:b, ...): cond {b: "true", _: "false"},
        [...]: annoValue >> annoFromOption(.),
        {_: ...}: $`${annoValue.@}: ${annoFromOption(annoValue.@value)}`
    }
;

let annoFromComment = \annoValue
    "\n" ++ cond annoValue {
        [...]: //seq.join("\n", annoValue),
        _: annoValue
    }
;

let includeImport = \import import != "google/protobuf/descriptor.proto";

# `forwardSlashedPath` ensures paths use forward slashes regardless of OS
let forwardSlashedPath = \path //seq.sub("\\", "/", path);

let primitiveTypes = {
    'int','integer','int32','int64',
    'uint32','uint64','sint32','sint64',
    'fixed32', 'fixed64','sfixed32','sfixed64',
    'bool', 'boolean',
    'number', 'double', 'float',
    'string', 'str',
    'date',
    'datetime',
    'byte', 'bytes',
    'binary',
};

(
    :getNamespace,
    :getPackage,
    :cleanAnnoName,
    :annoFromOption,
    :annoFromComment,
    :includeImport,
    :forwardSlashedPath,
    :primitiveTypes,
)
