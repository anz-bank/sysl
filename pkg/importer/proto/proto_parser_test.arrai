let (:evalConstant, :parseFile, ...) = //{./proto_parser};

(
    constant: (
        string:
            let constant = (strLit: ('': [153\'"', 154\'test', 231\'"']));
            let expected = (s: "test");
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
        decimal:
            let constant = (decimalLit: ('': 231\'2'));
            let expected = (d: 2);
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
        octal:
            let constant = (octalLit: ('': 181\'0'));
            let expected = (o: 0);
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
        bool:
            let constant = (boolLit: ('': 321\'true'));
            let expected = (b: true);
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
        object:
            let constant = (object: (objectField: [('': 1390\':', objectKey: (constant: (fullIdent: (ident: [('': [1387\'g', 1388\'et'])]))), objectValue: (constant: (strLit: ('': [1392\'"', 1393\'/api/accounts', 1415\'"']))))]));
            let expected = (fields: {"get": (s: "/api/accounts")});
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
        array:
            let constant = (array: ('': [1497\'[', 1543\']'], arrayItem: [(constant: (strLit: ('': [1498\'"', 1499\'string', 1542\'"']))), (constant: (intLit: (decimalLit: ('': 235\'2'))))]));
            let expected = [(s: "string"), (d: 2)];
            let actual = evalConstant(constant);
            //test.assert.equal(expected, actual),
    ),

    parse: (

        package: (
            simple:
                let file = parseFile(`syntax = "proto3"; package foo.bar.baz;`);
                let expected = {'foo.bar.baz': ()};
                let actual = file.package;
                //test.assert.equal(expected, actual),

            none:
                let file = parseFile(`syntax = "proto3";`);
                let expected = {};
                let actual = file.package;
                //test.assert.equal(expected, actual),
        ),

        imports: (
            single:
                let file = parseFile(`syntax = "proto3"; import "other.proto";`);
                let expected = {'other.proto': ()};
                let actual = file.imports;
                //test.assert.equal(expected, actual),

            multiple:
                let file = parseFile(`syntax = "proto3"; import public "one.proto"; import "two.proto";`);
                let expected = {'one.proto': ( modifier:'public'), 'two.proto': ()};
                let actual = file.imports;
                //test.assert.equal(expected, actual),
        ),

        options: (
            single:
                let file = parseFile(`syntax = "proto3"; option java_package = "com.example.foo";`);
                let expected = {'java_package': (s: 'com.example.foo')};
                let actual = file.options;
                //test.assert.equal(expected, actual),

            full:
                let file = parseFile(`syntax = "proto3"; option (foo.java_package).bar = "com.example.foo"; option (foo.java_package).baz = "true";`);
                let expected = {'(foo.java_package).bar': (s: 'com.example.foo'), '(foo.java_package).baz': (s: 'true')};
                let actual = file.options;
                //test.assert.equal(expected, actual),

            comment:
                let file = parseFile(`
                    syntax = "proto3"; option (foo.java_package).bar = {
                        // Comment
                        foo: [
                            // Comment
                            "bar"
                            // Comment
                        ]
                        // Comment
                    };
                    // Comment
                `);
                let expected = {'(foo.java_package).bar': (fields: {'foo': [(s: 'bar')]})};
                let actual = file.options;
                //test.assert.equal(expected, actual),
        ),

        enum: (
            single:
                let file = parseFile(`syntax = "proto3"; enum something { option java_package = "com.example.foo"; }`);
                let expected = {'something': (options: {"java_package": (s: "com.example.foo")})};
                let actual = file.enums;
                //test.assert.equal(expected, actual),
        ),

        messages: (
            single:
                let file = parseFile(`syntax = "proto3"; message Outer { option (my_option).a = true; }`);
                let expected = {"Outer": (options: {"(my_option).a": (b: true)})};
                let actual = file.messages;
                //test.assert.equal(expected, actual),

            reserved: (
                single:
                    let file = parseFile(`syntax = "proto3"; message Outer { reserved 1; }`);
                    let expected = {'Outer': (reserveds: {(ranges: {(from: (d: 1), till: (d: 1))})})};
                    let actual = file.messages;
                    //test.assert.equal(expected, actual),

                multiple:
                    let file = parseFile(`syntax = "proto3"; message Outer { reserved 2; reserved 4, 5, 6; }`);
                    let expected = {'Outer': (reserveds: {
                        |ranges|
                        ({
                            |from  , till|
                            ((d: 2), (d: 2)),
                        }),
                        ({
                            |from  , till|
                            ((d: 4), (d: 4)),
                            ((d: 5), (d: 5)),
                            ((d: 6), (d: 6)),
                        }),
                    })};
                    let actual = file.messages;
                    //test.assert.equal(expected, actual),
            ),

            oneof: (
                multiple:
                    let file = parseFile($`syntax = "proto3"; message Outer {oneof foo {int64 int = 1; string str = 2;}}`);
                    let expected = {
                        "Outer": (oneofs: {"foo": (fields: {
                            "int": (type: (name: "int64"), value: (d: 1)),
                            "str": (type: (name: "string"), value: (d: 2)),
                        })})
                    };
                    let actual = file.messages;
                    //test.assert.equal(expected, actual),

                comments:
                    let file = parseFile($`
                        syntax = "proto3";
                        message Outer {
                            oneof foo {
                                int64 field = 1; // Field comment
                                // Comment
                            }
                        }
                    `);
                    let expected = {
                        "Outer": (oneofs: {"foo": (comments: [" Comment"], fields: {"field": (comments: [" Field comment"], type: (name: "int64"), value: (d: 1))})})
                    };
                    let actual = file.messages;
                    //test.assert.equal(expected, actual),
            ),

            nested:
                let file = parseFile(`syntax = "proto3"; message Outer { option (my_option).a = true; message Inner { foo.bar foobar = 3; int64 ival = 1; } }`);
                let expected = {
                        "Outer": (messages: {"Inner": (fields: {"ival":( type: (name: "int64"), value: (d: 1)), "foobar": (type: (name: "bar", package: "foo"), value: (d: 3))})}, options: {"(my_option).a": (b: true)})
                    };
                let actual = file.messages;
                //test.assert.equal(expected, actual),
        ),

        services: (
            rpcWithoutOptions:
                let file = parseFile(`syntax = "proto3"; service SearchService { rpc Search (foo.bar.SearchRequest) returns (baz.SearchResponse); }`);
                let expected = {
                            "SearchService": (
                                rpcs: {
                                    "Search": (
                                        in: (name: "SearchRequest", package: "foo.bar"),
                                        out: (name: "SearchResponse", package: "baz")
                                    )
                                }
                            )
                    };
                let actual = file.services;
                //test.assert.equal(expected, actual),
            rpcWithOptions:
                let file = parseFile(`syntax = "proto3"; service Example {rpc Search(SearchRequest) returns (SearchResponse) {
                                        option (google.api.http) = {get: "/example/search"};}}`);
                let expected = {
                           "Example": (
                                rpcs: {
                                    "Search": (
                                        in: (name: "SearchRequest"),
                                        options: {
                                            "(google.api.http)": (fields: {"get": (s: "/example/search")})
                                        },
                                        out: (name: "SearchResponse")
                                    )
                                }
                           )
                    };
                let actual = file.services;
                //test.assert.equal(expected, actual),
        ),
        file: (
            proto2:
                let actual = parseFile(//[//encoding.bytes]{/pkg/importer/proto/tests/proto2.proto});
                let expected =  (
                                    comments: ['*****************************\n * comments with lots of stars\n *****************************', '* comment with 2 stars *', ''],
                                    enums: {
                                        'EnumAllowingAlias': (
                                            comments: [" A\n    Multiline\nComment "],
                                            fields: {
                                                'RUNNING': (
                                                    options: {'(custom_option)': (s: 'hello world')},
                                                    value: (d: 2,),
                                                ),
                                                'STARTED': (value: (d: 1)),
                                                'UNKNOWN': (value: (o: 0), comments: [" enumField comment"])
                                            },
                                            options: {'allow_alias': (b: true, comments: [" preceding option comment", " inline option comment"])}
                                        )
                                    },
                                    extends: {"Foo": ( comments: [" single line multiline "], fields:{"bar": (label: "optional", type: (name: "int32"), value: (d: 126))}) },
                                    imports: {},
                                    messages: {
                                        'Outer': (
                                            comments: [" Level 1"],
                                            fields: {
                                                'enum_field': (label: "optional", type: (name: 'EnumAllowingAlias', package: 'proto2'), value: (d: 3)),
                                                'ival': (label: 'required', type: (name: 'int64'), value: (d: 1)),
                                                'middle_message': (label: 'repeated', type: (name: 'Middle', package: 'proto2'), value: (d: 2))
                                            },
                                            mapFields: {'my_map': (keyType: (name: 'int32'), type: (name: 'string'), value: (d: 4))},
                                            messages: {
                                                'Middle': (
                                                    comments: [' Level 2', ' Description'],
                                                    fields: {
                                                        'inner_message': (label: 'repeated', type: (name: 'Inner', package: 'proto2'), value: (d: 2)),
                                                        'ival': (label: 'required', type: (name: 'int64'), value: (d: 1))
                                                    },
                                                    messages: {'Inner': (fields: {'ival': (label: 'required', type: (name: 'int64'), value: (d: 1))})}
                                                ),
                                            },
                                            options: {
                                                '(my_option).a': (b: true),
                                                '(object_option).a': (fields: {'array': [(d: 1), (s: 'string'), (fields: {'foo': (s: 'bar')})], 'object': (fields: {'foo': (s: 'bar')})}),
                                            },
                                        ),
                                    },
                                    options: {'java_package': (s: 'com.example.foo'), 'go_package': (s: 'github.com/test/package'), 'random': (s: 'random')},
                                    package: {'proto2': ()},
                                    services: {
                                        'DeprecatedService': (comments: [' deprecated service '], options: {'(deprecated)': (b: true)}),
                                        'SearchService': (rpcs: {"Search": (in: (name: "SearchRequest", package: 'proto2'), out: (name: "SearchResponse", package: 'proto2'))})
                                    },
                                    syntax: 'proto2',
                                );
                //test.assert.equal(expected, actual),
            proto3:
                let actual = parseFile(//[//encoding.bytes]{/pkg/importer/proto/tests/proto3.proto});
                let expected =  (
                                    enums: {
                                        'EnumAllowingAlias': (
                                            fields: {
                                                'RUNNING': (
                                                    options: {'(custom_option)': (s: 'hello world')},
                                                    value: (d: 2)
                                                ),
                                                'STARTED': (value: (d: 1)),
                                                'UNKNOWN': (value: (o: 0,))
                                            },
                                            options: {'allow_alias': (b: true)}
                                        ),
                                        'State': (fields: {'UNKNOWN': (value: (o: 0))}),
                                    },
                                    extends: {},
                                    imports: {},
                                    messages: {
                                        'Outer': (
                                            comments: [" Level 1"],
                                            fields: {
                                                'enum_field': (type: (name: 'EnumAllowingAlias', package: 'proto3'), value: (d: 3)),
                                                'inner_message': (label: "repeated", type: (name: 'Inner', package: 'proto3'), value: (d: 2)),
                                            },
                                            mapFields: {
                                                'primitive_map': (keyType: (name: 'int32'), type: (name: 'int32'), value: (d: 4)),
                                                'message_map': (keyType: (name: 'string'), type: (name: 'Inner', package: 'proto3'), value: (d: 5)),
                                            },
                                            messages: {
                                                'Inner': (
                                                    comments: [" Level 2"],
                                                    fields: {'ival': (type: (name: 'int64'), value: (d: 1))},
                                                    enums: {'State': (fields: {'UNKNOWN': (value: (o: 0))})},
                                                ),
                                            },
                                            enums: {
                                                'State': (fields: {'UNKNOWN': (value: (o: 0))}),
                                            },
                                            options: {
                                                '(my_option).a': (b: true),
                                                '(object_option).a': (fields: {'array': [(d: 1), (s: 'string'), (fields: {'foo': (s: 'bar')})], 'object': (fields: {'foo': (s: 'bar')})}),
                                            },
                                        ),
                                    },
                                    options: {
                                        'java_package': (s: 'com.example.foo'),
                                        'go_package': (s: 'github.com/test/package'),
                                        # Strings are not escaped in memory, only on serialization.
                                        'php_namespace': (s: `Foo\Bar`),
                                        'random': (s: 'random'),
                                    },
                                    package: {'proto3': ()},
                                    services: {
                                        'SearchService': (rpcs: {"Search": (
                                            in: (name: "SearchRequest", package: 'proto3'),
                                            out: (name: "SearchResponse", package: 'proto3'),
                                    )})},
                                    syntax: 'proto3',
                                );
                //test.assert.equal(expected, actual)
        )
    )
)
