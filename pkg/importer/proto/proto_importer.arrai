let (:import, :parseFile, ...) = //{./proto_parser};
let (:module, ...) = //{./proto_to_sysl};
let (:renderAllInOne, ...) = //{/pkg/arrai/sysl-renderer/render_mod};

let importParsed = \parsed
    $`
    # Code generated by Sysl. DO NOT EDIT.

    ${renderAllInOne(module(parsed))}
` ++ '\n';

let importFiles = \files \importPaths
    importParsed(import(files, cond {importPaths:  //seq.split(",", importPaths)} || []))
;

let importDir = \dir \importPaths
    let isProto = \path //seq.has_suffix(".proto", path);

    let paths = //os.tree(dir) => .path;
    let files = (paths where isProto(.)) orderby .;

    importFiles(files, importPaths)
;

let import = \(:importPaths, ...) \input
    cond input {
        [...]: importFiles(input, importPaths),
        _:
            cond {
                //seq.has_suffix('.proto', input): importFiles([input], importPaths),
                _: importDir(input, importPaths),
            }
    }
;

# FIXME: This is only called when sysl imports a proto files and it does not support import paths yet.
# Implement and test.
let importString = \_ \str importParsed({'': parseFile(<<str>>)});

(
    :importString,
    :import
)
