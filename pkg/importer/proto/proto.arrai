let (:trimWhitespace, ...) = //{/pkg/arrai/util};
# Tools for parsing and importing Protocol Buffers.
# 
# `grammar` is a wbnf encoding of the Protocol Buffers Version 2 and 3 Language Specifications:
# https://developers.google.com/protocol-buffers/docs/reference/proto3-spec
# https://developers.google.com/protocol-buffers/docs/reference/proto2-spec

let grammar = {://grammar.lang.wbnf:

file            -> c* syntax stmt=(import | package | option | topLevelDef | emptyStatement)* \n*;

syntax          -> "syntax" "=" quote proto quote ";" ($ | c)?;

proto           -> "proto2" | "proto3";

package         -> c* "package" fullIdent ";" ($ | c)?;

import          -> c* "import" modifier=("weak" | "public")? strLit ";" ($ | c)?;

option          -> c* "option" optionName "=" constant ";" ($ | c)?;
optionName      -> ("(" fullIdent ")" | ident) ("." ident)*;

topLevelDef     -> enum | message | service | extend;

enum            -> c* "enum" enumName enumBody;
enumName        -> ident;
enumBody        -> "{" (option | enumField | emptyStatement)* "}";
enumField       -> c* fieldName "=" "-"? intLit ("[" enumValueOption:comma "]")? ";" ($ | c)?;
enumValueOption -> optionName "=" constant;

message         -> c* "message" messageName messageBody;
messageName     -> ident;
messageBody     -> "{" (field | enum | message | extend | extensions | group | option | oneof | mapField | reserved | emptyStatement)* "}";
messageType     ->  ident:,".";

service         -> c* "service" serviceName "{" (option | rpc | emptyStatement)* "}";
serviceName     -> ident;
rpc             -> c* "rpc" rpcName "(" "stream"? inputMessage ")" "returns" "(" "stream"? returnMessage ")" (( "{" (option | emptyStatement)* "}" ) | ";" ) ($ | c)?;
rpcName         -> ident;
inputMessage    -> messageType;
returnMessage   -> messageType;

extend          -> c* "extend" messageType "{" (field | group | emptyStatement)* "}";

field           -> c* label? type fieldName "=" fieldNumber ("[" fieldOptions "]")? ";"  ($ | c)?;
fieldName       -> ident;
fieldNumber     -> intLit;
fieldOptions    -> fieldOption:comma;
fieldOption     -> optionName "=" constant;

group           -> c* label "group" groupName "=" fieldNumber messageBody;
groupName       -> ident;

oneof           -> c* "oneof" oneofName "{" (option | oneofField | emptyStatement)* "}";
oneofName       -> ident;
oneofField      -> c* type fieldName "=" fieldNumber ("[" fieldOptions "]")? ";" ($ | c)?;

mapField        -> c* "map" "<" keyType "," type ">" mapName "=" fieldNumber  ("[" fieldOptions "]")? ";" ($ | c)?;
mapName         -> ident;
keyType         -> "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" |
                   "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string";
                   
reserved        -> c* "reserved" (range:comma | ('"'fieldName'"'):comma) ";" ($ | c)?;
extensions      -> c* "extensions" range:comma ";" ($ | c)?;
range           -> intLit ("to" (intLit | "max"))?;

emptyStatement  -> ";";

quote           -> "\"" | "'";

label           -> "repeated" | "optional" | "required";

type            ->  messageType;

constant        ->  [-+]? intLit | [-+]? floatLit | strLit | boolLit | fullIdent | object | array;

ident           -> [[:alnum:]] [[:alnum:]_]*;
fullIdent       -> ident:".";

intLit          -> decimalLit | octalLit | hexLit;
decimalLit      -> /{[1-9]\d*};
octalLit        -> /{0[0-7]*};
hexLit          -> /{(?i)0x[\da-f][\da-f]*};

floatLit        -> /{\d+(?:\.\d+?)? (?:e[-+]?\d+)? | \. \d+ (?:e[-+]?\d+)? | inf | nan};

boolLit         -> /{true | false};

strLit          -> ('"' [^"]*:'""' '"' | "'" [^']*:"''" "'"); //';

object          -> "{" objectField:comma? "}";
objectField     -> objectKey ":" objectValue;
objectKey       -> constant;
objectValue     -> constant;

array           -> "[" arrayItem:comma? "]";
arrayItem       -> constant;

c               -> /{ // .* $ | (?: /\* (?: [^*] | \*+[^*/] )* \*/ )};
comma           -> c* ",";

// All tokens may be preceded by whitespace.
.wrapRE -> /{\s*()};

:};

let evalIdent = \parsed
    cond parsed {
        [...]: //seq.join('', parsed >> //seq.join('', .'')),
        _: //seq.join('', parsed.'')
    };

let evalFullIdent = \parsed //seq.join('.', parsed.ident >> //seq.join('', .'') rank (:.@));

let evalName = \parsed
    cond parsed {
        (:fullIdent, ...): evalFullIdent(fullIdent),
        (:ident, ...): evalIdent(ident),
    };

let evalType = \parsed
    cond parsed {
        (:messageType, ...): evalIdent(messageType.ident),
        (:ident, ...): evalIdent(ident),
        _: parsed.'' rank (:.@)
    };

let evalLabel = \parsed parsed.'' rank (:.@) ;

let rec evalConstant = \parsed
    cond parsed {
        (:strLit, ...): (s: strLit.''(1) rank (:.@)),
        (:intLit, ...): evalConstant(intLit),
        (:decimalLit, ...): (d: //eval.value(decimalLit.'' rank (:.@))),
        (:octalLit, ...): (o: //eval.value(octalLit.'' rank (:.@))),
        (:boolLit, ...): (b: //eval.value(boolLit.'' rank (:.@))),
        (:object, ...): (fields: //rel.union(object.objectField?:{} => {evalConstant(.@item.objectKey.constant): evalConstant(.@item.objectValue.constant)})),
        (:array, ...): array.arrayItem?:{} >> evalConstant(.constant),
        (:fullIdent, ...): evalFullIdent(fullIdent)
    };

let evalOptionName = \parsed
    cond parsed {
        (:fullIdent, :ident, ...): $`(${evalFullIdent(fullIdent)}).${evalIdent(parsed.ident)}`,
        (:fullIdent, ...): $`(${evalFullIdent(fullIdent)})`,
        (:ident, ...): evalIdent(ident),
    };

let evalComments = \parsed
    cond parsed {
        (:c, ...): (comments: c >> cond {
            //seq.has_prefix("//", .''): trimWhitespace(//seq.trim_prefix("//", .'')),
            //seq.has_prefix("/*", .''): 
                let trimmed = //seq.trim_suffix("*/", //seq.trim_prefix("/*", .''));
                //seq.join("\n", //seq.split("\n", trimmed) >> trimWhitespace(.) where .@item rank (:.@))
        })
    } || ();

let evalOption = \parsed { evalOptionName(parsed.optionName): evalConstant(parsed.constant) +> evalComments(parsed) };

let evalField = \parsed
    {
        evalName(parsed.fieldName): ( 
        value: evalConstant(parsed.fieldNumber), 
        type: evalType(parsed.type)) 
        +> (cond parsed {(:label, ...): (label: evalLabel(label))} || ())
        +> (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ()) +> evalComments(parsed)
    };

let evalOneofField = \parsed
    {
        parsed.oneofName: (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ())
            +> (cond parsed {(:oneofField, ...): (fields: //rel.union(oneofField => evalField(.@item)))} || ()) +> evalComments(parsed)
    };

let evalMapField = \parsed
    {
        evalName(parsed.mapName): (
            type: evalType(parsed.type),
            keyType: evalType(parsed.keyType),
            value: evalConstant(parsed.fieldNumber)
        ) +> (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ()) +> evalComments(parsed)
     };

let evalGroupField = \parsed
    {
        evalName(parsed.groupName): (label: evalLabel(parsed.label)) +> evalMessageBody(parsed.messageBody)
    };

let evalRange = \parsed
    cond {
        parsed.''?:{}:(from: evalConstant(parsed.intLit(0)), till: evalConstant(parsed.intLit(1))),
        _: (from: evalConstant(parsed.intLit(0)), till: evalConstant(parsed.intLit(0)))
    };

let evalReserved = \parsed
    (cond parsed {(:range, ...): (ranges: range => evalRange(.@item))} || ())
    +> (cond parsed {(:fieldName, ...): (fields: fieldName => evalName(.@item))} || ()) +> evalComments(parsed);

let evalEnumField = \parsed
    {
        evalName(parsed.fieldName): (
            value: evalConstant(parsed)
        ) +> (cond parsed {(:enumValueOption, ...): (options: //rel.union(enumValueOption => evalOption(.@item)))} || ()) +> evalComments(parsed)
    };

let evalEnumBody = \parsed
    (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ())
     +> (cond parsed {(:enumField, ...): (fields: //rel.union(parsed.enumField?:{} => evalEnumField(.@item)))} || ()) +> evalComments(parsed);

let evalEnum = \parsed { evalName(parsed.enumName): evalEnumBody(parsed.enumBody) +> evalComments(parsed) };

let evalRPC = \parsed
    {
        evalName(parsed.rpcName):(
            in: evalName(parsed.inputMessage.messageType),
            out: evalName(parsed.returnMessage.messageType)
        )+> (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ()) +> evalComments(parsed)
    };

let rec evalMessageBody = \parsed
    (cond parsed {(:field, ...): (fields: //rel.union(field => evalField(.@item)))} || ())
    +> (cond parsed {(:enum, ...): (enums: //rel.union(enum => evalEnum(.@item)))} || ())
    +> (cond parsed {(:group, ...): (groups: //rel.union(group => {evalName(group.groupName): evalMessageBody(group.messageBody)}))} || ())
    +> (cond parsed {(:message, ...): (messages: //rel.union(message => {evalName(.@item.messageName): evalMessageBody(.@item.messageBody) +> evalComments(.@item)}))} || ())
    +> (cond parsed {(:option, ...): (options: //rel.union(option => evalOption(.@item)))} || ())
    +> (cond parsed {(:oneof, ...): (oneofs: //rel.union(oneof => evalOneofField(.@item)))} || ())
    +> (cond parsed {(:mapField, ...): (mapFields: //rel.union(mapField => evalMapField(.@item)))} || ())
    +> (cond parsed {(:reserved, ...): (reserveds: //rel.union(reserved => evalReserved(.@item)))} || ());

let evalGroupField = \parsed
    {
        evalName(parsed.groupName): evalMessageBody(parsed.messageBody)
    };

let evalService = \parsed
    {
        evalName(parsed.serviceName): ()
        +> (cond parsed {(:option, ...): (options: option => evalOption(.@item))} || ()) 
        +> (cond parsed {(:rpc, ...): (rpcs: //rel.union(rpc => evalRPC(.@item)))} || ())
        +> evalComments(parsed)
    };

let evalExtend = \parsed
    {
        evalName(parsed.messageType): ()
        +> (cond parsed {(:field, ...): (fields: //rel.union(field => evalField(.@item)))} || ())
        +> (cond parsed {(:group, ...): (groups: //rel.union(group => {evalName(group.groupName): evalMessageBody(group.messageBody)}))} || ())
        +> evalComments(parsed)
    };

let evalStmt = \parsed
    cond parsed {
        (:import, ...): 
            (import: {import.strLit.''(1) rank (:.@): () +> (cond import.modifier?:{} {('':mod, ...): (modifier: mod rank (:.@))} || ())}),
        (:package, ...): 
            (package: {evalFullIdent(package.fullIdent): () +> evalComments(package)}),
        (:option, ...): (
           (option: evalOption(option))
        ),
        (:topLevelDef, ...): 
            cond topLevelDef {
                (:enum, ...):
                    (enum: evalEnum(enum)),
                (:message, ...):
                    (message: {evalName(message.messageName): evalMessageBody(message.messageBody) +> evalComments(message)}),
                (:service, ...):
                    (service: evalService(service)),
                (:extend, ...):
                    (extend: evalExtend(extend))
            }
    };

let evalFile = \parsed
    let syntax = parsed.syntax.proto.'' rank (:.@);
    let stmts = parsed.stmt?:{} => evalStmt(.@item);
    let package = //rel.union(stmts where (.).package?:{} => .package);
    let imports = //rel.union(stmts where (.).import?:{} => .import);
    let options = //rel.union(stmts where (.).option?:{} => .option);
    let enums = //rel.union(stmts where (.).enum?:{} => .enum);
    let messages = //rel.union(stmts where (.).message?:{} => .message);
    let services = //rel.union(stmts where (.).service?:{} => .service);
    let extends = //rel.union(stmts where (.).extend?:{} => .extend);
    (:syntax, :package, :imports, :options, :messages, :enums, :services, :extends) +> evalComments(parsed);

# `parseFile` parses a byte array against the `file` grammar rule and evaluates it into an arr.ai model.
let parseFile = \bytes 
    evalFile(//grammar.parse(grammar, "file", bytes));

let import = \file \paths
    let fileMaps = paths >> \path {path: //os.tree(path) => .path where //seq.contains(".proto", .)};
    # `importFile` returns the full file path of an import
    # `import` the file to import
    # `fileMaps` a map of import paths to available files
    let importFile = \import \fileMaps 
        let matches = (fileMaps >> \map (map single).@value where //seq.contains(import,  .)) where .@item;
        cond matches{[...]: (matches rank (:.@))(0) single, _: //error($'FATAL: cannot find import ${import}')};
    # `import` returns the parsed files and their imports
    # `files` the files to parse
    # `result` the result of all evaluated files so far
    let rec _import = \files \result
        cond files {
            {}: result,
            [file, ...tail]:
                cond {
                    result(file)?:{}: _import(tail, result),
                    _:
                        let parsed = parseFile(//os.file(file));
                        let result = result +> {file: parsed};
                        let importFiles = (parsed.imports => importFile(.@, fileMaps) orderby .);
                        _import(tail ++ importFiles, result)
        }
    };
    _import([file], {});

(
    :evalConstant, # Visible for testing
    :parseFile, # Visible for testing
    :import
)
