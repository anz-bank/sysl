{'google/protobuf/any.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'Any': (comments: [' `Any` contains an arbitrary serialized protocol buffer message along with a', ' URL that describes the type of the serialized message.', {}, ' Protobuf library provides support to pack/unpack Any values in the form', ' of utility functions or additional generated methods of the Any type.', {}, ' Example 1: Pack and unpack a message in C++.', {}, '     Foo foo = ...;', '     Any any;', '     any.PackFrom(foo);', '     ...', '     if (any.UnpackTo(&foo)) {', '       ...', '     }', {}, ' Example 2: Pack and unpack a message in Java.', {}, '     Foo foo = ...;', '     Any any = Any.pack(foo);', '     ...', '     if (any.is(Foo.class)) {', '       foo = any.unpack(Foo.class);', '     }', {}, '  Example 3: Pack and unpack a message in Python.', {}, '     foo = Foo(...)', '     any = Any()', '     any.Pack(foo)', '     ...', '     if any.Is(Foo.DESCRIPTOR):', '       any.Unpack(foo)', '       ...', {}, '  Example 4: Pack and unpack a message in Go', {}, '      foo := &pb.Foo{...}', '      any, err := anypb.New(foo)', '      if err != nil {', '        ...', '      }', '      ...', '      foo := &pb.Foo{}', '      if err := any.UnmarshalTo(foo); err != nil {', '        ...', '      }', {}, ' The pack methods provided by protobuf library will by default use', " 'type.googleapis.com/full.type.name' as the type URL and the unpack", " methods only use the fully qualified type name after the last '/'", ' in the type URL, for example "foo.bar.com/x/y.z" will yield type', ' name "y.z".', {}, {}, ' JSON', ' ====', ' The JSON representation of an `Any` value uses the regular', ' representation of the deserialized, embedded message, with an', ' additional field `@type` which contains the type URL. Example:', {}, '     package google.profile;', '     message Person {', '       string first_name = 1;', '       string last_name = 2;', '     }', {}, '     {', '       "@type": "type.googleapis.com/google.profile.Person",', '       "firstName": <string>,', '       "lastName": <string>', '     }', {}, ' If the embedded message type is well-known and has a custom JSON', ' representation, that representation will be embedded adding a field', ' `value` which holds the custom JSON in addition to the `@type`', ' field. Example (for message [google.protobuf.Duration][]):', {}, '     {', '       "@type": "type.googleapis.com/google.protobuf.Duration",', '       "value": "1.212s"', '     }', {}], fields: {'type_url': (comments: [' A URL/resource name that uniquely identifies the type of the serialized', ' protocol buffer message. This string must contain at least', " one \"/\" character. The last segment of the URL's path must represent", ' the fully qualified name of the type (as in', ' `path/google.protobuf.Duration`). The name should be in a canonical form', ' (e.g., leading "." is not accepted).', {}, ' In practice, teams usually precompile into the binary all types that they', ' expect it to use in the context of Any. However, for URLs which use the', ' scheme `http`, `https`, or no scheme, one can optionally set up a type', ' server that maps type URLs to message definitions as follows:', {}, ' * If no scheme is provided, `https` is assumed.', ' * An HTTP GET on the URL must yield a [google.protobuf.Type][]', '   value in binary format, or produce an error.', ' * Applications are allowed to cache lookup results based on the', '   URL, or have them precompiled into a binary to avoid any', '   lookup. Therefore, binary compatibility needs to be preserved', '   on changes to types. (Use versioned type names to manage', '   breaking changes.)', {}, ' Note: this functionality is not currently available in the official', ' protobuf release, and it is not used for type URLs beginning with', ' type.googleapis.com.', {}, ' Schemes other than `http`, `https` (or the empty scheme) might be', ' used with implementation specific semantics.', {}], type: (name: 'string'), value: (d: 1)), 'value': (comments: [' Must be a valid serialized protocol buffer of the above specified type.'], type: (name: 'bytes'), value: (d: 2))})}, options: {'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/anypb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'AnyProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/api.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {'google/protobuf/source_context.proto': (), 'google/protobuf/type.proto': ()}, messages: {'Api': (comments: [' Api is a light-weight descriptor for an API Interface.', {}, ' Interfaces are also described as "protocol buffer services" in some contexts,', ' such as by the "service" keyword in a .proto file, but they are different', ' from API Services, which represent a concrete implementation of an interface', ' as opposed to simply a description of methods and bindings. They are also', ' sometimes simply referred to as "APIs" in other contexts, such as the name of', ' this message itself. See https://cloud.google.com/apis/design/glossary for', ' detailed terminology.'], fields: {'methods': (comments: [' The methods of this interface, in unspecified order.'], label: 'repeated', type: (name: 'Method'), value: (d: 2)), 'mixins': (comments: [' Included interfaces. See [Mixin][].'], label: 'repeated', type: (name: 'Mixin'), value: (d: 6)), 'name': (comments: [' The fully qualified name of this interface, including package name', " followed by the interface's simple name."], type: (name: 'string'), value: (d: 1)), 'options': (comments: [' Any metadata attached to the interface.'], label: 'repeated', type: (name: 'Option'), value: (d: 3)), 'source_context': (comments: [' Source context for the protocol buffer service represented by this', ' message.'], type: (name: 'SourceContext'), value: (d: 5)), 'syntax': (comments: [' The source syntax of the service.'], type: (name: 'Syntax'), value: (d: 7)), 'version': (comments: [' A version string for this interface. If specified, must have the form', ' `major-version.minor-version`, as in `1.10`. If the minor version is', ' omitted, it defaults to zero. If the entire version field is empty, the', ' major version is derived from the package name, as outlined below. If the', ' field is not empty, the version in the package name will be verified to be', ' consistent with what is provided here.', {}, ' The versioning schema uses [semantic', ' versioning](http://semver.org) where the major version number', ' indicates a breaking change and the minor version an additive,', ' non-breaking change. Both version numbers are signals to users', ' what to expect from different versions, and should be carefully', ' chosen based on the product plan.', {}, ' The major version is also reflected in the package name of the', ' interface, which must end in `v<major-version>`, as in', ' `google.feature.v1`. For major versions 0 and 1, the suffix can', ' be omitted. Zero major versions must only be used for', ' experimental, non-GA interfaces.', {}, {}], type: (name: 'string'), value: (d: 4))}), 'Method': (comments: [' Method represents a method of an API interface.'], fields: {'name': (comments: [' The simple name of this method.'], type: (name: 'string'), value: (d: 1)), 'options': (comments: [' Any metadata attached to the method.'], label: 'repeated', type: (name: 'Option'), value: (d: 6)), 'request_streaming': (comments: [' If true, the request is streamed.'], type: (name: 'bool'), value: (d: 3)), 'request_type_url': (comments: [' A URL of the input message type.'], type: (name: 'string'), value: (d: 2)), 'response_streaming': (comments: [' If true, the response is streamed.'], type: (name: 'bool'), value: (d: 5)), 'response_type_url': (comments: [' The URL of the output message type.'], type: (name: 'string'), value: (d: 4)), 'syntax': (comments: [' The source syntax of this method.'], type: (name: 'Syntax'), value: (d: 7))}), 'Mixin': (comments: [' Declares an API Interface to be included in this interface. The including', ' interface must redeclare all the methods from the included interface, but', ' documentation and options are inherited as follows:', {}, ' - If after comment and whitespace stripping, the documentation', '   string of the redeclared method is empty, it will be inherited', '   from the original method.', {}, ' - Each annotation belonging to the service config (http,', '   visibility) which is not set in the redeclared method will be', '   inherited.', {}, ' - If an http annotation is inherited, the path pattern will be', '   modified as follows. Any version prefix will be replaced by the', '   version of the including interface plus the [root][] path if', '   specified.', {}, ' Example of a simple mixin:', {}, '     package google.acl.v1;', '     service AccessControl {', '       // Get the underlying ACL object.', '       rpc GetAcl(GetAclRequest) returns (Acl) {', '         option (google.api.http).get = "/v1/{resource=**}:getAcl";', '       }', '     }', {}, '     package google.storage.v2;', '     service Storage {', '       rpc GetAcl(GetAclRequest) returns (Acl);', {}, '       // Get a data record.', '       rpc GetData(GetDataRequest) returns (Data) {', '         option (google.api.http).get = "/v2/{resource=**}";', '       }', '     }', {}, ' Example of a mixin configuration:', {}, '     apis:', '     - name: google.storage.v2.Storage', '       mixins:', '       - name: google.acl.v1.AccessControl', {}, ' The mixin construct implies that all methods in `AccessControl` are', ' also declared with same name and request/response types in', ' `Storage`. A documentation generator or annotation processor will', ' see the effective `Storage.GetAcl` method after inheriting', ' documentation and annotations as follows:', {}, '     service Storage {', '       // Get the underlying ACL object.', '       rpc GetAcl(GetAclRequest) returns (Acl) {', '         option (google.api.http).get = "/v2/{resource=**}:getAcl";', '       }', '       ...', '     }', {}, ' Note how the version in the path pattern changed from `v1` to `v2`.', {}, ' If the `root` field in the mixin is specified, it should be a', ' relative path under which inherited HTTP paths are placed. Example:', {}, '     apis:', '     - name: google.storage.v2.Storage', '       mixins:', '       - name: google.acl.v1.AccessControl', '         root: acls', {}, ' This implies the following inherited HTTP annotation:', {}, '     service Storage {', '       // Get the underlying ACL object.', '       rpc GetAcl(GetAclRequest) returns (Acl) {', '         option (google.api.http).get = "/v2/acls/{resource=**}:getAcl";', '       }', '       ...', '     }'], fields: {'name': (comments: [' The fully qualified name of the interface which is included.'], type: (name: 'string'), value: (d: 1)), 'root': (comments: [' If non-empty specifies a path under which inherited HTTP paths', ' are rooted.'], type: (name: 'string'), value: (d: 2))})}, options: {'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/apipb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'ApiProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/compiler/plugin.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', ' Author: kenton@google.com (Kenton Varda)', {}, ' WARNING:  The plugin interface is currently EXPERIMENTAL and is subject to', '   change.', {}, ' protoc (aka the Protocol Compiler) can be extended via plugins.  A plugin is', ' just a program that reads a CodeGeneratorRequest from stdin and writes a', ' CodeGeneratorResponse to stdout.', {}, ' Plugins written using C++ can use google/protobuf/compiler/plugin.h instead', ' of dealing with the raw protocol defined here.', {}, ' A plugin executable needs only to be placed somewhere in the path.  The', ' plugin should be named "protoc-gen-$NAME", and will then be used when the', ' flag "--${NAME}_out" is passed to protoc.'], enums: {}, extends: {}, imports: {'google/protobuf/descriptor.proto': ()}, messages: {'CodeGeneratorRequest': (comments: [" An encoded CodeGeneratorRequest is written to the plugin's stdin."], fields: {'compiler_version': (comments: [' The version number of protocol compiler.'], label: 'optional', type: (name: 'Version'), value: (d: 3)), 'file_to_generate': (comments: [' The .proto files that were explicitly listed on the command-line.  The', " code generator should generate code only for these files.  Each file's", ' descriptor will be included in proto_file, below.'], label: 'repeated', type: (name: 'string'), value: (d: 1)), 'parameter': (comments: [' The generator parameter passed on the command-line.'], label: 'optional', type: (name: 'string'), value: (d: 2)), 'proto_file': (comments: [' FileDescriptorProtos for all files in files_to_generate and everything', ' they import.  The files will appear in topological order, so each file', ' appears before any file that imports it.', {}, ' protoc guarantees that all proto_files will be written after', ' the fields above, even though this is not technically guaranteed by the', ' protobuf wire format.  This theoretically could allow a plugin to stream', ' in the FileDescriptorProtos and handle them one by one rather than read', ' the entire set into memory at once.  However, as of this writing, this', " is not similarly optimized on protoc's end -- it will store all fields in", ' memory at once before sending them to the plugin.', {}, ' Type names of fields and extensions in the FileDescriptorProto are always', ' fully qualified.'], label: 'repeated', type: (name: 'FileDescriptorProto'), value: (d: 15))}), 'CodeGeneratorResponse': (comments: [' The plugin writes an encoded CodeGeneratorResponse to stdout.'], enums: {'Feature': (comments: [' Sync with code_generator.h.'], fields: {'FEATURE_NONE': (value: (o: 0)), 'FEATURE_PROTO3_OPTIONAL': (value: (d: 1))})}, fields: {'error': (comments: [' Error message.  If non-empty, code generation failed.  The plugin process', ' should exit with status code zero even if it reports an error in this way.', {}, ' This should be used to indicate errors in .proto files which prevent the', ' code generator from generating correct code.  Errors which indicate a', ' problem in protoc itself -- such as the input CodeGeneratorRequest being', ' unparseable -- should be reported by writing a message to stderr and', ' exiting with a non-zero status code.'], label: 'optional', type: (name: 'string'), value: (d: 1)), 'file': (label: 'repeated', type: (name: 'File'), value: (d: 15)), 'supported_features': (comments: [' A bitmask of supported features that the code generator supports.', ' This is a bitwise "or" of values from the Feature enum.'], label: 'optional', type: (name: 'uint64'), value: (d: 2))}, messages: {'File': (comments: [' Represents a single generated file.'], fields: {'content': (comments: [' The file contents.'], label: 'optional', type: (name: 'string'), value: (d: 15)), 'generated_code_info': (comments: [' Information describing the file content being inserted. If an insertion', ' point is used, this information will be appropriately offset and inserted', ' into the code generation metadata for the generated files.'], label: 'optional', type: (name: 'GeneratedCodeInfo'), value: (d: 16)), 'insertion_point': (comments: [' If non-empty, indicates that the named file should already exist, and the', ' content here is to be inserted into that file at a defined insertion', ' point.  This feature allows a code generator to extend the output', ' produced by another code generator.  The original generator may provide', ' insertion points by placing special annotations in the file that look', ' like:', '   @@protoc_insertion_point(NAME)', ' The annotation can have arbitrary text before and after it on the line,', ' which allows it to be placed in a comment.  NAME should be replaced with', ' an identifier naming the point -- this is what other generators will use', ' as the insertion_point.  Code inserted at this point will be placed', ' immediately above the line containing the insertion point (thus multiple', ' insertions to the same point will come out in the order they were added).', ' The double-@ is intended to make it unlikely that the generated code', ' could contain things that look like insertion points by accident.', {}, ' For example, the C++ code generator places the following line in the', ' .pb.h files that it generates:', '   // @@protoc_insertion_point(namespace_scope)', " This line appears within the scope of the file's package namespace, but", ' outside of any particular class.  Another plugin can then specify the', ' insertion_point "namespace_scope" to generate additional classes or', ' other declarations that should be placed in this scope.', {}, ' Note that if the line containing the insertion point begins with', ' whitespace, the same whitespace will be added to every line of the', ' inserted text.  This is useful for languages like Python, where', ' indentation matters.  In these languages, the insertion point comment', ' should be indented the same amount as any inserted code will need to be', ' in order to work correctly in that context.', {}, ' The code generator that generates the initial file and the one which', ' inserts into it must both run as part of a single invocation of protoc.', ' Code generators are executed in the order in which they appear on the', ' command line.', {}, ' If |insertion_point| is present, |name| must also be present.'], label: 'optional', type: (name: 'string'), value: (d: 2)), 'name': (comments: [' The file name, relative to the output directory.  The name must not', ' contain "." or ".." components and must be relative, not be absolute (so,', ' the file cannot lie outside the output directory).  "/" must be used as', ' the path separator, not "\\".', {}, ' If the name is omitted, the content will be appended to the previous', ' file.  This allows the generator to break large files into small chunks,', ' and allows the generated text to be streamed back to protoc so that large', ' files need not reside completely in memory at one time.  Note that as of', ' this writing protoc does not optimize for this -- it will read the entire', ' CodeGeneratorResponse before writing files to disk.'], label: 'optional', type: (name: 'string'), value: (d: 1))})}), 'Version': (comments: [' The version number of protocol compiler.'], fields: {'major': (label: 'optional', type: (name: 'int32'), value: (d: 1)), 'minor': (label: 'optional', type: (name: 'int32'), value: (d: 2)), 'patch': (label: 'optional', type: (name: 'int32'), value: (d: 3)), 'suffix': (comments: [' A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should', ' be empty for mainline stable releases.'], label: 'optional', type: (name: 'string'), value: (d: 4))})}, options: {'go_package': (s: 'google.golang.org/protobuf/types/pluginpb'), 'java_outer_classname': (s: 'PluginProtos'), 'java_package': (s: 'com.google.protobuf.compiler')}, package: {'google.protobuf.compiler': ()}, services: {}, syntax: 'proto2'), 'google/protobuf/duration.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'Duration': (comments: [' A Duration represents a signed, fixed-length span of time represented', ' as a count of seconds and fractions of seconds at nanosecond', ' resolution. It is independent of any calendar and concepts like "day"', ' or "month". It is related to Timestamp in that the difference between', ' two Timestamp values is a Duration and it can be added or subtracted', ' from a Timestamp. Range is approximately +-10,000 years.', {}, ' # Examples', {}, ' Example 1: Compute Duration from two Timestamps in pseudo code.', {}, '     Timestamp start = ...;', '     Timestamp end = ...;', '     Duration duration = ...;', {}, '     duration.seconds = end.seconds - start.seconds;', '     duration.nanos = end.nanos - start.nanos;', {}, '     if (duration.seconds < 0 && duration.nanos > 0) {', '       duration.seconds += 1;', '       duration.nanos -= 1000000000;', '     } else if (duration.seconds > 0 && duration.nanos < 0) {', '       duration.seconds -= 1;', '       duration.nanos += 1000000000;', '     }', {}, ' Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.', {}, '     Timestamp start = ...;', '     Duration duration = ...;', '     Timestamp end = ...;', {}, '     end.seconds = start.seconds + duration.seconds;', '     end.nanos = start.nanos + duration.nanos;', {}, '     if (end.nanos < 0) {', '       end.seconds -= 1;', '       end.nanos += 1000000000;', '     } else if (end.nanos >= 1000000000) {', '       end.seconds += 1;', '       end.nanos -= 1000000000;', '     }', {}, ' Example 3: Compute Duration from datetime.timedelta in Python.', {}, '     td = datetime.timedelta(days=3, minutes=10)', '     duration = Duration()', '     duration.FromTimedelta(td)', {}, ' # JSON Mapping', {}, ' In JSON format, the Duration type is encoded as a string rather than an', ' object, where the string ends in the suffix "s" (indicating seconds) and', ' is preceded by the number of seconds, with nanoseconds expressed as', ' fractional seconds. For example, 3 seconds with 0 nanoseconds should be', ' encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should', ' be expressed in JSON format as "3.000000001s", and 3 seconds and 1', ' microsecond should be expressed in JSON format as "3.000001s".', {}, {}], fields: {'nanos': (comments: [' Signed fractions of a second at nanosecond resolution of the span', ' of time. Durations less than one second are represented with a 0', ' `seconds` field and a positive or negative `nanos` field. For durations', ' of one second or more, a non-zero value for the `nanos` field must be', ' of the same sign as the `seconds` field. Must be from -999,999,999', ' to +999,999,999 inclusive.'], type: (name: 'int32'), value: (d: 2)), 'seconds': (comments: [' Signed seconds of the span of time. Must be from -315,576,000,000', ' to +315,576,000,000 inclusive. Note: these bounds are computed from:', ' 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'], type: (name: 'int64'), value: (d: 1))})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/durationpb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'DurationProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/empty.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'Empty': (comments: [' A generic empty message that you can re-use to avoid defining duplicated', ' empty messages in your APIs. A typical example is to use it as the request', ' or the response type of an API method. For instance:', {}, '     service Foo {', '       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);', '     }', {}, ' The JSON representation for `Empty` is empty JSON object `{}`.'])}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/emptypb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'EmptyProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/field_mask.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'FieldMask': (comments: [' `FieldMask` represents a set of symbolic field paths, for example:', {}, '     paths: "f.a"', '     paths: "f.b.d"', {}, ' Here `f` represents a field in some root message, `a` and `b`', ' fields in the message found in `f`, and `d` a field found in the', ' message in `f.b`.', {}, ' Field masks are used to specify a subset of fields that should be', ' returned by a get operation or modified by an update operation.', ' Field masks also have a custom JSON encoding (see below).', {}, ' # Field Masks in Projections', {}, ' When used in the context of a projection, a response message or', ' sub-message is filtered by the API to only contain those fields as', ' specified in the mask. For example, if the mask in the previous', ' example is applied to a response message as follows:', {}, '     f {', '       a : 22', '       b {', '         d : 1', '         x : 2', '       }', '       y : 13', '     }', '     z: 8', {}, ' The result will not contain specific values for fields x,y and z', ' (their value will be set to the default, and omitted in proto text', ' output):', {}, {}, '     f {', '       a : 22', '       b {', '         d : 1', '       }', '     }', {}, ' A repeated field is not allowed except at the last position of a', ' paths string.', {}, ' If a FieldMask object is not present in a get operation, the', ' operation applies to all fields (as if a FieldMask of all fields', ' had been specified).', {}, ' Note that a field mask does not necessarily apply to the', ' top-level response message. In case of a REST get operation, the', ' field mask applies directly to the response, but in case of a REST', ' list operation, the mask instead applies to each individual message', ' in the returned resource list. In case of a REST custom method,', ' other definitions may be used. Where the mask applies will be', ' clearly documented together with its declaration in the API.  In', ' any case, the effect on the returned resource/resources is required', ' behavior for APIs.', {}, ' # Field Masks in Update Operations', {}, ' A field mask in update operations specifies which fields of the', ' targeted resource are going to be updated. The API is required', ' to only change the values of the fields as specified in the mask', ' and leave the others untouched. If a resource is passed in to', ' describe the updated values, the API ignores the values of all', ' fields not covered by the mask.', {}, ' If a repeated field is specified for an update operation, new values will', ' be appended to the existing repeated field in the target resource. Note that', ' a repeated field is only allowed in the last position of a `paths` string.', {}, ' If a sub-message is specified in the last position of the field mask for an', ' update operation, then new value will be merged into the existing sub-message', ' in the target resource.', {}, ' For example, given the target message:', {}, '     f {', '       b {', '         d: 1', '         x: 2', '       }', '       c: [1]', '     }', {}, ' And an update message:', {}, '     f {', '       b {', '         d: 10', '       }', '       c: [2]', '     }', {}, ' then if the field mask is:', {}, '  paths: ["f.b", "f.c"]', {}, ' then the result will be:', {}, '     f {', '       b {', '         d: 10', '         x: 2', '       }', '       c: [1, 2]', '     }', {}, ' An implementation may provide options to override this default behavior for', ' repeated and message fields.', {}, " In order to reset a field's value to the default, the field must", ' be in the mask and set to the default value in the provided resource.', ' Hence, in order to reset all fields of a resource, provide a default', ' instance of the resource and set all fields in the mask, or do', ' not provide a mask as described below.', {}, ' If a field mask is not present on update, the operation applies to', ' all fields (as if a field mask of all fields has been specified).', ' Note that in the presence of schema evolution, this may mean that', ' fields the client does not know and has therefore not filled into', ' the request will be reset to their default. If this is unwanted', ' behavior, a specific service may require a client to always specify', ' a field mask, producing an error if not.', {}, ' As with get operations, the location of the resource which', ' describes the updated values in the request message depends on the', ' operation kind. In any case, the effect of the field mask is', ' required to be honored by the API.', {}, ' ## Considerations for HTTP REST', {}, ' The HTTP kind of an update operation which uses a field mask must', ' be set to PATCH instead of PUT in order to satisfy HTTP semantics', ' (PUT must only be used for full updates).', {}, ' # JSON Encoding of Field Masks', {}, ' In JSON, a field mask is encoded as a single string where paths are', ' separated by a comma. Fields name in each path are converted', ' to/from lower-camel naming conventions.', {}, ' As an example, consider the following message declarations:', {}, '     message Profile {', '       User user = 1;', '       Photo photo = 2;', '     }', '     message User {', '       string display_name = 1;', '       string address = 2;', '     }', {}, ' In proto a field mask for `Profile` may look as such:', {}, '     mask {', '       paths: "user.display_name"', '       paths: "photo"', '     }', {}, ' In JSON, the same mask is represented as below:', {}, '     {', '       mask: "user.displayName,photo"', '     }', {}, ' # Field Masks and Oneof Fields', {}, ' Field masks treat fields in oneofs just as regular fields. Consider the', ' following message:', {}, '     message SampleMessage {', '       oneof test_oneof {', '         string name = 4;', '         SubMessage sub_message = 9;', '       }', '     }', {}, ' The field mask can be:', {}, '     mask {', '       paths: "name"', '     }', {}, ' Or:', {}, '     mask {', '       paths: "sub_message"', '     }', {}, ' Note that oneof type names ("test_oneof" in this case) cannot be used in', ' paths.', {}, ' ## Field Mask Verification', {}, ' The implementation of any API method which has a FieldMask type field in the', ' request should verify the included field paths, and return an', ' `INVALID_ARGUMENT` error if any path is unmappable.'], fields: {'paths': (comments: [' The set of field mask paths.'], label: 'repeated', type: (name: 'string'), value: (d: 1))})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/fieldmaskpb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'FieldMaskProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/source_context.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'SourceContext': (comments: [' `SourceContext` represents information about the source of a', ' protobuf element, like the file in which it is defined.'], fields: {'file_name': (comments: [' The path-qualified name of the .proto file that contained the associated', ' protobuf element.  For example: `"google/protobuf/source_context.proto"`.'], type: (name: 'string'), value: (d: 1))})}, options: {'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/sourcecontextpb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'SourceContextProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/struct.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {'NullValue': (comments: [' `NullValue` is a singleton enumeration to represent the null value for the', ' `Value` type union.', {}, '  The JSON representation for `NullValue` is JSON `null`.'], fields: {'NULL_VALUE': (comments: [' Null value.'], value: (o: 0))})}, extends: {}, imports: {}, messages: {'ListValue': (comments: [' `ListValue` is a wrapper around a repeated field of values.', {}, ' The JSON representation for `ListValue` is JSON array.'], fields: {'values': (comments: [' Repeated field of dynamically typed values.'], label: 'repeated', type: (name: 'Value'), value: (d: 1))}), 'Struct': (comments: [' `Struct` represents a structured data value, consisting of fields', ' which map to dynamically typed values. In some languages, `Struct`', ' might be supported by a native representation. For example, in', ' scripting languages like JS a struct is represented as an', ' object. The details of that representation are described together', ' with the proto support for the language.', {}, ' The JSON representation for `Struct` is JSON object.'], mapFields: {'fields': (comments: [' Unordered map of dynamically typed values.'], keyType: (name: 'string'), type: (name: 'Value'), value: (d: 1))}), 'Value': (comments: [' `Value` represents a dynamically typed value which can be either', ' null, a number, a string, a boolean, a recursive struct value, or a', ' list of values. A producer of value is expected to set one of that', ' variants, absence of any variant indicates an error.', {}, ' The JSON representation for `Value` is JSON value.'], oneofs: {'kind': (comments: [' The kind of value.'], fields: {'bool_value': (comments: [' Represents a boolean value.'], type: (name: 'bool'), value: (d: 4)), 'list_value': (comments: [' Represents a repeated `Value`.'], type: (name: 'ListValue'), value: (d: 6)), 'null_value': (comments: [' Represents a null value.'], type: (name: 'NullValue'), value: (d: 1)), 'number_value': (comments: [' Represents a double value.'], type: (name: 'double'), value: (d: 2)), 'string_value': (comments: [' Represents a string value.'], type: (name: 'string'), value: (d: 3)), 'struct_value': (comments: [' Represents a structured value.'], type: (name: 'Struct'), value: (d: 5))})})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/structpb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'StructProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/timestamp.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {}, extends: {}, imports: {}, messages: {'Timestamp': (comments: [' A Timestamp represents a point in time independent of any time zone or local', ' calendar, encoded as a count of seconds and fractions of seconds at', ' nanosecond resolution. The count is relative to an epoch at UTC midnight on', ' January 1, 1970, in the proleptic Gregorian calendar which extends the', ' Gregorian calendar backwards to year one.', {}, ' All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap', ' second table is needed for interpretation, using a [24-hour linear', ' smear](https://developers.google.com/time/smear).', {}, ' The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By', ' restricting to that range, we ensure that we can convert to and from [RFC', ' 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.', {}, ' # Examples', {}, ' Example 1: Compute Timestamp from POSIX `time()`.', {}, '     Timestamp timestamp;', '     timestamp.set_seconds(time(NULL));', '     timestamp.set_nanos(0);', {}, ' Example 2: Compute Timestamp from POSIX `gettimeofday()`.', {}, '     struct timeval tv;', '     gettimeofday(&tv, NULL);', {}, '     Timestamp timestamp;', '     timestamp.set_seconds(tv.tv_sec);', '     timestamp.set_nanos(tv.tv_usec * 1000);', {}, ' Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.', {}, '     FILETIME ft;', '     GetSystemTimeAsFileTime(&ft);', '     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;', {}, '     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z', '     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.', '     Timestamp timestamp;', '     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));', '     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));', {}, ' Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.', {}, '     long millis = System.currentTimeMillis();', {}, '     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)', '         .setNanos((int) ((millis % 1000) * 1000000)).build();', {}, {}, ' Example 5: Compute Timestamp from Java `Instant.now()`.', {}, '     Instant now = Instant.now();', {}, '     Timestamp timestamp =', '         Timestamp.newBuilder().setSeconds(now.getEpochSecond())', '             .setNanos(now.getNano()).build();', {}, {}, ' Example 6: Compute Timestamp from current time in Python.', {}, '     timestamp = Timestamp()', '     timestamp.GetCurrentTime()', {}, ' # JSON Mapping', {}, ' In JSON format, the Timestamp type is encoded as a string in the', ' [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the', ' format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"', ' where {year} is always expressed using four digits while {month}, {day},', ' {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional', ' seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),', ' are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone', ' is required. A proto3 JSON serializer should always use UTC (as indicated by', ' "Z") when printing the Timestamp type and a proto3 JSON parser should be', ' able to accept both UTC and other timezones (as indicated by an offset).', {}, ' For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past', ' 01:30 UTC on January 15, 2017.', {}, ' In JavaScript, one can convert a Date object to this format using the', ' standard', ' [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)', ' method. In Python, a standard `datetime.datetime` object can be converted', ' to this format using', ' [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with', " the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use", " the Joda Time's [`ISODateTimeFormat.dateTime()`](", ' http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D', ' ) to obtain a formatter capable of generating timestamps in this format.', {}, {}], fields: {'nanos': (comments: [' Non-negative fractions of a second at nanosecond resolution. Negative', ' second values with fractions must still have non-negative nanos values', ' that count forward in time. Must be from 0 to 999,999,999', ' inclusive.'], type: (name: 'int32'), value: (d: 2)), 'seconds': (comments: [' Represents seconds of UTC time since Unix epoch', ' 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to', ' 9999-12-31T23:59:59Z inclusive.'], type: (name: 'int64'), value: (d: 1))})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/timestamppb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'TimestampProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/type.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'], enums: {'Syntax': (comments: [' The syntax in which a protocol buffer element is defined.'], fields: {'SYNTAX_PROTO2': (comments: [' Syntax `proto2`.'], value: (o: 0)), 'SYNTAX_PROTO3': (comments: [' Syntax `proto3`.'], value: (d: 1))})}, extends: {}, imports: {'google/protobuf/any.proto': (), 'google/protobuf/source_context.proto': ()}, messages: {'Enum': (comments: [' Enum type definition.'], fields: {'enumvalue': (comments: [' Enum value definitions.'], label: 'repeated', type: (name: 'EnumValue'), value: (d: 2)), 'name': (comments: [' Enum type name.'], type: (name: 'string'), value: (d: 1)), 'options': (comments: [' Protocol buffer options.'], label: 'repeated', type: (name: 'Option'), value: (d: 3)), 'source_context': (comments: [' The source context.'], type: (name: 'SourceContext'), value: (d: 4)), 'syntax': (comments: [' The source syntax.'], type: (name: 'Syntax'), value: (d: 5))}), 'EnumValue': (comments: [' Enum value definition.'], fields: {'name': (comments: [' Enum value name.'], type: (name: 'string'), value: (d: 1)), 'number': (comments: [' Enum value number.'], type: (name: 'int32'), value: (d: 2)), 'options': (comments: [' Protocol buffer options.'], label: 'repeated', type: (name: 'Option'), value: (d: 3))}), 'Field': (comments: [' A single field of a message type.'], enums: {'Cardinality': (comments: [' Whether a field is optional, required, or repeated.'], fields: {'CARDINALITY_OPTIONAL': (comments: [' For optional fields.'], value: (d: 1)), 'CARDINALITY_REPEATED': (comments: [' For repeated fields.'], value: (d: 3)), 'CARDINALITY_REQUIRED': (comments: [' For required fields. Proto2 syntax only.'], value: (d: 2)), 'CARDINALITY_UNKNOWN': (comments: [' For fields with unknown cardinality.'], value: (o: 0))}), 'Kind': (comments: [' Basic field types.'], fields: {'TYPE_BOOL': (comments: [' Field type bool.'], value: (d: 8)), 'TYPE_BYTES': (comments: [' Field type bytes.'], value: (d: 12)), 'TYPE_DOUBLE': (comments: [' Field type double.'], value: (d: 1)), 'TYPE_ENUM': (comments: [' Field type enum.'], value: (d: 14)), 'TYPE_FIXED32': (comments: [' Field type fixed32.'], value: (d: 7)), 'TYPE_FIXED64': (comments: [' Field type fixed64.'], value: (d: 6)), 'TYPE_FLOAT': (comments: [' Field type float.'], value: (d: 2)), 'TYPE_GROUP': (comments: [' Field type group. Proto2 syntax only, and deprecated.'], value: (d: 10)), 'TYPE_INT32': (comments: [' Field type int32.'], value: (d: 5)), 'TYPE_INT64': (comments: [' Field type int64.'], value: (d: 3)), 'TYPE_MESSAGE': (comments: [' Field type message.'], value: (d: 11)), 'TYPE_SFIXED32': (comments: [' Field type sfixed32.'], value: (d: 15)), 'TYPE_SFIXED64': (comments: [' Field type sfixed64.'], value: (d: 16)), 'TYPE_SINT32': (comments: [' Field type sint32.'], value: (d: 17)), 'TYPE_SINT64': (comments: [' Field type sint64.'], value: (d: 18)), 'TYPE_STRING': (comments: [' Field type string.'], value: (d: 9)), 'TYPE_UINT32': (comments: [' Field type uint32.'], value: (d: 13)), 'TYPE_UINT64': (comments: [' Field type uint64.'], value: (d: 4)), 'TYPE_UNKNOWN': (comments: [' Field type unknown.'], value: (o: 0))})}, fields: {'cardinality': (comments: [' The field cardinality.'], type: (name: 'Cardinality'), value: (d: 2)), 'default_value': (comments: [' The string value of the default value of this field. Proto2 syntax only.'], type: (name: 'string'), value: (d: 11)), 'json_name': (comments: [' The field JSON name.'], type: (name: 'string'), value: (d: 10)), 'kind': (comments: [' The field type.'], type: (name: 'Kind'), value: (d: 1)), 'name': (comments: [' The field name.'], type: (name: 'string'), value: (d: 4)), 'number': (comments: [' The field number.'], type: (name: 'int32'), value: (d: 3)), 'oneof_index': (comments: [' The index of the field type in `Type.oneofs`, for message or enumeration', ' types. The first type has index 1; zero means the type is not in the list.'], type: (name: 'int32'), value: (d: 7)), 'options': (comments: [' The protocol buffer options.'], label: 'repeated', type: (name: 'Option'), value: (d: 9)), 'packed': (comments: [' Whether to use alternative packed wire representation.'], type: (name: 'bool'), value: (d: 8)), 'type_url': (comments: [' The field type URL, without the scheme, for message or enumeration', ' types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.'], type: (name: 'string'), value: (d: 6))}), 'Option': (comments: [' A protocol buffer option, which can be attached to a message, field,', ' enumeration, etc.'], fields: {'name': (comments: [" The option's name. For protobuf built-in options (options defined in", ' descriptor.proto), this is the short name. For example, `"map_entry"`.', ' For custom options, it should be the fully-qualified name. For example,', ' `"google.api.http"`.'], type: (name: 'string'), value: (d: 1)), 'value': (comments: [" The option's value packed in an Any message. If the value is a primitive,", ' the corresponding wrapper type defined in google/protobuf/wrappers.proto', ' should be used. If the value is an enum, it should be stored as an int32', ' value using the google.protobuf.Int32Value type.'], type: (name: 'Any'), value: (d: 2))}), 'Type': (comments: [' A protocol buffer message type.'], fields: {'fields': (comments: [' The list of fields.'], label: 'repeated', type: (name: 'Field'), value: (d: 2)), 'name': (comments: [' The fully qualified message name.'], type: (name: 'string'), value: (d: 1)), 'oneofs': (comments: [' The list of types appearing in `oneof` definitions in this type.'], label: 'repeated', type: (name: 'string'), value: (d: 3)), 'options': (comments: [' The protocol buffer options.'], label: 'repeated', type: (name: 'Option'), value: (d: 4)), 'source_context': (comments: [' The source context.'], type: (name: 'SourceContext'), value: (d: 5)), 'syntax': (comments: [' The source syntax.'], type: (name: 'Syntax'), value: (d: 6))})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/typepb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'TypeProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3'), 'google/protobuf/wrappers.proto': (comments: [" Protocol Buffers - Google's data interchange format", ' Copyright 2008 Google Inc.  All rights reserved.', ' https://developers.google.com/protocol-buffers/', {}, ' Redistribution and use in source and binary forms, with or without', ' modification, are permitted provided that the following conditions are', ' met:', {}, '     * Redistributions of source code must retain the above copyright', ' notice, this list of conditions and the following disclaimer.', '     * Redistributions in binary form must reproduce the above', ' copyright notice, this list of conditions and the following disclaimer', ' in the documentation and/or other materials provided with the', ' distribution.', '     * Neither the name of Google Inc. nor the names of its', ' contributors may be used to endorse or promote products derived from', ' this software without specific prior written permission.', {}, ' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS', ' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT', ' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR', ' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT', ' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,', ' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT', ' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,', ' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY', ' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', ' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', ' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', ' Wrappers for primitive (non-message) types. These types are useful', ' for embedding primitives in the `google.protobuf.Any` type and for places', ' where we need to distinguish between the absence of a primitive', ' typed field and its default value.', {}, ' These wrappers have no meaningful use within repeated fields as they lack', ' the ability to detect presence on individual elements.', ' These wrappers have no meaningful use within a map or a oneof since', ' individual entries of a map or fields of a oneof can already detect presence.'], enums: {}, extends: {}, imports: {}, messages: {'BoolValue': (comments: [' Wrapper message for `bool`.', {}, ' The JSON representation for `BoolValue` is JSON `true` and `false`.'], fields: {'value': (comments: [' The bool value.'], type: (name: 'bool'), value: (d: 1))}), 'BytesValue': (comments: [' Wrapper message for `bytes`.', {}, ' The JSON representation for `BytesValue` is JSON string.'], fields: {'value': (comments: [' The bytes value.'], type: (name: 'bytes'), value: (d: 1))}), 'DoubleValue': (comments: [' Wrapper message for `double`.', {}, ' The JSON representation for `DoubleValue` is JSON number.'], fields: {'value': (comments: [' The double value.'], type: (name: 'double'), value: (d: 1))}), 'FloatValue': (comments: [' Wrapper message for `float`.', {}, ' The JSON representation for `FloatValue` is JSON number.'], fields: {'value': (comments: [' The float value.'], type: (name: 'float'), value: (d: 1))}), 'Int32Value': (comments: [' Wrapper message for `int32`.', {}, ' The JSON representation for `Int32Value` is JSON number.'], fields: {'value': (comments: [' The int32 value.'], type: (name: 'int32'), value: (d: 1))}), 'Int64Value': (comments: [' Wrapper message for `int64`.', {}, ' The JSON representation for `Int64Value` is JSON string.'], fields: {'value': (comments: [' The int64 value.'], type: (name: 'int64'), value: (d: 1))}), 'StringValue': (comments: [' Wrapper message for `string`.', {}, ' The JSON representation for `StringValue` is JSON string.'], fields: {'value': (comments: [' The string value.'], type: (name: 'string'), value: (d: 1))}), 'UInt32Value': (comments: [' Wrapper message for `uint32`.', {}, ' The JSON representation for `UInt32Value` is JSON number.'], fields: {'value': (comments: [' The uint32 value.'], type: (name: 'uint32'), value: (d: 1))}), 'UInt64Value': (comments: [' Wrapper message for `uint64`.', {}, ' The JSON representation for `UInt64Value` is JSON string.'], fields: {'value': (comments: [' The uint64 value.'], type: (name: 'uint64'), value: (d: 1))})}, options: {'cc_enable_arenas': (b: true), 'csharp_namespace': (s: 'Google.Protobuf.WellKnownTypes'), 'go_package': (s: 'google.golang.org/protobuf/types/known/wrapperspb'), 'java_multiple_files': (b: true), 'java_outer_classname': (s: 'WrappersProto'), 'java_package': (s: 'com.google.protobuf'), 'objc_class_prefix': (s: 'GPB')}, package: {'google.protobuf': ()}, services: {}, syntax: 'proto3')}
