# Utilities

let (:isValidIdentifier, :resolveValidIdentifier, ...) = //{/pkg/arrai/util};

# Transforms Avro primitive types to Sysl ones.
let transformPrimitiveType = \type
    cond type {
        'null': 'null',
        'boolean': 'bool',
        'int': 'int32',
        'long': 'int64',
        'float': 'float32',
        'double': 'float64',
        'bytes': 'bytes',
        'string': 'string',
        _: 'NonPrimitiveType'
    }
;

let transformLogicalTypes = \type
    cond type('logicalType').s {
        'decimal': $`decimal(${type('precision')}.${type('scale')})`,
        'uuid': 'string',
        'date': 'date',
        'time-millis': 'int32',
        'time-micros': 'int64',
        'timestamp-millis': 'datetime',
        'timestamp-micros': 'datetime',
        'local-timestamp-millis': 'datetime',
        'local-timestamp-micros': 'datetime',
        'duration': 'bytes',
        _: 'NonLogicalType'
    }
;

let isFirstLetterUppercase = \str
    let fLetter = str where .@ = 0;
    //str.upper(fLetter) = fLetter
;

# annotation returns the annotation of the given name as retrieved from the item.
# This method returns a (name, value) tuple in instances where the annotation
# can be retrieved from the item, or an empty tuple () in instances where is cannot.
let annotation = \item \name
    let annotation = cond item {
        (:s): s,
        _:
            let key = cond name {
                'description': 'doc',
                n: n,
            };
            item(key)?.s:'',
    };
    cond annotation {
        '': (),
        _: (name: name, value: annotation),
    }
;

# nameAnnotation returns the 'name' annotation as required for the given item.
# This method returns a (name, value) tuple in instances where the item requires
# that a 'name' annotation is appended, or an empty tuple () in instances it is not.
#
# The result of this function may differ depending on whether or not the annotation
# is being applied to a type or a field:
# !type Type1         # type
#   attr1 <: string   # field
let nameAnnotation = \item \isType
    let annotation = cond item {
        (:s): s,
        _: item('name')?.s:'',
    };
    cond annotation {
        '': (),
        _: cond {
            isType && (!isValidIdentifier(annotation) || !isFirstLetterUppercase(annotation)): (name: 'name', value: annotation),
            !isType && !isValidIdentifier(annotation): (name: 'name', value: annotation),
            _: (),
        },
    }
;

# Returns a string representation of an annotation array of the form:
# [union=['string', 'null'], description="Relationship end date", default="null"].
let prettyAnnotations = \annotations
    let str = $`${annotations >> . && cond . {
        (name: 'union', :value): $'union=${value}',
        (:name, :value): $'${name}="${value}"',
        (:name): $'${name}',
        _: {},
    } where .@item rank (:.@)::, }`;
    str && $`[${str}]`
;

# Returns an appropriate Sysl type name for the given string.
let syslTypeName = \name
    let type = transformPrimitiveType(name);
    cond type {
        'NonPrimitiveType': # Doesn't capitalize first letter if it is primitive type.
            cond {
                //seq.has_prefix('set of', name) || //seq.has_prefix('sequence of', name): name,
                _: //str.title(name),
            },
        _: type
    }
;

# Sysl identifier check + func syslTypeName.
# It can't be merged to func syslTypeName as case of union.
# For example: !union IntString is valid identifier, and doesn't need to transfer to !union _int_string.
let syslTypeNameWithIdentifierCheck = \name
    cond {
        !isValidIdentifier(name): resolveValidIdentifier(name),
        _: syslTypeName(name),
    }
;

# Get type name from types which looks like: ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
# And outputs a tuple: (s: sysl type name, collectionType: sysl type name with collection format if it is collection).
# param t is type.
let syslTypeNameTuple = \t
    cond t {
        (:s):
            (s: syslTypeName(s), collectionType: syslTypeName(s)),
        {'type': _, 'items': items, ...}:
            cond items {
                (:s):
                    let name = syslTypeName(s);
                    (s: $`${name}Sequence`, collectionType: $`sequence of ${name}`),
                {'type': _, 'name': (s: initName), ...}:
                    let name = syslTypeName(initName);
                    (s: $`${name}Sequence`, collectionType: $`sequence of ${name}`),
                {'type': (s: initName), ...}:
                    let name = syslTypeName(initName);
                    (s: $`${name}Sequence`, collectionType: $`sequence of ${name}`),
            },
        {'type': _, 'values': values, ...}:
            cond values {
                (:s):
                    let name = syslTypeName(s);
                    (s: $`String${//str.title(name)}Item`, collectionType: $`set of String${//str.title(name)}Item`),
                {'type': _, 'name': (s: initName), ...}:
                    let name = syslTypeName(initName);
                    (s: $`String${name}Item`, collectionType: $`set of String${name}Item`),
            },
        # This pattern matching must be last.
        {'type': _, 'name': (:s), ...}:
            (s: syslTypeName(s), collectionType: syslTypeName(s)),
        # Type without a name
        {'type': (:s), ...}:
            (:s, collectionType: s)
    }
;

# Produces combined types, for example "type": ["int", "string", "null"],
# it will be processed to final type `Int32String?`.
let syslCombinedTypesName = \types \handler
    let fullTypeNames = types >> syslTypeNameTuple(.);
    let types = fullTypeNames >> .s;
    cond {
        //seq.contains(['null'], types):
            let typeNames = fullTypeNames where .@item.s != 'null' rank (:.@);
            cond types count {
                2: $`${typeNames >> handler(.)::}?`, # ['string', 'null'] -> string?
                _: $`${typeNames => //str.title(.@item.s) orderby .::}?` # ['string', 'null', 'int'] -> IntString?
            }
        ,
        _:
            cond types count {
                1: $`${//str.title(//seq.concat(types))}Item`, # ['string'] -> StringItem
                _: //seq.concat(types => //str.title(.@item) orderby .), # ['string', 'int'] -> IntString
            }
    }
;

let transformType = \type
    cond type {
        # (s: 'string') etc.
        (s: typeName):
            cond syslTypeName(typeName) {
                'null': 'string[~null]',
                name: name,
            },
        (a: typeArray):
            # Type can be ['null', 'string'], ['string', 'int'] or ['null', {'type':'record', ...}] etc.
            # [(s: 'null'), (s: 'string')] to ['null', 'string'].
            syslCombinedTypesName(typeArray, \type cond type {(collectionType: ct, ...): ct, _: type.s}),
        # Must be before {'type': typeName, ...}.
        {'type': typeName, 'logicalType': logicalTypeName, ...}:
            transformLogicalTypes(type),
        {'type': typeName, ...}:
            # It is array, map.
            cond typeName.s {
                'array':
                    let type = cond type('items') {
                        {'name': (:s), ...}: syslTypeNameWithIdentifierCheck(s),
                        (:s): syslTypeName(s),
                    };
                    $`sequence of ${type}`,
                'map':
                    let type = cond type('values') {
                        {'name': (:s), ...}: $`String${syslTypeName(s)}Item`,
                        (:s): $`String${//str.title(s)}Item`, # Primitive.
                    };
                    $`set of ${type}`,

                _: cond type('name')?.s?:'' {
                    '': transformPrimitiveType(typeName.s),
                    name: syslTypeNameWithIdentifierCheck(name)
                }
            },
    }
;

let defaultVal = \item
    let default = item('default')?:'';
    cond default {
        '': cond item {
                {'type': {'type': (s: 'map'), ...}, ...}: (name: 'default', value: "{}"), # Map's default value is {}.
            },
        (): (name: 'default', value: "null"),
        (b: true): (name: 'default', value: true),
        (b: false): (name: 'default', value: false),
        (a: {}): (name: 'default', value: "[]"),
        (a: [(:s), ...]): (name: 'default', value: default.a >> .s),
        {...}: (name: 'default', value: default >> .s),
        (:s): (name: 'default', value: s),
        _: (name: 'default', value: default),
    }
;

(
    :prettyAnnotations,
    :transformType,
    :annotation,
    :nameAnnotation,
    :syslTypeNameTuple,
    :syslCombinedTypesName,
    :syslTypeName,
    :syslTypeNameWithIdentifierCheck,
    :defaultVal,
    :isValidIdentifier,
    :resolveValidIdentifier,
)
