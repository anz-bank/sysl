let util = //{./avro_util};

let transformer = \aliasItem
    cond aliasItem {
        {'type': (s: 'fixed'), 'name': (s: name), "logicalType": (s: "duration"), ...}:
            '', # Ignore logicalType duration.
        {'type': (s: 'fixed'), 'name': (s: name), ...}: $`
            !alias ${util.syslTypeNameWithIdentifierCheck(name)}${
                let annotations = util.prettyAnnotations([
                    (name: '~fixed'), (name: 'fixed_size', value: aliasItem('size')),
                    util.annotation(aliasItem, 'namespace'), util.nameAnnotation(aliasItem, true)]);
                cond {annotations: ' ' ++ $`${annotations}`}
            }:
                bytes
            ${
                let aliases = aliasItem('aliases')? .a:[];
                cond {
                    aliases count > 0: '\n' ++ $`
                        ${aliases >> \alias $`
                            !alias ${util.syslTypeNameWithIdentifierCheck(alias.s)}${
                                let annotations = util.prettyAnnotations([util.nameAnnotation(alias, true)]);
                                cond {annotations: ' ' ++ $`${annotations}`}
                            }:
                                ${util.syslTypeNameWithIdentifierCheck(name)}
                        `::\n\n}
                    `,
                }
            }
        `,
        # Double check.
        {'type': (s: 'array'), 'items': (s: itemsType), ...}: $`
            !alias ${util.syslTypeName(itemsType)}Sequence${
                util.prettyAnnotations([util.defaultVal(.)])
            }:
                sequence of ${itemsType}
        `,
    }
;

transformer
