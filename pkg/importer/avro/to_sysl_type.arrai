# Transform Avro record to Sysl record.
let util = //{./avro_util};

# Build type annotation like [union=["int32", "null", "string"]].
let buildTypeAnnotation = \type
    cond type {
        (a: typeArray):
            let types = (typeArray >> util.syslTypeNameTuple(.)) >> .collectionType;
            cond types {
                ['null', ...]:
                    # Types like ['null', 'string', 'int'].
                    cond {types count > 2: (name: 'union', value: types),},
                _: (name: 'union', value: types), # Types like ['string', 'int32', 'null'] or ['string', 'null'].
            },
    }
;

let buildLogicalTypeAnnotation = \type
    let t = type('type');
    cond t {
        {'type': typeName, 'logicalType': logicalTypeName, ...}:
            cond logicalTypeName.s {
                'uuid': [(name: '~uuid')],
                'date': [],
                'time-millis': [(name: '~time-millis')],
                'time-micros': [(name: '~time-micros')],
                'timestamp-millis': [(name: '~timestamp-millis')],
                'timestamp-micros': [(name: '~timestamp-micros')],
                'local-timestamp-millis': [(name: '~local-timestamp-millis')],
                'local-timestamp-micros': [(name: '~local-timestamp-micros')],
                'duration': [(name: '~fixed'), (name: 'fixed_size', value: t('size')), (name: '~duration'), (name: 'name', value: t('name').s)],
            },
    }
;

let buildAttrAnnotations = \type
    buildLogicalTypeAnnotation(type)
    ++ [buildTypeAnnotation(type('type')), util.defaultVal(type)]
    ++ (['description', 'order'] >> util.annotation(type, .))
    ++ [util.nameAnnotation(type, false)]
;

let printMapType = \record
    cond record {
        # Sample {'isMap': (s: 'true'), 'values': (s: 'string'), 'type': (s: 'map')}.
        {'values': (:s), ...}: $`
            !type String${//str.title(s)}Item ${util.prettyAnnotations([(name: 'json_map_key', value: 'key'), util.defaultVal(record)])}:
                key <: string
                value <: ${util.syslTypeName(s)}
        `,
        {'type': (s: 'record'), ...}: $`
            !type String${util.transformType(record)}Item ${util.prettyAnnotations([(name: 'json_map_key', value: 'key'), util.defaultVal(record)])}:
                key <: string
                value <: ${util.transformType(record)}
        `
    }
;

let transformer = \record
    # Display map item.
    $`
        ${(record('isMap')?:()).s?:{} = 'true' && (printMapType(record) ++ '\n')}
        ${
            cond record {
                {'type': (s: 'record'), ...}:
                    $`
                        !type ${util.syslTypeNameWithIdentifierCheck(record('name').s)}${
                            let annotations = util.prettyAnnotations([util.nameAnnotation(record, true)] ++ (['namespace', 'description'] >> util.annotation(record, .)));
                            cond {annotations: ' ' ++ $`${annotations}`}
                        }:
                            ${ # List fields.
                                let fields = record('fields')?.a:[];
                                fields >> \field $`
                                    ${util.resolveValidIdentifier(field('name').s)} <: ${util.transformType(field('type'))} ${
                                        util.prettyAnnotations(buildAttrAnnotations(field))
                                    }${
                                        let aliases = field('aliases')?.a:[];
                                        cond {
                                            aliases: '\n' ++ $`
                                                ${aliases >> \alias $`
                                                    ${util.resolveValidIdentifier(alias.s)} <: ${util.transformType(field('type'))} ${
                                                        let aliasAnnotaions =
                                                            util.prettyAnnotations(buildAttrAnnotations(field)
                                                                ++ [(name: 'alias_of', value: field('name').s),
                                                                    cond {
                                                                        !util.isValidIdentifier(alias.s):
                                                                            (name: 'name', value: alias.s),
                                                                    }
                                                                ]);
                                                        aliasAnnotaions
                                                    }
                                                `::\n}
                                            `,
                                        }
                                    }
                                `::\n}
                        ${ # List records's aliases.
                            let aliases = record('aliases')?.a:[];
                            cond {
                                aliases: '\n' ++ $`
                                    ${aliases >> \alias $`
                                        !alias ${util.syslTypeNameWithIdentifierCheck(alias.s)}${
                                            let annotations = util.prettyAnnotations([util.nameAnnotation(alias, true)]);
                                            cond {annotations: ' ' ++ $`${annotations}`}
                                        }:
                                            ${util.syslTypeNameWithIdentifierCheck(record('name').s)}
                                    `::\n\n}
                                ` ++ '\n',
                            }
                        }
                    `
            }
        }`
;

transformer
