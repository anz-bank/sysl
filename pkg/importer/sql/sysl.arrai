# Transforms that generate sysl from an arr.ai-based SQL model.

# import sysl lib.
let util = //{/pkg/arrai/util};

let (:renderAnnoStmts, ...) = //{/pkg/arrai/sysl-renderer/sysl_mod_renderers};

# size returns the size of an attribute.
let size = \attr
    cond {
        attr.length = 'MAX': '',
        //seq.has_prefix('0x', attr.length): $`(${//seq.trim_prefix('0x', attr.length)})`,
        attr.length > 0 && attr.type != 'decimal': $`(${attr.length})`,
        attr.type = 'decimal': $`(${attr.length}.${attr.scale})`,
    };

# sortingOrder determines and appends sorting order.
let sortingOrder = \e \attr
    let re = //re.compile($`${attr.name}\((asc|desc)\)`);
    let keyOrder = e.primary_key >> (re.match(.)(0)?(1)?:{} rank (:.@)) where .;
    (keyOrder where .@item) rank (@: .@);

# matchingFKs returns the foreign keys matching attribute name.
let matchingFKs = \entity \attr
    //rel.union(entity.foreign_keys => .foreign_keys) where .attribute = attr.name;

# attributePatterns generates the patterns for an attribute.
let attributePatterns = \entity \attr
    let attrName = cond {
        !util.isValidIdentifier(attr.name): $`name="${attr.name}"`
    };
    let options = $`${(attr.options?:{} => \(@:k, @value:v) $`${k}="${v}"`) orderby .::, }`;
    let pk = cond {
        entity.primary_key where attr.name = //seq.split("(", .@item rank (:.@))(0):
            $`~pk${cond {sortingOrder(entity, attr):$`, ~${sortingOrder(entity, attr) ::}`}}`
    };
    let fk = cond { matchingFKs(entity, attr): '~fk' };
    let length = cond { attr.length?:'' = 'MAX': '~max' };
    let hexPrefix = cond { //seq.has_prefix('0x', attr.length?:''): '~hex' };
    [attrName, options, pk, fk, length, hexPrefix] where .@item;

# entityPatterns generates the patterns for an entity.
let entityPatterns = \entity \model
    let cluster = cond {
        entity.cluster:
            //seq.join(', ', entity.cluster >>
            $`interleave_in_parent="${.interleaved_in}", interleave_on_delete="${//str.lower(.on_delete)}"`),
    };
    let fk = cond entity.foreign_keys?:{} {
        {}: {},
        fks: $`
            foreign_keys=[${(fks => \keys $`
                [${cond {keys.constraint_name: $`"constraint:${keys.constraint_name}",`}}"columns:${keys.foreign_keys => .attribute orderby .::,}"]
            `) orderby .::,}]
        `,
    };
    let indx = model.indexes where .table_name = entity.name => ([
        $`"name:${.name}"`,
        cond {.unique: $`"unique:${.unique}"`},
        cond {.nullfiltered: $`"null_filtered:${.nullfiltered}"`},
        $`"key_parts:${.key_parts::,}"`,
        cond {.storing_col: $`"storing:${.storing_col::,}"`},
        cond {.interleaved_table: $`"interleave_in:${.interleaved_table}"`},
    ] where .@item) => '[' ++ //seq.join(',', .) ++ ']';
    [cluster, fk, cond { indx: $`indexes=[${indx orderby . ::,}]` }] where .@item;

# entityPatternsString returns the annotation for an entity's patterns.
let entityPatternsString = \entity \model cond entityPatterns(entity, model) {[]: '', ePats: $`[${ePats ::, }]`};

# attributePatternsString returns the annotation for an attribute's patterns.
let attributePatternsString = \entity \attr cond attributePatterns(entity, attr) {[]: '', aPats: $`[${aPats ::, }]`};

let nestedTypeName = \entity \attr
    $`${entity.name}_${attr.name}`
;

# typeInfo generates the type info for an attribute.
let rec typeInfo = \entities \entity \attr
    let interleavedType =
        let parents = entities where .name <: (entity.cluster => .@item.interleaved_in);
        cond parents {
            {p}: attr.name <: (p.primary_key => .@item) && $`${p.name}.${attr.name}`
        }
    ;
    cond {
        interleavedType: interleavedType ++ (attr.nullable && '?'),
        _:
            let toString = \a
                let type = cond matchingFKs(entity, a) {
                    {fk}: $`${fk.reference_table}.${fk.reference_attribute}`,
                    _: cond a {
                        (:type, ...): a.type ++ size(a),
                        (:struct, ...): nestedTypeName(entity, attr),
                    }
                };
                $`${type}${a.nullable && '?'}`
            ;
            cond attr {
                (:array, ...): $`sequence of ${toString(array +> (:attr.name))}`,
                _: toString(attr),
            }
    }
;

let rec nestedEntities = \entity
    //rel.union(entity.attributes => \(@item: attr, ...)
        cond attr.array?:(attr) {
            (:struct, ...):
                let nested = (
                    name: nestedTypeName(entity, attr),
                    attributes: struct >> .type +> (:.name),
                    primary_key: [],
                    foreign_keys: [],
                    cluster: {},
                );
                {nested} | nestedEntities(nested),
        }
    )
;

let entities = \model
    model.entities | //rel.union(model.entities => nestedEntities(.))
;

# Trim trailing whitespace.
let trim = \str
    let re = //re.compile(`^(.*[^\s])\s*$`);
    $`${//seq.split('\n', str) >> cond re.match(.) {[[_, s]]: s, _: ''}::\n}`;

let renderEntity = \kind \model \entity
    let eps = //seq.sub(", , ", ", ", entityPatternsString(entity, model));
    let removeParens = //re.compile(`\(.*`).sub('');
    let pkAnno = entity.primary_key?:{} && (a: (elt: entity.primary_key >> (s: removeParens(.))));
    $`
        !${kind} ${entity.name}${cond{eps: ' ' ++ eps}}:
            ${pkAnno && renderAnnoStmts({'primary_key': pkAnno})}
            ${entity.attributes >>
                let aps = //seq.sub(", , ", ", ", attributePatternsString(entity, .));
                let name = util.resolveValidIdentifier(//seq.sub("`", "", .name));
                let type = typeInfo(model.entities, entity, .);
                $`
                    ${name} <: ${type} ${aps}
                `
            ::\n}
    `
;

# transformModel translates the empty model into sysl file.
let transformModel = \model
    let nested = //rel.union(model.entities => nestedEntities(.));
    # Sysl specification:
    # https://github.com/anz-bank/sysl/blob/master/pkg/sysl/sysl.proto
    trim($`
        # Code generated by Sysl. DO NOT EDIT.

        ${model.schema orderby . >> $`
            ${.name}:
                ${model.entities orderby .name >> renderEntity('table', model, .)::\n\i}${
                    nested && ['\n'] ++ (nested orderby .name >> renderEntity('type', model, .))
                ::\n\i}
        `::\i:\n}
    `)
;

(
    :transformModel,
)
