let (:transformModel, ...) = //{./sysl};
let (:macro, ...) = //{./sql};

let interleaved = (
    entities: {(
        name: 'foo',
        attributes: [
            (name: 'a', type: 'int', nullable: true, length: 0, scale: 0, options: {}),
            (name: 'b', array: (type: 'int', nullable: true, length: 0, scale: 0), length: 0, options: {}),
        ],
        primary_key: ['a'],
        cluster: [],
        foreign_keys: {},
    ), (
        name: 'bar',
        attributes: [
            (name: 'a', type: 'int', nullable: true, length: 0, scale: 0, options: {}),
            (name: 'b', type: 'int', nullable: false, length: 0, scale: 0, options: {}),
            (name: 'c', type: 'datetime', nullable: false, length: 0, scale: 0,
                options: {'allow_commit_timestamp': 'true', 'foo': 'bar'}),
        ],
        cluster: [(interleaved_in: 'foo', on_delete: {})],
        primary_key: ['a', 'b'],
        foreign_keys: {},
    )},
    indexes: {},
    schema: {(name: 'test')},
);

(
    transformModel: (
        interleaved: transformModel(interleaved) = $`
        # Code generated by Sysl. DO NOT EDIT.

        test:
            !table bar [interleave_in_parent="foo", interleave_on_delete=""]:
                @primary_key = ["a", "b"]
                a <: foo.a? [~pk]
                b <: int [~pk]
                c <: datetime [allow_commit_timestamp="true", foo="bar"]

            !table foo:
                @primary_key = ["a"]
                a <: int? [~pk]
                b <: sequence of int?

        `,
        nestedStructArrys:
            let model = {:macro:
                CREATE TABLE t (
                    foo ARRAY<STRUCT<
                        f STRING,
                        bar ARRAY<STRUCT<
                            b STRING NOT NULL
                        >>
                    >>
                )
            :};
            transformModel(model +> (schema: {(name: 'test')})) = $`
                # Code generated by Sysl. DO NOT EDIT.

                test:
                    !table t:
                        foo <: sequence of t_foo?


                    !type t_foo:
                        f <: string?
                        bar <: sequence of t_foo_bar?

                    !type t_foo_bar:
                        b <: string

            `
        ,
    )
)
