let (:macro, :applyStmt, :emptyModel, :parseDdl, ...) = //{./sql};

(
    macro:
        let model = {:macro:
            CREATE DATABASE macro;
            CREATE TABLE foo (a INT PRIMARY KEY);
        :};

        model = (
            schema: {(name: 'macro')},
            indexes: {},
            entities: {(
                name: 'foo',
                attributes: [(length: 0, name: 'a', nullable: true, options: {}, scale: 0, type: 'int')],
                primary_key: ['a'],
                foreign_keys: {},
                unique_keys: {},
                name_prefix: '',
                cluster: {},
            )}
        )
    ,

    schema: (
        simple: {:macro:CREATE DATABASE db:}.schema = {(name: 'db')},
    ),

    create_table: (
        simple:
            {:macro:CREATE TABLE t (c INT64):}.entities
            --- {(
                name: 't',
                attributes: [(name: 'c', type: 'int64', nullable: true, length: 0, scale: 0, options: {})],
            )}
        ,
        check:
            {:macro:CREATE TABLE t (c INT64, CONSTRAINT c CHECK(c <> 0 AND c <> 1)):}.entities
            --- {(
                name: 't',
                attributes: [(name: 'c', type: 'int64', nullable: true, length: 0, scale: 0, options: {})],
            )}
        ,
        pk: (
            simple:
                {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c):}.entities
                --- {(
                    name: 't',
                    attributes: [(name: 'c', type: 'int64', nullable: true, length: 0, scale: 0, options: {})],
                    primary_key: ['c']
                )}
            ,
            ordering: ({:macro:CREATE TABLE foo (a int, b int, c int) PRIMARY KEY(b, a, c):}.entities single).primary_key
                = ['b', 'a', 'c'],
            empty:
                ({:macro:CREATE TABLE t (c INT64) PRIMARY KEY():}.entities => .primary_key) = {[]}
            ,
        ),
        fk: (
            simple:
                {:macro:CREATE TABLE t (c INT, FOREIGN KEY (c) REFERENCES ft (fc)):}.entities
                --- {(
                    foreign_keys: {(
                        constraint_name: {},
                        foreign_keys: {(attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')},
                        on_update: {},
                        on_delete: {},
                    )}
                )}
            ,
            inline:
                # FIXME: Weird syntax needed to parse macro properly.
                let model = (\. {:macro:CREATE TABLE t (c INT REFERENCES ft):})({});
                let fk = ((model.entities single).foreign_keys single).foreign_keys single;
                fk = (attribute: 'c', reference_table: 'ft', reference_attribute: 'c')
            ,
            inline_with_column:
                # FIXME: Weird syntax needed to parse macro properly.
                let model = (\. {:macro:CREATE TABLE t (c INT REFERENCES ft (fc)):})({});
                let fk = ((model.entities single).foreign_keys single).foreign_keys single;
                fk = (attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')
            ,
            inline_multiple:
                # FIXME: Weird syntax needed to parse macro properly.
                let model = (\. {:macro:CREATE TABLE t (d INT REFERENCES ft, e INT REFERENCES ft (fe)):})({});
                let fks = ((model.entities single).foreign_keys) => .foreign_keys single;
                fks = {
                    (attribute: 'd', reference_table: 'ft', reference_attribute: 'd'),
                    (attribute: 'e', reference_table: 'ft', reference_attribute: 'fe'),
                }
            ,
            namespaced:
                {:macro:CREATE TABLE t (c INT, FOREIGN KEY (c) REFERENCES namespace.ft (fc)):}.entities
                --- {(
                    foreign_keys: {(
                        constraint_name: {},
                        foreign_keys: {(attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')},
                        on_update: {},
                        on_delete: {},
                    )}
                )}
            ,
            on_update:
                {:macro:CREATE TABLE t (c INT, FOREIGN KEY (c) REFERENCES ft (fc) ON UPDATE CASCADE):}.entities
                --- {(
                    foreign_keys: {(
                        constraint_name: {},
                        foreign_keys: {(attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')},
                        on_update: 'cascade',
                        on_delete: {},
                    )}
                )}
            ,
        ),
        unique: (
            unique_key:
                {:macro:CREATE TABLE t (c INT, UNIQUE KEY name (c)):}.entities
                --- {(
                    unique_keys: {(
                        constraint_name: 'name',
                        unique_keys: {'c'},
                    )}
                )}
            ,
            key:
                {:macro:CREATE TABLE t (c INT, KEY name (c)):}.entities =
                {:macro:CREATE TABLE t (c INT, UNIQUE KEY name (c)):}.entities
            ,
        ),
        interleave: (
            simple:
                {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c), INTERLEAVE IN PARENT p:}.entities
                --- {(cluster: [(interleaved_in: 'p', on_delete: {})])},
            on_delete:
                {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c), INTERLEAVE IN PARENT p ON DELETE CASCADE:}.entities
                --- {(cluster: [(interleaved_in: 'p', on_delete: 'cascade')])},
        ),
        namespaced:
                {:macro:CREATE TABLE namespace.t (c INT64):}.entities
                --- {(name_prefix: 'namespace', name: 't')}
        ,
        generated:
            {:macro:CREATE TABLE t (c INT64 AS (IF(X,Y,Z)) STORED):}
            = {:macro:CREATE TABLE t (c INT64):}
        ,
        partition_by:
            let _ = {:macro:CREATE TABLE t (c INT64) PARTITION BY c:};
            true
        ,
    ),

    alter_table: (
        owner_to: let s = {:macro:ALTER TABLE t OWNER TO local:}; s = emptyModel,
        type:
            let s = {:macro:CREATE TABLE t (c INT); ALTER TABLE t MODIFY COLUMN c STRING:};
            (s.entities single).attributes(0).type = 'string'
        ,
        type_without_column:
            {:macro:CREATE TABLE t (c INT); ALTER TABLE t MODIFY c STRING:} =
            {:macro:CREATE TABLE t (c INT); ALTER TABLE t MODIFY COLUMN c STRING:}
        ,
        set_not_null:
            let s = {:macro:CREATE TABLE t (c INT); ALTER TABLE t MODIFY COLUMN c SET NOT NULL:};
            (s.entities single).attributes(0).nullable = false
        ,
        set_default:
            let s = {:macro:CREATE TABLE t (c INT); ALTER TABLE t MODIFY COLUMN c SET DEFAULT (0):};
            true
        ,
    ),

    index: (
        simple:
            {:macro:CREATE INDEX ix ON t1(id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        namespaced:
            {:macro:CREATE INDEX ix ON namespace.t1(id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        interleaved:
            {:macro:CREATE INDEX ix ON t1(id) STORING (id), INTERLEAVE IN t2:}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'], storing_col: ['id'], interleaved_table: 't2')}
        ,
        using:
            {:macro:CREATE INDEX ix ON t1 USING btree (id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        unique:
            {:macro:CREATE UNIQUE INDEX ix ON t1 (id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        ifNotExists:
            {:macro:CREATE INDEX IF NOT EXISTS ix ON t1 (id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        where:
            {:macro:CREATE INDEX ix ON t1 (id) WHERE c != false:}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        withCast:
            {:macro:CREATE INDEX ix ON t1 (id) WHERE status = "on"::INT:}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
    ),

    # TODO: Include views in model.
    view: (
        create: ({:macro:CREATE VIEW v AS SELECT stuff:}) = emptyModel,
        drop: ({:macro:DROP VIEW v:}) = emptyModel,
    ),

    scalar_types:
        let colType = \m (m.entities single).attributes(0);
        (
            # Map of DB model types to single-column tables with equivalent SQL types.
            scalar: {
                (type: 'bool'): [
                    {:macro:CREATE TABLE t (c BOOL):},
                    {:macro:CREATE TABLE t (c BOOLEAN):},
                ],
                (type: 'int'): [
                    {:macro:CREATE TABLE t (c INT):},
                {:macro:CREATE TABLE t (c INTEGER):},],
                (type: 'int64'): [
                    {:macro:CREATE TABLE t (c BIGINT):},
                    {:macro:CREATE TABLE t (c INT64):},
                ],
                (type: 'float'): [
                    {:macro:CREATE TABLE t (c FLOAT):}
                ],
                (type: 'float64'): [
                    {:macro:CREATE TABLE t (c DOUBLE):},
                    {:macro:CREATE TABLE t (c FLOAT64):},
                ],
                (type: 'decimal', length: 38, scale: 9): [
                    {:macro:CREATE TABLE t (c DECIMAL):},
                    {:macro:CREATE TABLE t (c DEC):},
                    {:macro:CREATE TABLE t (c FIXED):},
                    {:macro:CREATE TABLE t (c NUMERIC):},
                ],
                (type: 'decimal', length: 4, scale: 2): [
                    {:macro:CREATE TABLE t (c DECIMAL(4, 2)):},
                ],
                (type: 'date'): [
                    {:macro:CREATE TABLE t (c DATE):}
                ],
                (type: 'datetime'): [
                    {:macro:CREATE TABLE t (c DATETIME):},
                    {:macro:CREATE TABLE t (c TIMESTAMP):},
                    {:macro:CREATE TABLE t (c TIMESTAMP WITH TIME ZONE):},
                    {:macro:CREATE TABLE t (c TIMESTAMP WITHOUT TIME ZONE):},
                    {:macro:CREATE TABLE t (c TIME):},
                ],
                (type: 'string'): [
                    {:macro:CREATE TABLE t (c TEXT):},
                    {:macro:CREATE TABLE t (c STRING):},
                    {:macro:CREATE TABLE t (c VARCHAR):},
                    {:macro:CREATE TABLE t (c CHARACTER):},
                    {:macro:CREATE TABLE t (c CHARACTER VARYING):},
                    {:macro:CREATE TABLE t (c JSON):},
                    {:macro:CREATE TABLE t (c UUID):}, # TODO: Capture UUID-ness as well.
                ],
                (type: 'string', length: 42): [
                    {:macro:CREATE TABLE t (c STRING(42)):},
                    {:macro:CREATE TABLE t (c VARCHAR(42)):},
                    {:macro:CREATE TABLE t (c CHARACTER VARYING(42)):},
                ],
                (type: 'bytes'): [
                    {:macro:CREATE TABLE t (c BYTES):},
                    # {:macro:CREATE TABLE t (c BYTEA):},
                    {:macro:CREATE TABLE t (c BLOB):},
                    {:macro:CREATE TABLE t (c LONGBLOB):},
                ],
                (type: 'bytes', length: 42): [
                    {:macro:CREATE TABLE t (c BYTES(42)):}
                ],
                (type: 'bytes', length: 'MAX'): [
                    {:macro:CREATE TABLE t (c BYTES(MAX)):},
                ],
            } >>> \k \v v >> {k} --- {colType(.)},

            multipleNullDefaultCast: [
                {:macro:CREATE TABLE t (c INT DEFAULT 1 NOT NULL):},
                {:macro:CREATE TABLE t (c INT NOT NULL DEFAULT 1):},
                {:macro:CREATE TABLE t (c INT DEFAULT 1 NULL):},
                {:macro:CREATE TABLE t (c INT NULL DEFAULT 1):},
                {:macro:CREATE TABLE t (c INT DEFAULT 1::ARRAY<STRING> NOT NULL):},
            ] >> (.entities single).attributes(0).type = "int",

            array: (
                int: [
                    {:macro:CREATE TABLE t (c ARRAY<INT>):},
                    {:macro:CREATE TABLE t (c INT[]):},
                ] >> colType(.).array.type = 'int',

                'int[42]': [
                    {:macro:CREATE TABLE t (c INT[42]):},
                ] >> colType(.) = (name: 'c', length: 42, options: {},
                                    array: (type: 'int', nullable: true, length: 0, scale: 0)),
            ),
            struct: (
                int: {:macro:CREATE TABLE t (c STRUCT<a INT>):} ->
                    (colType(.).struct(0) -> .name = 'a' && .type.type = 'int' && .type.nullable = true),
                int_notnull: {:macro:CREATE TABLE t (c STRUCT<a INT NOT NULL>):} ->
                    (colType(.).struct(0) -> .name = 'a' && .type.type = 'int' && .type.nullable = false),
            ),
        )
    ,

    values:
        let insert = {:macro:INSERT INTO t (c) VALUES (
            "string", 'string', "it""s", 'it''s', "", -42, 0, 42, -0x2A, 0x0, 0x2A,
            TRUE, FALSE, NULL, CURRENT_TIMESTAMP, NOW(), NOW() at time zone 'foo',
            NEWID(), uuid_generate_v1(), uuid_generate_v4(), 365.0, 10.
        ), (0):};
        # Assert that the values were all parsed, but don't expect a model.
        insert = emptyModel
    ,

    select:
        let select = {:macro:SELECT a FROM b NATURAL JOIN c; SELECT;:};
        select = emptyModel
    ,

    insert: (
        values:
            let insert = {:macro:INSERT INTO t (c) VALUES (1):};
            insert = emptyModel
        ,
        selection:
            let insert = {:macro:INSERT t (c) SELECT a FROM b:};
            insert = emptyModel
        ,
    ),

    update: (
        multiple:
            let update = {:macro:UPDATE t SET c=1, d=PENDING_COMMIT_TIMESTAMP():};
            update = emptyModel
        ,
        whereEqual: parseDdl(`UPDATE t SET c=1 WHERE 1=1`) = [{}],
        whereTrue: parseDdl(`UPDATE t SET c=1 WHERE TRUE`) = [{}],
    ),

    set: [
        {:macro:SET foo = 0:},
        {:macro:SET standard_conforming_strings = on:},
        {:macro:SET xmloption = content:},
        {:macro:SET client_min_messages = warning:},
        {:macro:SET row_security = off:},
    ] >> . = emptyModel,

    delete: (
        bare:
            let delete = {:macro:DELETE FROM t:};
            delete = emptyModel
        ,
        conditions: [
            parseDdl(`DELETE FROM t WHERE 1 = 1`),
            parseDdl(`DELETE FROM t WHERE c = 'x'`),
            parseDdl(`DELETE FROM t WHERE c IS NULL`),
            parseDdl(`DELETE FROM t WHERE c IS NOT NULL`),
            parseDdl(`DELETE FROM t WHERE c = 'x' AND d IS NULL`),
            parseDdl(`DELETE FROM t WHERE c = 'x' OR c = 'y'`),
            parseDdl(`DELETE FROM t WHERE (c = 'x') OR (c = 'y' AND (d=1)) AND (d IS NULL)`),
        ] >> . = [{}],
    ),

    functions: (
        create: [
            {:macro:CREATE FUNCTION public.newid() RETURNS uuid AS $BODY$ foo $BODY$:},
            {:macro:
                CREATE FUNCTION public.newid() RETURNS uuid
                LANGUAGE sql
                AS $$select md5(random()::text || clock_timestamp()::text)::uuid$$;
            :},
        ] >> . = emptyModel,

        alter: [
            {:macro:ALTER FUNCTION public.newid() OWNER TO foo:},
        ] >> . = emptyModel,
    ),

    change_streams: (
        create: [
            {:macro:CREATE CHANGE STREAM foo:},
            {:macro:CREATE CHANGE STREAM foo FOR ALL:},
            {:macro:CREATE CHANGE STREAM foo FOR t:},
            {:macro:CREATE CHANGE STREAM foo FOR t, s, r:},
            {:macro:CREATE CHANGE STREAM foo FOR t(c):},
            {:macro:CREATE CHANGE STREAM foo FOR t(c), s(d), r(e):},
        ] >> . = emptyModel,
        drop: [
            {:macro:DROP CHANGE STREAM foo:},
        ] >> . = emptyModel,
    ),

    call: [
        {:macro:CALL do_thing():},
        {:macro:CALL do_thing("foo"):},
        {:macro:CALL do_thing(1, "two", three, NOW()):},
    ] >> . = emptyModel,

    analyze: [
        {:macro:ANALYZE this:},
        {:macro:ANALYSE that:},
    ] >> . = emptyModel,

    comment: (
        # Regression test for a bug where rules with `table_prefix?` would consume too much, up to the `.` in the comment.
        dot_following_table_prefix_rule:
            let _ = {:macro:
                CREATE TABLE t (c INT);
                ALTER TABLE t DROP COLUMN c
                -- .
            :};
            let _ = {:macro:
                CREATE VIEW foo AS SELECT foo;
                -- .
            :};
            true
        ,
    ),
)
