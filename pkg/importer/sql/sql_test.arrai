let (:macro, :applyStmt, :emptyModel, ...) = //{./sql};

(
    macro:
        let model = {:macro:
            CREATE DATABASE macro;
            CREATE TABLE foo (a INT PRIMARY KEY);
        :};

        model = (
            schema: {(name: 'macro')},
            indexes: {},
            entities: {(
                name: 'foo',
                attributes: [(array: {}, length: 0, name: 'a', nullable: true, options: {}, scale: {}, type: 'int')],
                primary_key: ['a'],
                foreign_keys: {},
                unique_keys: {},
                cluster: {},
            )}
        )
    ,

    schema: (
        simple: {:macro:CREATE DATABASE db:}.schema = {(name: 'db')},
    ),

    table: (
        simple:
            {:macro:CREATE TABLE t (c INT64):}.entities
            --- {(
                name: 't',
                attributes: [(name: 'c', array: {}, length: 0, nullable: true, options: {}, type: 'int64', scale: {})],
            )}
        ,
        pk:
            {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c):}.entities
            --- {(
                name: 't',
                attributes: [(name: 'c', array: {}, length: 0, nullable: true, options: {}, type: 'int64', scale: {})],
                primary_key: ['c']
            )}
        ,
        fk: (
            simple:
                {:macro:CREATE TABLE t (c INT, FOREIGN KEY (c) REFERENCES ft (fc)):}.entities
                --- {(
                    foreign_keys: {(
                        constraint_name: {},
                        foreign_keys: {(attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')},
                        on_update: {},
                        on_delete: {},
                    )}
                )}
            ,
            on_update:
                {:macro:CREATE TABLE t (c INT, FOREIGN KEY (c) REFERENCES ft (fc) ON UPDATE CASCADE):}.entities
                --- {(
                    foreign_keys: {(
                        constraint_name: {},
                        foreign_keys: {(attribute: 'c', reference_table: 'ft', reference_attribute: 'fc')},
                        on_update: 'cascade',
                        on_delete: {},
                    )}
                )}
            ,
        ),
        interleave: (
            simple:
                {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c), INTERLEAVE IN PARENT p:}.entities
                --- {(cluster: [(interleaved_in: 'p', on_delete: {})])},
            on_delete:
                {:macro:CREATE TABLE t (c INT64) PRIMARY KEY(c), INTERLEAVE IN PARENT p ON DELETE CASCADE:}.entities
                --- {(cluster: [(interleaved_in: 'p', on_delete: 'cascade')])},
        ),
    ),

    index: (
        simple:
            {:macro:CREATE INDEX ix ON t1(id):}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'])}
        ,
        interleaved:
            {:macro:CREATE INDEX ix ON t1(id) STORING (id), INTERLEAVE IN t2:}.indexes
            --- {(name: 'ix', table_name: 't1', key_parts: ['id'], storing_col: ['id'], interleaved_table: 't2')}
        ,
    ),

    scalar_types:
        let colType = \m (m.entities single).attributes(0);
        # Map of Sysl types to single-column tables with equivalent SQL types.
        {
            (type: 'bool'): [
                {:macro:CREATE TABLE t (c BOOL):},
                {:macro:CREATE TABLE t (c BOOLEAN):},
            ],
            (type: 'int'): [
                {:macro:CREATE TABLE t (c INT):}
            ],
            (type: 'int64'): [
                {:macro:CREATE TABLE t (c BIGINT):},
                {:macro:CREATE TABLE t (c INT64):},
            ],
            (type: 'float'): [
                {:macro:CREATE TABLE t (c FLOAT):}
            ],
            (type: 'float64'): [
                {:macro:CREATE TABLE t (c DOUBLE):},
                {:macro:CREATE TABLE t (c FLOAT64):},
            ],
            (type: 'decimal', length: 38, scale: 9): [
                {:macro:CREATE TABLE t (c DECIMAL):},
                {:macro:CREATE TABLE t (c DEC):},
                {:macro:CREATE TABLE t (c FIXED):},
                {:macro:CREATE TABLE t (c NUMERIC):},
            ],
            (type: 'decimal', length: 4, scale: 2): [
                {:macro:CREATE TABLE t (c DECIMAL(4, 2)):},
            ],
            (type: 'date'): [
                {:macro:CREATE TABLE t (c DATE):}
            ],
            (type: 'datetime'): [
                {:macro:CREATE TABLE t (c DATETIME):},
                {:macro:CREATE TABLE t (c TIMESTAMP):},
            ],
            (type: 'string'): [
                {:macro:CREATE TABLE t (c TEXT):},
                {:macro:CREATE TABLE t (c STRING):},
                {:macro:CREATE TABLE t (c VARCHAR):},
            ],
            (type: 'string', length: 42): [
                {:macro:CREATE TABLE t (c STRING(42)):},
                {:macro:CREATE TABLE t (c VARCHAR(42)):},
            ],
            (type: 'bytes'): [
                {:macro:CREATE TABLE t (c BYTES):},
                {:macro:CREATE TABLE t (c BLOB):},
                {:macro:CREATE TABLE t (c LONGBLOB):},
            ],
            (type: 'bytes', length: 42): [
                {:macro:CREATE TABLE t (c BYTES(42)):}
            ],
            (type: 'bytes', length: 'MAX'): [
                {:macro:CREATE TABLE t (c BYTES(MAX)):},
            ],
        } >>> \k \v v >> {k} --- {colType(.)}
    ,

    values:
        let  insert = {:macro:INSERT INTO t (c) VALUES (
            "string", 'string', "", -42, 0, 42, -0x2A, 0x0, 0x2A,
            TRUE, FALSE, NULL, CURRENT_TIMESTAMP, NOW() at time zone 'foo'
        ):};
        # Assert that the values were all parsed, but don't expect a model.
        insert = emptyModel
    ,
)
