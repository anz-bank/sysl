# Tools for parsing and importing SQL DDL from multiple RDBMSs.
#
# - grammar describes a general grammar for parsing SQL.
# - parse parses some SQL source with grammar, then transforms it to an arr.ai model.
# - macro wraps parse in a macro structure so it can be used inline.

let (:reduce, ...) = //{github.com/arr-ai/arrai/contrib/util};

let grammar = {://grammar.lang.wbnf:
ddl                 -> stmt=(create_database
                            |create_table
                            |create_index
                            |create_sequence
                            |create_function
                            |create_trigger
                            |alter_table
                            |update_table
                            |drop_table
                            |drop_index
                            |insert
                            |use
                            |set
                            |grant):";"? ";"? \s*;

create_database     -> "CREATE" "DATABASE" database=([a-z][0-9a-z_]*[0-9a-z]);

create_table        -> "CREATE" "TABLE" table_name "("(
                              attr=(column_name attr_type generated? options_def? pk?)
                            | table_constraint
                            | pks=(pk "(" key_parts ")")
                        ):"," ","? ")"
                        pks_outer=(pk "(" key_parts ")")?
                        ("," cluster)*; //# Spanner
table_constraint    -> ("CONSTRAINT" constraint_name)? (unique | fk);
unique              -> "UNIQUE" ("KEY" key_name=name)? "(" column_name:"," ")";
fk                  -> "FOREIGN KEY" "(" column_name:"," ")"
                       "REFERENCES" foreign=(table_name "(" column_name:"," ")")
                       on_delete? on_update?;
cluster             -> "INTERLEAVE" "IN" "PARENT" table_name on_delete?; //# Spanner
on_delete           -> "ON" "DELETE" on_action;
on_update           -> "ON" "UPDATE" on_action;
on_action           -> CASCADE     = "CASCADE"
                     | NO_ACTION   = "NO" "ACTION"
                     | RESTRICT    = "RESTRICT"
                     | SET_NULL    = "SET" NULL
                     | SET_DEFAULT = "SET" "DEFAULT";

create_index        -> "CREATE" unique=("UNIQUE")? nullfiltered=("NULL_FILTERED")? "INDEX" index_name
                       "ON" table_name "(" key_parts ")" storing_clause? ","? interleaving_clause?;
storing_clause      -> "STORING" "(" column_name:",",? ")";
interleaving_clause -> "INTERLEAVE" "IN" table_name;

create_sequence     -> "CREATE" "SEQUENCE" if_not_exists? sequence_name sequence_opt*;
sequence_opt        -> "START" "WITH" \d+
                     | "INCREMENT" "BY" \d+
                     | "NO" "MAXVALUE"
                     | "CACHE" \d+
                     | "NO" "CYCLE";

create_function     -> "CREATE" "FUNCTION" function_name=name "(" ")" "RETURNS" var_name=name "AS"
                       "$BODY$" [^$]+ "$BODY$" function_opt*;
function_opt        -> "LANGUAGE" lang_name=name
                     | "VOLATILE"
                     | "COST" cost=\d+;

// TODO: Hardcode less.
create_trigger      -> "CREATE" "TRIGGER" trigger_name=name
                       "AFTER" "INSERT" "OR" "UPDATE"
                       "ON" table_name "FOR" "EACH" "ROW"
                       "EXECUTE" "PROCEDURE" function_name=name "(" ")";

alter_table         -> "ALTER" "TABLE" table_name (alter=(table_alteration|attr_alteration)):",";
table_alteration    -> ADD_COLUMN      = ("ADD" "COLUMN"? column_name (attr_type | options_def) generated?)
                     | DROP_COLUMN     = ("DROP" "COLUMN" column_name)
                     | RENAME_COLUMN   = ("RENAME" "COLUMN" from=column_name "TO" to=column_name)
                     | SET_COLUMN      = ("SET" on_delete)
                     | ADD_CONSTRAINT  = ("ADD" table_constraint)
                     | DROP_CONSTRAINT = ("DROP" "CONSTRAINT" constraint_name)
                     | drop_index;
attr_alteration     -> ("ALTER" | "MODIFY") "COLUMN" column_name
                       (action=("SET" | "DROP") NOT_NULL | "SET" options_def | "TYPE"? attr_type);

//# Spanner
update_table        -> "UPDATE" table_name
                       "SET" update_item:","
                       ("WHERE" condition)?;
update_item         -> column_name "=" (value | "DEFAULT");
condition           -> column_name (("IS" "NOT"? NULL) | comparison value);
comparison          -> "=" | "!=" | "<>" | "<=" | "<" | ">=" | ">";


drop_table          -> "DROP" "TABLE" table_name;

drop_index          -> "DROP" "INDEX" index_name;

insert              -> "INSERT" "INTO" table_name "(" column_name:"," ")"
                       "VALUES" "(" value:"," ")" on_conflict?;
on_conflict         -> "ON" "CONFLICT" "(" column_name:"," ")" conflict_action?;
conflict_action     -> "DO" "NOTHING"; // TODO: "DO" "UPDATE" "SET"

grant               -> "GRANT" right:"," "ON" ("ALL" ("TABLES"|"SEQUENCES"|"FUNCTIONS") "IN")?
                       "SCHEMA" schema=name "TO" '"' subject=[^"]+ '"'; //'
right               -> "USAGE"
                     | "SELECT"
                     | "INSERT"
                     | "UPDATE"
                     | "TRIGGER"
                     | "REFERENCES"
                     | "EXECUTE";

use                 -> "USE" name;
set                 -> "SET" name "=" value;

//# Spanner
options_def         -> "OPTIONS" "("(option):",",? ")";
option              -> k="allow_commit_timestamp" "=" v=("true"|"false");

key_parts            -> column_def=(column_name sort_by=("ASC"|"DESC")?):",",?;
attr_type           -> (ARRAY_TYPE|SCALAR_TYPE) (NULL | NOT_NULL)? default?;
default             -> "DEFAULT" value;
generated           -> "GENERATED" "ALWAYS" "AS" expr ("VIRTUAL" | "STORED");
expr                -> [^()]* "(" [^()]* expr? [^()]* ")";
if_not_exists       -> "IF" "NOT" "EXISTS";
pk                  -> "PRIMARY" "KEY";
ARRAY_TYPE          -> SCALAR_TYPE "[" size=\d* "]"
                     | "ARRAY<" SCALAR_TYPE ">"; //# Spanner

SCALAR_TYPE         -> BOOLEAN   = ("BOOLEAN" | "BOOL")
                     | INT64     = ("BIGINT" | "INT64")
                     | INT       = "INT"
                     | FLOAT64   = ("FLOAT64" | "DOUBLE")
                     | FLOAT     = "FLOAT"
                     | DECIMAL   = (("DECIMAL" | "DEC" | "FIXED" | "NUMERIC") ("(" precision=int_value "," scale=int_value ")")?)
                     | DATETIME  = ("DATETIME" ("(" length ")")? | "TIMESTAMP")
                     | DATE      = "DATE"
                     | STRING    = (("TEXT" | "VARCHAR" | "STRING") ("(" length ")")?)
                     | BYTES     = ("BYTES" ("(" length ")")? | "BLOB" | "LONGBLOB")
                     ;

length              -> (int_value|"MAX");

name                -> [$@A-Za-z_][0-9$@A-Za-z_]*;
table_name          -> [$@A-Za-z_][0-9$@A-Za-z_]*;
constraint_name     -> [$@A-Za-z_][0-9$@A-Za-z_]*;
column_name         -> /{`[^`]*`|[$@A-Za-z_][0-9$@A-Za-z_]*}; //`
index_name          -> [$@A-Za-z_][0-9$@A-Za-z_]*;
sequence_name       -> [$@A-Za-z_][0-9$@A-Za-z_]*;

value               -> int_value
                     | bool_value
                     | string_value
                     | time_value
                     | NULL
                     | CURRENT_TIMESTAMP;
int_value           -> hex_value|decimal_value;
decimal_value       -> [-]?\d+;
hex_value           -> /{-?0x[[:xdigit:]]+};
bool_value          -> "TRUE" | "FALSE";
string_value        -> ('"' [^"]* '"' | "'" [^']* "'"); //'
time_value          -> "NOW" "(" ")" "at" "time" "zone" string_value;

NULL                -> "NULL";
NOT_NULL            -> "NOT" NULL;
CURRENT_TIMESTAMP   -> "CURRENT_TIMESTAMP";

// All tokens are case-insensitive and may be preceded by comments or whitespace.
.wrapRE -> /{(?i)(--[^\n]*(?:\n|\z)|/\*[^*]*\*/|\s)*()};
:};

#################### PARSE TREE EVALUATORS ####################
# These functions turn a spanner ddl parse tree into ddl statements

# evalInt turns an int parse node into an integer
let evalInt = \parsed cond parsed {
    (decimal_value: ('': val), ...): //eval.value(val),
    (hex_value: ('': val), ...): val,
    _: 0
};

let evalLength = \l cond l {
    (int_value: v, ...): evalInt(v),
    ('': s, ...): s rank (:.@),
    _: l
};

# evalType turns an attr_type parse node into an attribute type
let evalType = \parsed
    let data = cond parsed {
        (SCALAR_TYPE: scalar, ...):                    (scalar: scalar, array: false),
        (ARRAY_TYPE: (SCALAR_TYPE: scalar, ...), ...): (scalar: scalar, array: true),
    };
    let type = cond data.scalar {
        (BOOLEAN: x, ...):  (type: "bool", length: 0),
        (INT: x, ...):      (type: "int", length: 0),
        (INT64: x, ...):    (type: "int64", length: 0),
        (FLOAT: x, ...):    (type: "float", length: 0),
        (FLOAT64: x, ...):  (type: "float64", length: 0),
        (DECIMAL: x, ...):  (type: "decimal", length: evalLength(x.precision?:38), scale: evalLength(x.scale?:9)),
        (DATE: x, ...):     (type: "date", length: 0),
        (DATETIME: x, ...): (type: "datetime", length: evalLength(x.length?:0)),
        (STRING: x, ...):   (type: "string", length: evalLength(x.length?:0)),
        (BYTES: x, ...):    (type: "bytes", length: evalLength(x.length?:0)),
        _:                  //error($`unknown type: ${//fmt.pretty(data.scalar)}`)
    };
    (
        type: type.type,
        length: type.length,
        scale: type.scale?:{},
        array: data.array,
        nullable: cond parsed {(:NOT_NULL, ...): false, _: true},
    );

let t = \x x.'' rank (:.@);

# evalAttribute turns an attr node into an attribute of a relation
let evalAttribute = \parsed
    let attr = (
        name: parsed.column_name.'' rank (:.@),
        options: parsed.options_def?.option?:[] => \(@item: (:k, :v, ...), ...)
            (@: k.''rank (:.@), @value: v.''rank (:.@))
    );

    attr +> cond parsed {
        (:attr_type, ...): evalType(attr_type),
        (:NOT_NULL, :action, ...): (nullable: action = "SET"),
        _: (),
    };

let evalOnAction = \a cond a {
    (:CASCADE, ...): 'cascade',
    (:NO_ACTION, ...): 'no action',
    (:RESTRICT, ...): 'restrict',
    (:SET_NULL, ...): 'set null',
    (:SET_DEFAULT, ...): 'set default',
};

let evalForeignKeyConstraint = \parsed
    let reference = parsed.fk.foreign -> (
        table_name: .table_name.'' rank (:.@),
        attributes: .column_name >> (.'' rank (:.@)),
    );
    (
        constraint_name: cond parsed.constraint_name?:{} {('': name): name rank (:.@)},
        foreign_keys: parsed.fk.column_name => (
            attribute: .@item.'' rank (:.@),
            reference_table: reference.table_name,
            reference_attribute: reference.attributes(.@),
        ),
        on_update: evalOnAction(parsed.fk.on_update?.on_action?:{}),
        on_delete: evalOnAction(parsed.fk.on_delete?.on_action?:{}),
    );

let evalUniqueConstraint = \parsed (
    constraint_name: cond parsed.constraint_name?:{} {('': name): name rank (:.@)},
    unique_keys: parsed.unique.column_name => (.@item.'' rank (:.@))
);

let evalConstraint = \parsed
    cond parsed {
        (:fk, ...): evalForeignKeyConstraint(parsed),
        (:unique, ...): evalUniqueConstraint(parsed),
    }
;

let evalTableAlteration = \parsed cond parsed {
    (table_alteration: (ADD_COLUMN: data, ...), ...): (
        type: "add_column",
        alteration: evalAttribute(data),
    ),

    (table_alteration: (DROP_COLUMN: data, ...), ...): (
        type: "drop_column",
        alteration: (
            name: data.column_name.'' rank (:.@),
        ),
    ),

    (table_alteration: (RENAME_COLUMN: data, ...), ...): (
        type: "rename_column",
        alteration: (
            from: data.from.column_name.'' rank (:.@),
            to: data.to.column_name.'' rank (:.@),
        ),
    ),

    (table_alteration: (SET_COLUMN: data, ...), ...): (
        type: "set_column",
        alteration: data
    ),

    (table_alteration: (ADD_CONSTRAINT: data, ...), ...): (
        type: "add_constraint",
        alteration: evalConstraint(data.table_constraint),
    ),

    (table_alteration: (DROP_CONSTRAINT: data, ...), ...): (
        type: "drop_constraint",
        alteration: data,
    ),

    (table_alteration: (drop_index: data, ...), ...): (
        type: "drop_index",
        alteration: data,
    ),

    (attr_alteration: data, ...): (
        type: "alter_column",
        alteration: evalAttribute(data),
    ),

    _: //error($`unmapped alteration: ${//fmt.pretty(parsed)}`)
};

# concatOffset appends the two strings preserving string offsets
let concatOffset = \str1 \str2
    (str1 => .@ orderby .)(0)\$`${str1}${str2}`;

# parseKeyParts parses the primary_key generated from spanner sql
let parseKeyParts = \t
    t.column_def >> \def
        let name = def.column_name.'' rank (:.@);
        cond def {
            (:sort_by, ...): $`${name}(${//str.lower(sort_by.'')})`,
            _: name,
        };

# evalDdl turns a ddl parse tree into a list of ddl statements ready to be applied to a model
# Use applyStmt to apply these statements to a spanner model
let evalDdl = \parsed parsed.stmt?:[] >> cond . {
    (create_table: val, ...):
        let attributes = val.attr >> evalAttribute(.);
        (
            stmt: "create_table",
            data: (
                name: val.table_name.'' rank (:.@),
                attributes: attributes,
                foreign_keys: cond val {
                    (table_constraint: [...constraints], ...):
                        constraints where .@item.fk?:{} => evalConstraint(.@item),
                },
                unique_keys: cond val {
                    (table_constraint: [...constraints], ...):
                        constraints where .@item.unique?:{} => evalConstraint(.@item),
                },
                primary_key: cond val {
                    (:pks, ...): //seq.join([], pks >> parseKeyParts(.key_parts)),
                    (:pks_outer, ...): parseKeyParts(pks_outer.key_parts),
                    _: val.attr >> cond . {(:pk, ...): .column_name.'' rank (:.@)} where .@item,
                },
                cluster: cond {
                    (val.cluster?:false): val.cluster >> (
                        interleaved_in: (.table_name.'' rank (:.@)),
                        on_delete: evalOnAction((.).on_delete?.on_action?:{}),
                    ),
                },
            ),
        )
    ,

    (create_index: val, ...): (
        stmt: "create_index",
        data: (
            unique: cond {
                (val.unique?:false): true,
            },
            nullfiltered: cond {
                (val.nullfiltered?:false): true,
            },
            name: val.index_name.'' rank (:.@),
            table_name: val.table_name.'' rank (:.@),
            key_parts: parseKeyParts(val.key_parts),
            storing_col: cond {
                (val.storing_clause?:false): val.storing_clause.column_name >> (.'' rank (:.@)),
            },
            interleaved_table: (val.interleaving_clause?.table_name.'':'') rank (:.@),
        ),
    ),

    (create_database: val, ...): (
        stmt: "create_database",
        data: (
            name: val.database.'' rank (:.@),
        ),
    ),

    (alter_table: val, ...): (
        stmt: "alter_table",
        data: (
            table_name: val.table_name.'' rank (:.@),
            alterations: val.alter >> evalTableAlteration(.) where .@item,
        ),
    ),

    (drop_table: val, ...): (
        stmt: "drop_table",
        data: val.table_name.'' rank (:.@),
    ),

    (drop_index: val, ...): (
        stmt: "drop_index",
        data: val.index_name.'' rank (:.@),
    ),

    # Ignore non-DDL statements.
    (:use, ...): {},
    (:set, ...): {},
    (:insert, ...): {},
    (:grant, ...): {},
    (:update_table, ...): {},

    _: let _ = //log.print($`skipped unsupported statement: ${.}`); {}
};

################## PARSERS ##################

# parses a byte array against the ddl grammar and hands it to eval
let parseDdl = \bytes evalDdl(//grammar.parse(grammar, "ddl", bytes));

# parses a list of schema files. reads each file and hands to parseDdl
let parseSchema = \files //seq.concat(files >> parseDdl(//os.file(.)));

################## STATEMENTS #################

# applies a create table statement
let applyCreateTable = \relation \model
    let _ = //test.assert.equal({}, model.entities where .name = relation.name);
    model +> (entities: model.entities | {relation});

# applies a create index statement
let applyCreateIndex = \index \model
    let _ = //test.assert.equal({}, model.indexes where .name = index.name);
    model +> (indexes: model.indexes | {index});

# applies a create database statement
let applyCreateDatabase = \database \model
    let _ = //test.assert.equal({}, model.schema where .name = database.name);
    model +> (schema: model.schema | {database});

# applies a drop table statement
let applyDropTable = \name \model
    let _ = //test.assert.equal(1, (model.entities where .name = name) count);
    model +> (entities: model.entities where .name != name);

# applies a drop index statement
let applyDropIndex = \name \model
    let _ = //test.assert.equal(1, (model.indexes where .name = name) count);
    model +> (indexes: model.indexes where .name != name);

# Alterations.

# changeCols returns an altered model with fn applied to the attributes of the entity named t.
let changeCols = \m \t \fn
    let {old} = m.entities where .name = t;
    m +> (entities: m.entities without old with old +> (
        attributes: fn(old.attributes)
    ));

# addCol adds column c to t's attributes in m.
let addCol = \m \t \c changeCols(m, t, \cs cs ++ [c]);
# dropCol removes the named column from t's attributes in m.
let dropCol = \m \t \name changeCols(m, t, \cs (cs where .@item.name != name) rank (:.@));
# alterCol replaces the named column in t's attributes in m.
let alterCol = \m \t \c changeCols(m, t, \cs
    let {old} = cs where .@item.name = c.name;
    cs without old with old +> (@item: old.@item +> c)
);
# renameCol updates the name of the "from" column in t's attributes in m to "to".
let renameCol = \m \t \from \to changeCols(m, t, \cs
    let {old} = cs where .@item.name = from;
    cs without old with old +> (@item: old.@item +> (name: to))
);

# Applies a single table alteration given model, table name and alteration data.
let stepAlt = \m \t \(:type, alteration:alt)
    cond type {
        'add_column': addCol(m, t, alt),
        'drop_column': dropCol(m, t, alt.name),
        'alter_column': alterCol(m, t, alt),
        'rename_column': renameCol(m, t, alt.from, alt.to),
        # 'on_delete':  TODO,
        # 'add_constraint':  TODO,
        # 'drop_constraint':  TODO,
        # 'drop_index':  TODO,
        _: m,
    };

# applies an alter table stamement
let applyAlterTable = \(table_name: t, :alterations) \model
    reduce(alterations, \m \a stepAlt(m, t, a), model);

# applies either a single staement or a list of statements in the given order
let rec applyStmt = \stmt \model
    cond stmt {
        # match against the single statement types
        (stmt: "create_database", data: schema): applyCreateDatabase(schema, model),
        (stmt: "create_table", data: relation):  applyCreateTable(relation, model),
        (stmt: "create_index", data: index):     applyCreateIndex(index, model),
        (stmt: "alter_table", data: alteration): applyAlterTable(alteration, model),
        (stmt: "drop_table", data: name):        applyDropTable(name, model),
        (stmt: "drop_index", data: name):        applyDropIndex(name, model),
        (...):
            # guard against unrecognised statements
            let _ = //log.print($`unknown statement: ${stmt}`);
            model,

        # match against an arrai of statements and recursively apply them in order
        [first, ...rem]: applyStmt(rem, applyStmt(first, model)),
        []:              model,
    };

let emptyModel = (entities: {}, indexes: {}, schema: {});

(
    :grammar,
    macro: (@grammar: grammar, @transform: (ddl: \ast applyStmt(evalDdl(ast), emptyModel))),

    :applyCreateTable,
    :applyAlterTable,
    :applyCreateIndex,
    :applyCreateDatabase,
    :applyDropTable,
    :applyDropIndex,

    # For testing.
    # empty model, use this as the base of an applyStmt call to create a model from a ddl statement
    emptyModel: (entities: {}, indexes: {}, schema: {}),

    # parses a single byte array representing a spanner schema
    :parseDdl,

    # parses a list of schema files. opens the files and calls parseDdl on them in the given order
    :parseSchema,

    # applies a ddl stmt to a model. Use emptyModel to get a model from scratch
    :applyStmt,
)
