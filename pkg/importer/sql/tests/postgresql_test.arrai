let (
    emptyModel: empty,
    :parseDdl,

    :applyCreateTable,
    :applyCreateIndex,
    :applyCreateDatabase,
    :applyAlterTable,
    :applyDropTable,
    :applyDropIndex,
    ...
) = //{/pkg/importer/sql/sql};

let [createTable] = parseDdl('CREATE TABLE foo (a INT PRIMARY KEY);');
let foo = applyCreateTable(createTable.data, empty);

let [addCol] = parseDdl('ALTER TABLE foo ADD COLUMN b INT;');
let foo_b = applyAlterTable(addCol.data, foo);

let [alterCol] = parseDdl('ALTER TABLE foo ALTER COLUMN b SET NOT NULL;');
let foo_b2 = applyAlterTable(alterCol.data, foo_b);

let [dropCol] = parseDdl('ALTER TABLE foo DROP COLUMN b;');
let foo_bx = applyAlterTable(dropCol.data, foo_b2);

let [addIndex] = parseDdl('CREATE INDEX i ON foo (a DESC);');
let foo_i = applyCreateIndex(addIndex.data, foo_bx);

let [dropIndex] = parseDdl('DROP INDEX i;');
let foo_ix = applyDropIndex(dropIndex.data, foo_i);

let [createTableInlinePK] = parseDdl('CREATE TABLE foo (a INT, PRIMARY KEY(a));');

let [renameCol] = parseDdl('ALTER TABLE foo RENAME COLUMN b TO c;');
let foo_c = applyAlterTable(renameCol.data, foo_b);

(
    parseDdl: (
        createTable: createTable = (
            stmt: 'create_table',
            data: (
                name: 'foo',
                attributes: [(name: 'a', type: 'int', length: 0, nullable: true, options: {}, scale: 0)],
                primary_key: ['a'],
                foreign_keys: {},
                unique_keys: {},
                name_prefix: '',
                cluster: {},
            ),
        ),
        createTableInlinePK: createTableInlinePK = createTable,
        addCol: addCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'add_column',
                    alteration: (name: 'b', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
                )],
            ),
        ),
        dropCol: dropCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'drop_column',
                    alteration: (name: 'b'),
                )],
            ),
        ),
        alterCol: alterCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'alter_column',
                    alteration: (name: 'b', nullable: false, options: {}),
                )],
            ),
        ),
        renameCol: renameCol = (
            stmt: 'alter_table',
            data: (
                table_name: 'foo',
                alterations: [(
                    type: 'rename_column',
                    alteration: (from: 'b', to: 'c'),
                )],
            ),
        ),

        commentOnly: parseDdl("-- Foo\n--bar") = {},
        cCommentOnly: parseDdl($`
            /*foo*/
            /*==
             bar
             ==*/`) = {},
        commentCommand: parseDdl("-- use\nSET a = 1") = [{}],
        use: parseDdl("use foo;") = [{}],
        set: parseDdl("set foreign_key_checks=0;") = [{}],
        fk: parseDdl("CREATE TABLE t (x INT, FOREIGN KEY (x) REFERENCES a (b))") = [(
            stmt: 'create_table',
            data: (
                name: 't',
                attributes: [(name: 'x', type: 'int', length: 0, nullable: true, options: {}, scale: 0)],
                primary_key: {},
                foreign_keys: {(
                    constraint_name: {},
                    foreign_keys: {
                        (attribute: 'x', reference_table: 'a', reference_attribute: 'b')
                    },
                    on_delete: {},
                    on_update: {},
                )},
                unique_keys: {},
                name_prefix: '',
                cluster: {},
            ),
        )],
        grant: parseDdl(`GRANT SELECT, INSERT, UPDATE, TRIGGER, REFERENCES
                         ON ALL TABLES IN SCHEMA public TO "foo"`
               ) = [{}],
        insert: parseDdl(`INSERT INTO table (id, foo, bar)
                         VALUES ('str', 1, now() at time zone 'utc')
                        ON CONFLICT (id) DO NOTHING`
               ) = [{}],
    ),

    applyCreateTable: (
        foo: foo.entities = {(
            name: 'foo',
            attributes: [
                (length: 0, name: 'a', nullable: true, options: {}, scale: 0, type: 'int'),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            unique_keys: {},
            name_prefix: '',
            cluster: {},
        )}
    ),

    applyCreateIndex: (
        foo_i: foo_i.indexes = {(
            name: 'i',
            table_name: 'foo',
            key_parts: ['a(desc)'],
            unique: {},
            nullfiltered: {},
            storing_col: {},
            interleaved_table: {},
        )} || foo_i.indexes
    ),
    applyDropIndex: (
        foo: foo.indexes = {}
    ),

    applyAlterTable: (
        addCol: foo_b.entities = {(
            name: 'foo',
            attributes: [
                (name: 'a', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
                (name: 'b', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            unique_keys: {},
            name_prefix: '',
            cluster: {},
        )},

        alterCol: foo_b2.entities = {(
            name: 'foo',
            attributes: [
                (name: 'a', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
                (name: 'b', type: 'int', nullable: false, options: {}, length: 0, scale: 0),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            unique_keys: {},
            name_prefix: '',
            cluster: {},
        )},

        renameCol: foo_c.entities = {(
            name: 'foo',
            attributes: [
                (name: 'a', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
                (name: 'c', type: 'int', nullable: true, options: {}, length: 0, scale: 0),
            ],
            primary_key: ['a'],
            foreign_keys: {},
            unique_keys: {},
            name_prefix: '',
            cluster: {},
        )},

        dropCol: foo_bx = foo,
    ),

    testFile: parseDdl($`${//[//encoding.bytes]{./postgresql/postgresql.sql}}`) count = 9
)
