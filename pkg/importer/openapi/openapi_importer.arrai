let toProto = //{./openapi_to_sysl_proto};
let (:renderAllInOne, ...) = //{/pkg/arrai/sysl-renderer/render_mod};
let (:parseSpecBytes, :baseDir, :baseFile, ...) = //{./util};

let importSpec = \(:appName, ...config) \oapi $`
    ##########################################
    ##                                      ##
    ##  AUTOGENERATED CODE -- DO NOT EDIT!  ##
    ##                                      ##
    ##########################################

    ${renderAllInOne(toProto(config, //{./simplify_oapi}(config, oapi)).oapiToAppMessage(appName))}
` ++ '\n';

let importBytes = \config \bytes importSpec(config, parseSpecBytes(bytes));

let importString = \config \str importBytes(config, <<str>>);

let importSpecFile = \config \filepath
    # FIXME: root needs to be configurable
    let minusCwd = //seq.trim_prefix(//os.cwd, filepath);
    let minusSep = minusCwd -> //seq.trim_prefix(//os.path_separator, .);
    # don't trim separator if we didn't trim the cwd
    let filepath = cond {minusCwd=filepath: filepath, _:minusSep};
    importBytes(config +> (filepath: baseFile(filepath), root: baseDir(filepath)), //os.file(filepath));

(
    :importSpec,
    :importBytes,
    :importString,
    :importSpecFile,
)
