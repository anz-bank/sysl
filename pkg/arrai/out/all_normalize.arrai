(
  alias: {
    |aliasType, appName, typeName|
    (
      (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      ['Types'],
      'AliasForeignRef',
    ),
    (
      (
        appName: ['Types'],
        typePath: ['Type'],
      ),
      ['Types'],
      'AliasRef',
    ),
    (
      (
        primitive: 'INT',
      ),
      ['Types'],
      'Alias',
    ),
    (
      (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      ['Types'],
      'AliasSequence',
    ),
    (
      (
        set: (
          appName: ['RestEndpoint'],
          typePath: ['Type'],
        ),
      ),
      ['Types'],
      'AliasForeignRefSet',
    ),
  },
  anno: (
    app: {
      |appAnnoName, appAnnoValue, appName|
      ('annotation', 'annotation', ['AppWithAnnotation']),
      ('annotation1', 'you can do string annotation like this', ['AppWithAnnotation']),
      ('annotation2', ['or', 'in', 'an', 'array'], ['AppWithAnnotation']),
      ('annotation3', 'you can also do\n multiline annotations\n like this\n', ['AppWithAnnotation']),
    },
    ep: {
      |appName, epAnnoName, epAnnoValue, epName|
      (['EventAndSubscriber'], 'annotations', 'annotation', 'App -> Event'),
      (['SimpleEndpoint'], 'annotation', 'annotation', 'SimpleEpWithAnnotations'),
      (['Statements'], 'annotation1', 'you can do string annotation like this', 'Annotations'),
      (['Statements'], 'annotation2', ['or', 'in', 'an', 'array'], 'Annotations'),
      (['Statements'], 'annotation3', 'you can also do\n multiline annotations\n like this\n', 'Annotations'),
    },
    event: {
      |appName, eventAnnoName, eventAnnoValue, eventName|
      (['EventAndSubscriber'], 'annotations', 'annotation', 'Event'),
    },
    field: {
      |appName, fieldAnnoName, fieldAnnoValue, fieldName, typeName|
      (['Types'], 'annotation', 'this is an annotation', 'with_anno', 'Table'),
      (['Types'], 'annotation', 'this is an annotation', 'with_anno', 'Type'),
    },
    mixin: {},
    param: {},
    stmt: {
      |appName, epName, stmtAnnoName, stmtAnnoValue, stmtIndex|
      (['Statements'], 'AnnotatedStatements', 'annotation', 'annotation can be added for any statement as a string', 0),
      (['Statements'], 'AnnotatedStatements', 'annotation', [['or', 'as', 'an'], ['array', 'of', 'arrays']], 2),
    },
    type: {
      |appName, typeAnnoName, typeAnnoValue, typeName|
      (['Types'], 'annotation', 'annotation', 'Enum'),
      (['Types'], 'annotation', 'annotation', 'Type'),
      (['Types'], 'annotation', 'annotation', 'Union'),
    },
    view: {},
  ),
  app: {
    |appDocstring, appLongName, appName|
    ({}, {}, ['AppWithAnnotation']),
    ({}, {}, ['EventAndSubscriber']),
    ({}, {}, ['RestEndpoint']),
    ({}, {}, ['SimpleEndpoint']),
    ({}, {}, ['Statements']),
    ({}, {}, ['Types']),
    ({}, 'display name', ['App']),
    ({}, 'display name', ['App', 'with', 'subpackages']),
  },
  enum: {
    |appName, enumItems, typeName|
    (
      ['Types'],
      {
        'ENUM_1': 1,
        'ENUM_2': 2,
        'ENUM_3': 3,
      },
      'Enum',
    ),
  },
  ep: {
    |appName, epDocstring, epEvent, epLongName, epName, rest|
    (
      ['EventAndSubscriber'],
      {},
      (
        appName: (
          part: ['App'],
        ),
        eventName: 'Event',
      ),
      {},
      'App -> Event',
      (),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'DELETE /',
      (
        method: 'DELETE',
        path: '/',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'DELETE /param',
      (
        method: 'DELETE',
        path: '/param',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /',
      (
        method: 'GET',
        path: '/',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /nested1/nested2/nested3',
      (
        method: 'GET',
        path: '/nested1/nested2/nested3',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /notnested',
      (
        method: 'GET',
        path: '/notnested',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /param',
      (
        method: 'GET',
        path: '/param',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /pathwithtype/{native}',
      (
        method: 'GET',
        path: '/pathwithtype/{native}',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'GET /query',
      (
        method: 'GET',
        path: '/query',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'PATCH /',
      (
        method: 'PATCH',
        path: '/',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'PATCH /param',
      (
        method: 'PATCH',
        path: '/param',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'POST /',
      (
        method: 'POST',
        path: '/',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'POST /param',
      (
        method: 'POST',
        path: '/param',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'PUT /',
      (
        method: 'PUT',
        path: '/',
      ),
    ),
    (
      ['RestEndpoint'],
      {},
      (),
      {},
      'PUT /param',
      (
        method: 'PUT',
        path: '/param',
      ),
    ),
    (
      ['SimpleEndpoint'],
      {},
      (),
      {},
      'SimpleEp',
      (),
    ),
    (
      ['SimpleEndpoint'],
      {},
      (),
      {},
      'SimpleEpWithAnnotations',
      (),
    ),
    (
      ['SimpleEndpoint'],
      {},
      (),
      {},
      'SimpleEpWithArray',
      (),
    ),
    (
      ['SimpleEndpoint'],
      {},
      (),
      {},
      'SimpleEpWithParamsRef',
      (),
    ),
    (
      ['SimpleEndpoint'],
      {},
      (),
      {},
      'SimpleEpWithTypes',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'AnnotatedStatements',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'Annotations',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'Calls',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'GroupStatements',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'IfStmt',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'Loops',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'Miscellanous',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'OneOfStatements',
      (),
    ),
    (
      ['Statements'],
      {},
      (),
      {},
      'Returns',
      (),
    ),
  },
  event: {
    |appName, eventName|
    (['App'], 'Event'),
    (['EventAndSubscriber'], 'Event'),
    (['EventAndSubscriber'], 'EventWithParams'),
  },
  field: {
    |appName, fieldConstraint, fieldName, fieldOpt, fieldType, typeName|
    (
      ['RestEndpoint'],
      (),
      'x',
      {},
      (
        primitive: 'INT',
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'a',
      {},
      (
        primitive: 'STRING',
      ),
      'Table.inplace',
    ),
    (
      ['Types'],
      (),
      'a',
      {},
      (
        primitive: 'STRING',
      ),
      'Type.inplace',
    ),
    (
      ['Types'],
      (),
      'aliasSequence',
      {},
      (
        appName: ['Types'],
        typePath: ['Alias'],
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'b',
      {},
      (
        primitive: 'INT',
      ),
      'Table.inplace',
    ),
    (
      ['Types'],
      (),
      'b',
      {},
      (
        primitive: 'INT',
      ),
      'Type.inplace',
    ),
    (
      ['Types'],
      (),
      'inplace',
      {},
      (
        appName: ['Types'],
        typePath: ['inplace'],
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'inplace',
      {},
      (
        appName: ['Types'],
        typePath: ['inplace'],
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'nativeTypeField',
      {},
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'nativeTypeField',
      {},
      (
        primitive: 'STRING',
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'optional',
      true,
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'optional',
      true,
      (
        primitive: 'STRING',
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'primaryKey',
      {},
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'reference',
      {},
      (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'reference',
      {},
      (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'sequence',
      {},
      (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'sequence',
      {},
      (
        sequence: (
          primitive: 'STRING',
        ),
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'set',
      {},
      (
        set: (
          primitive: 'STRING',
        ),
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'set',
      {},
      (
        set: (
          primitive: 'STRING',
        ),
      ),
      'Type',
    ),
    (
      ['Types'],
      (),
      'with_anno',
      {},
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
    (
      ['Types'],
      (),
      'with_anno',
      {},
      (
        primitive: 'STRING',
      ),
      'Type',
    ),
    (
      ['Types'],
      (
        length: (
          max: 5,
        ),
      ),
      'string_max_constraint',
      {},
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
    (
      ['Types'],
      (
        length: (
          max: 5,
        ),
        precision: 5,
        scale: 8,
      ),
      'decimal_with_precision',
      {},
      (
        primitive: 'DECIMAL',
      ),
      'Table',
    ),
    (
      ['Types'],
      (
        length: (
          max: 10,
        ),
      ),
      'string_range_constraint',
      {},
      (
        primitive: 'STRING',
      ),
      'Table',
    ),
  },
  mixin: {},
  param: {
    |appName, epName, paramIndex, paramLoc, paramName, paramOpt, paramType|
    (
      ['EventAndSubscriber'],
      'EventWithParams',
      0,
      'method',
      'native',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['RestEndpoint'],
      'DELETE /param',
      0,
      'method',
      'with_string',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (['RestEndpoint'], 'GET /param', 0, 'method', {}, {}, {}),
    (
      ['RestEndpoint'],
      'GET /pathwithtype/{native}',
      0,
      'path',
      'native',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (
      ['RestEndpoint'],
      'GET /query',
      0,
      'query',
      'native',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (['RestEndpoint'], 'GET /query', 1, 'query', 't', {}, {}),
    (
      ['RestEndpoint'],
      'GET /query',
      2,
      'query',
      'curly',
      {},
      (
        appName: ['RestEndpoint'],
        typePath: ['Type'],
      ),
    ),
    (
      ['RestEndpoint'],
      'GET /query',
      3,
      'query',
      'optional',
      true,
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['RestEndpoint'],
      'PATCH /param',
      0,
      'body',
      't',
      {},
      (
        appName: ['Types'],
        typePath: ['Type'],
      ),
    ),
    (
      ['RestEndpoint'],
      'POST /param',
      0,
      'method',
      'native',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['RestEndpoint'],
      'PUT /param',
      0,
      'method',
      'unlimited',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['RestEndpoint'],
      'PUT /param',
      1,
      'method',
      'limited',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['RestEndpoint'],
      'PUT /param',
      2,
      'method',
      'num',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (
      ['RestEndpoint'],
      'PUT /param',
      3,
      'method',
      'limited_num',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (['RestEndpoint'], 'PUT /param', 4, 'method', 'x', {}, {}),
    (
      ['SimpleEndpoint'],
      'SimpleEpWithArray',
      0,
      'method',
      'unlimited',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['SimpleEndpoint'],
      'SimpleEpWithArray',
      1,
      'method',
      'limited',
      {},
      (
        primitive: 'STRING',
      ),
    ),
    (
      ['SimpleEndpoint'],
      'SimpleEpWithArray',
      2,
      'method',
      'num',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (
      ['SimpleEndpoint'],
      'SimpleEpWithArray',
      3,
      'method',
      'limited_num',
      {},
      (
        primitive: 'INT',
      ),
    ),
    (['SimpleEndpoint'], 'SimpleEpWithArray', 4, 'method', 'x', {}, {}),
    (['SimpleEndpoint'], 'SimpleEpWithParamsRef', 0, 'method', 'Types.type', {}, {}),
    (
      ['SimpleEndpoint'],
      'SimpleEpWithTypes',
      0,
      'method',
      'native',
      {},
      (
        primitive: 'STRING',
      ),
    ),
  },
  src: (
    app: {
      |appName, appSrc, appSrcs|
      (
        ['App'],
        (
          end: (
            col: 30,
            line: 2,
          ),
          file: 'all.sysl',
          start: (
            line: 2,
          ),
        ),
        [
          (
            end: (
              col: 30,
              line: 2,
            ),
            file: 'all.sysl',
            start: (
              line: 2,
            ),
          ),
        ],
      ),
      (
        ['App', 'with', 'subpackages'],
        (
          end: (
            col: 41,
            line: 15,
          ),
          file: 'all.sysl',
          start: (
            line: 15,
          ),
        ),
        [
          (
            end: (
              col: 41,
              line: 15,
            ),
            file: 'all.sysl',
            start: (
              line: 15,
            ),
          ),
        ],
      ),
      (
        ['AppWithAnnotation'],
        (
          end: (
            col: 5,
            line: 13,
          ),
          file: 'all.sysl',
          start: (
            line: 5,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 13,
            ),
            file: 'all.sysl',
            start: (
              line: 5,
            ),
          ),
        ],
      ),
      (
        ['EventAndSubscriber'],
        (
          end: (
            col: 11,
            line: 265,
          ),
          file: 'all.sysl',
          start: (
            line: 251,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 265,
            ),
            file: 'all.sysl',
            start: (
              line: 251,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        (
          end: (
            col: 15,
            line: 89,
          ),
          file: 'all.sysl',
          start: (
            line: 36,
          ),
        ),
        [
          (
            end: (
              col: 15,
              line: 89,
            ),
            file: 'all.sysl',
            start: (
              line: 36,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        (
          end: (
            col: 11,
            line: 34,
          ),
          file: 'all.sysl',
          start: (
            line: 18,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 34,
            ),
            file: 'all.sysl',
            start: (
              line: 18,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        (
          end: (
            col: 34,
            line: 229,
          ),
          file: 'all.sysl',
          start: (
            line: 150,
          ),
        ),
        [
          (
            end: (
              col: 34,
              line: 229,
            ),
            file: 'all.sysl',
            start: (
              line: 150,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        (
          end: (
            col: 11,
            line: 150,
          ),
          file: 'all.sysl',
          start: (
            line: 91,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 150,
            ),
            file: 'all.sysl',
            start: (
              line: 91,
            ),
          ),
        ],
      ),
    },
    ep: {
      |appName, epName, epSrc, epSrcs|
      (
        ['EventAndSubscriber'],
        'App -> Event',
        (
          end: (
            col: 5,
            line: 267,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 263,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 267,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 263,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'DELETE /',
        (
          end: (
            col: 5,
            line: 52,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 49,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 52,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 49,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'DELETE /param',
        (
          end: (
            col: 6,
            line: 91,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 88,
          ),
        ),
        [
          (
            end: (
              col: 6,
              line: 91,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 88,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /',
        (
          end: (
            col: 9,
            line: 43,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 41,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 43,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 41,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /nested1/nested2/nested3',
        (
          end: (
            col: 5,
            line: 58,
          ),
          file: 'all.sysl',
          start: (
            col: 16,
            line: 55,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 58,
            ),
            file: 'all.sysl',
            start: (
              col: 16,
              line: 55,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /notnested',
        (
          end: (
            col: 5,
            line: 64,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 59,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 64,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 59,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /param',
        (
          end: (
            col: 9,
            line: 77,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 74,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 77,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 74,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /pathwithtype/{native}',
        (
          end: (
            col: 5,
            line: 68,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 65,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 68,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 65,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'GET /query',
        (
          end: (
            col: 5,
            line: 72,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 69,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 72,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 69,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'PATCH /',
        (
          end: (
            col: 9,
            line: 49,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 47,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 49,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 47,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'PATCH /param',
        (
          end: (
            col: 9,
            line: 82,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 77,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 82,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 77,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'POST /',
        (
          end: (
            col: 9,
            line: 45,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 43,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 45,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 43,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'POST /param',
        (
          end: (
            col: 9,
            line: 85,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 82,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 85,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 82,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'PUT /',
        (
          end: (
            col: 9,
            line: 47,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 45,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 47,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 45,
            ),
          ),
        ],
      ),
      (
        ['RestEndpoint'],
        'PUT /param',
        (
          end: (
            col: 9,
            line: 88,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 85,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 88,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 85,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        'SimpleEp',
        (
          end: (
            col: 11,
            line: 20,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 19,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 20,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 19,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        'SimpleEpWithAnnotations',
        (
          end: (
            col: 11,
            line: 34,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 33,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 34,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 33,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        'SimpleEpWithArray',
        (
          end: (
            col: 11,
            line: 31,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 30,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 31,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 30,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        'SimpleEpWithParamsRef',
        (
          end: (
            col: 11,
            line: 23,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 22,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 23,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 22,
            ),
          ),
        ],
      ),
      (
        ['SimpleEndpoint'],
        'SimpleEpWithTypes',
        (
          end: (
            col: 11,
            line: 28,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 27,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 28,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 27,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'AnnotatedStatements',
        (
          end: (
            col: 78,
            line: 224,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 221,
          ),
        ),
        [
          (
            end: (
              col: 78,
              line: 224,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 221,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'Annotations',
        (
          end: (
            col: 5,
            line: 221,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 213,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 221,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 213,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'Calls',
        (
          end: (
            col: 34,
            line: 192,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 187,
          ),
        ),
        [
          (
            end: (
              col: 34,
              line: 192,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 187,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'GroupStatements',
        (
          end: (
            col: 31,
            line: 211,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 208,
          ),
        ),
        [
          (
            end: (
              col: 31,
              line: 211,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 208,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'IfStmt',
        (
          end: (
            col: 15,
            line: 160,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 151,
          ),
        ),
        [
          (
            end: (
              col: 15,
              line: 160,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 151,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'Loops',
        (
          end: (
            col: 15,
            line: 180,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 162,
          ),
        ),
        [
          (
            end: (
              col: 15,
              line: 180,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 162,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'Miscellanous',
        (
          end: (
            col: 34,
            line: 229,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 226,
          ),
        ),
        [
          (
            end: (
              col: 34,
              line: 229,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 226,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'OneOfStatements',
        (
          end: (
            col: 38,
            line: 206,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 194,
          ),
        ),
        [
          (
            end: (
              col: 38,
              line: 206,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 194,
            ),
          ),
        ],
      ),
      (
        ['Statements'],
        'Returns',
        (
          end: (
            col: 34,
            line: 185,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 182,
          ),
        ),
        [
          (
            end: (
              col: 34,
              line: 185,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 182,
            ),
          ),
        ],
      ),
    },
    event: {
      |appName, eventName, eventSrc, eventSrcs|
      (['App'], 'Event', {}, {}),
      (
        ['EventAndSubscriber'],
        'Event',
        (
          end: (
            col: 5,
            line: 259,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 252,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 259,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 252,
            ),
          ),
        ],
      ),
      (
        ['EventAndSubscriber'],
        'EventWithParams',
        (
          end: (
            col: 5,
            line: 263,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 259,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 263,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 259,
            ),
          ),
        ],
      ),
    },
    field: {
      |appName, fieldName, fieldSrc, fieldSrcs, typeName|
      (
        ['RestEndpoint'],
        'x',
        (
          end: (
            col: 16,
            line: 38,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 38,
          ),
        ),
        [
          (
            end: (
              col: 16,
              line: 38,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 38,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'a',
        (
          end: (
            col: 23,
            line: 104,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 104,
          ),
        ),
        [
          (
            end: (
              col: 23,
              line: 104,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 104,
            ),
          ),
        ],
        'Type.inplace',
      ),
      (
        ['Types'],
        'a',
        (
          end: (
            col: 23,
            line: 120,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 120,
          ),
        ),
        [
          (
            end: (
              col: 23,
              line: 120,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 120,
            ),
          ),
        ],
        'Table.inplace',
      ),
      (
        ['Types'],
        'aliasSequence',
        (
          end: (
            col: 30,
            line: 100,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 100,
          ),
        ),
        [
          (
            end: (
              col: 30,
              line: 100,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 100,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'b',
        (
          end: (
            col: 20,
            line: 105,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 105,
          ),
        ),
        [
          (
            end: (
              col: 20,
              line: 105,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 105,
            ),
          ),
        ],
        'Type.inplace',
      ),
      (
        ['Types'],
        'b',
        (
          end: (
            col: 20,
            line: 121,
          ),
          file: 'all.sysl',
          start: (
            col: 12,
            line: 121,
          ),
        ),
        [
          (
            end: (
              col: 20,
              line: 121,
            ),
            file: 'all.sysl',
            start: (
              col: 12,
              line: 121,
            ),
          ),
        ],
        'Table.inplace',
      ),
      (
        ['Types'],
        'decimal_with_precision',
        (
          end: (
            col: 46,
            line: 116,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 116,
          ),
        ),
        [
          (
            end: (
              col: 46,
              line: 116,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 116,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'inplace',
        (
          end: (
            col: 5,
            line: 107,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 103,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 107,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 103,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'inplace',
        (
          end: (
            col: 5,
            line: 123,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 119,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 123,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 119,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'nativeTypeField',
        (
          end: (
            col: 33,
            line: 95,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 95,
          ),
        ),
        [
          (
            end: (
              col: 33,
              line: 95,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 95,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'nativeTypeField',
        (
          end: (
            col: 33,
            line: 109,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 109,
          ),
        ),
        [
          (
            end: (
              col: 33,
              line: 109,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 109,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'optional',
        (
          end: (
            col: 27,
            line: 97,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 97,
          ),
        ),
        [
          (
            end: (
              col: 27,
              line: 97,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 97,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'optional',
        (
          end: (
            col: 27,
            line: 111,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 111,
          ),
        ),
        [
          (
            end: (
              col: 27,
              line: 111,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 111,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'primaryKey',
        (
          end: (
            col: 34,
            line: 108,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 108,
          ),
        ),
        [
          (
            end: (
              col: 34,
              line: 108,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 108,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'reference',
        (
          end: (
            col: 38,
            line: 96,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 96,
          ),
        ),
        [
          (
            end: (
              col: 38,
              line: 96,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 96,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'reference',
        (
          end: (
            col: 38,
            line: 110,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 110,
          ),
        ),
        [
          (
            end: (
              col: 38,
              line: 110,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 110,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'sequence',
        (
          end: (
            col: 38,
            line: 99,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 99,
          ),
        ),
        [
          (
            end: (
              col: 38,
              line: 99,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 99,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'sequence',
        (
          end: (
            col: 38,
            line: 113,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 113,
          ),
        ),
        [
          (
            end: (
              col: 38,
              line: 113,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 113,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'set',
        (
          end: (
            col: 28,
            line: 98,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 98,
          ),
        ),
        [
          (
            end: (
              col: 28,
              line: 98,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 98,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'set',
        (
          end: (
            col: 28,
            line: 112,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 112,
          ),
        ),
        [
          (
            end: (
              col: 28,
              line: 112,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 112,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'string_max_constraint',
        (
          end: (
            col: 42,
            line: 117,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 117,
          ),
        ),
        [
          (
            end: (
              col: 42,
              line: 117,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 117,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'string_range_constraint',
        (
          end: (
            col: 48,
            line: 118,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 118,
          ),
        ),
        [
          (
            end: (
              col: 48,
              line: 118,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 118,
            ),
          ),
        ],
        'Table',
      ),
      (
        ['Types'],
        'with_anno',
        (
          end: (
            col: 9,
            line: 103,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 101,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 103,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 101,
            ),
          ),
        ],
        'Type',
      ),
      (
        ['Types'],
        'with_anno',
        (
          end: (
            col: 9,
            line: 116,
          ),
          file: 'all.sysl',
          start: (
            col: 8,
            line: 114,
          ),
        ),
        [
          (
            end: (
              col: 9,
              line: 116,
            ),
            file: 'all.sysl',
            start: (
              col: 8,
              line: 114,
            ),
          ),
        ],
        'Table',
      ),
    },
    mixin: {},
    param: {
      |appName, epName, paramName, paramSrc, paramSrcs|
      (['EventAndSubscriber'], 'EventWithParams', 'native', {}, {}),
      (['RestEndpoint'], 'DELETE /param', 'with_string', {}, {}),
      (['RestEndpoint'], 'GET /param', {}, {}, {}),
      (['RestEndpoint'], 'GET /pathwithtype/{native}', 'native', {}, {}),
      (['RestEndpoint'], 'GET /query', 'curly', {}, {}),
      (['RestEndpoint'], 'GET /query', 'native', {}, {}),
      (['RestEndpoint'], 'GET /query', 'optional', {}, {}),
      (['RestEndpoint'], 'GET /query', 't', {}, {}),
      (['RestEndpoint'], 'PATCH /param', 't', {}, {}),
      (['RestEndpoint'], 'POST /param', 'native', {}, {}),
      (['RestEndpoint'], 'PUT /param', 'limited', {}, {}),
      (['RestEndpoint'], 'PUT /param', 'limited_num', {}, {}),
      (['RestEndpoint'], 'PUT /param', 'num', {}, {}),
      (['RestEndpoint'], 'PUT /param', 'unlimited', {}, {}),
      (['RestEndpoint'], 'PUT /param', 'x', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', 'limited', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', 'limited_num', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', 'num', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', 'unlimited', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', 'x', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithParamsRef', 'Types.type', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithTypes', 'native', {}, {}),
    },
    stmt: {
      |appName, epName, stmtSrc, stmtSrcs|
      (['EventAndSubscriber'], 'App -> Event', {}, {}),
      (['RestEndpoint'], 'DELETE /', {}, {}),
      (['RestEndpoint'], 'DELETE /param', {}, {}),
      (['RestEndpoint'], 'GET /', {}, {}),
      (['RestEndpoint'], 'GET /nested1/nested2/nested3', {}, {}),
      (['RestEndpoint'], 'GET /notnested', {}, {}),
      (['RestEndpoint'], 'GET /param', {}, {}),
      (['RestEndpoint'], 'GET /pathwithtype/{native}', {}, {}),
      (['RestEndpoint'], 'GET /query', {}, {}),
      (['RestEndpoint'], 'PATCH /', {}, {}),
      (['RestEndpoint'], 'PATCH /param', {}, {}),
      (['RestEndpoint'], 'POST /', {}, {}),
      (['RestEndpoint'], 'POST /param', {}, {}),
      (['RestEndpoint'], 'PUT /', {}, {}),
      (['RestEndpoint'], 'PUT /param', {}, {}),
      (['SimpleEndpoint'], 'SimpleEp', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithAnnotations', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithArray', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithParamsRef', {}, {}),
      (['SimpleEndpoint'], 'SimpleEpWithTypes', {}, {}),
      (['Statements'], 'AnnotatedStatements', {}, {}),
      (['Statements'], 'Calls', {}, {}),
      (['Statements'], 'GroupStatements', {}, {}),
      (['Statements'], 'IfStmt', {}, {}),
      (['Statements'], 'Loops', {}, {}),
      (['Statements'], 'Miscellanous', {}, {}),
      (['Statements'], 'OneOfStatements', {}, {}),
      (['Statements'], 'Returns', {}, {}),
    },
    type: {
      |appName, typeName, typeSrc, typeSrcs|
      (
        ['RestEndpoint'],
        'Type',
        (
          end: (
            col: 16,
            line: 38,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 37,
          ),
        ),
        [
          (
            end: (
              col: 16,
              line: 38,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 37,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'Alias',
        (
          end: (
            col: 5,
            line: 138,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 135,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 138,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 135,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'AliasForeignRef',
        (
          end: (
            col: 5,
            line: 147,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 144,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 147,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 144,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'AliasForeignRefSet',
        (
          end: (
            col: 11,
            line: 150,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 147,
          ),
        ),
        [
          (
            end: (
              col: 11,
              line: 150,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 147,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'AliasRef',
        (
          end: (
            col: 5,
            line: 144,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 141,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 144,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 141,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'AliasSequence',
        (
          end: (
            col: 5,
            line: 141,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 138,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 141,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 138,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'Enum',
        (
          end: (
            col: 5,
            line: 128,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 123,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 128,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 123,
            ),
          ),
        ],
      ),
      (
        ['Types'],
        'Table',
        (
          end: (
            col: 20,
            line: 121,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 107,
          ),
        ),
        [
          (
            end: (
              col: 20,
              line: 121,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 107,
            ),
          ),
        ],
      ),
      (['Types'], 'Table.inplace', {}, {}),
      (
        ['Types'],
        'Type',
        (
          end: (
            col: 20,
            line: 105,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 92,
          ),
        ),
        [
          (
            end: (
              col: 20,
              line: 105,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 92,
            ),
          ),
        ],
      ),
      (['Types'], 'Type.inplace', {}, {}),
      (
        ['Types'],
        'Union',
        (
          end: (
            col: 5,
            line: 135,
          ),
          file: 'all.sysl',
          start: (
            col: 4,
            line: 128,
          ),
        ),
        [
          (
            end: (
              col: 5,
              line: 135,
            ),
            file: 'all.sysl',
            start: (
              col: 4,
              line: 128,
            ),
          ),
        ],
      ),
    },
    view: {},
  ),
  stmt: {
    |appName, epName, stmtAction, stmtAlt, stmtCall, stmtCond, stmtForeach, stmtGroup, stmtIndex, stmtLoop, stmtLoopN, stmtParent, stmtRet|
    (
      ['Statements'],
      'AnnotatedStatements',
      {},
      (),
      (),
      (),
      (),
      (),
      1,
      (),
      (),
      (),
      (
        attr: (
          modifier: {},
          nvp: {
            'annotation': (
              a: ['as', 'an', 'array'],
            ),
          },
        ),
        type: (
          primitive: 'string',
        ),
      ),
    ),
    (
      ['Statements'],
      'AnnotatedStatements',
      {},
      (),
      (
        appName: ['Statements'],
        epName: 'Miscellanous',
      ),
      (),
      (),
      (),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'AnnotatedStatements',
      '"statement"',
      (),
      (),
      (),
      (),
      (),
      2,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Calls',
      {},
      (),
      (
        appName: ['RestEndpoint'],
        epName: 'GET /param',
      ),
      (),
      (),
      (),
      1,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Calls',
      {},
      (),
      (
        appName: ['Statements'],
        epName: 'Returns',
      ),
      (),
      (),
      (),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'GroupStatements',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'grouped',
      ),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'IfStmt',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'else',
      ),
      2,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'IfStmt',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'else if predicate2',
      ),
      1,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'IfStmt',
      {},
      (),
      (),
      (
        test: 'predicate1',
      ),
      (),
      (),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (),
      (),
      1,
      (
        criterion: 'predicate',
        mode: 'UNTIL',
      ),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (),
      (),
      5,
      (
        criterion: 'predicate',
        mode: 'WHILE',
      ),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'alt predicate',
      ),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'for predicate',
      ),
      3,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (),
      (
        title: 'loop predicate',
      ),
      4,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Loops',
      {},
      (),
      (),
      (),
      (
        coll: 'predicate',
      ),
      (),
      2,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Miscellanous',
      '"string statements"',
      (),
      (),
      (),
      (),
      (),
      1,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Miscellanous',
      'SimpleEndpoint -> SimpleEp',
      (),
      (),
      (),
      (),
      (),
      2,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Miscellanous',
      '| you can add comments like this',
      (),
      (),
      (),
      (),
      (),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'OneOfStatements',
      {},
      (
        choice: [
          (
            cond: 'case1',
            stmt: [
              (
                ret: (
                  payload: 'ok <: string',
                ),
                source_context: (
                  end: (
                    col: 35,
                    line: 198,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 198,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 35,
                      line: 198,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 198,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            cond: 'case number 2',
            stmt: [
              (
                ret: (
                  payload: 'ok <: int',
                ),
                source_context: (
                  end: (
                    col: 32,
                    line: 201,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 201,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 32,
                      line: 201,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 201,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            cond: '"case 3"',
            stmt: [
              (
                ret: (
                  payload: 'ok <: Types.Type',
                ),
                source_context: (
                  end: (
                    col: 39,
                    line: 204,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 204,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 39,
                      line: 204,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 204,
                    ),
                  ),
                ],
              ),
            ],
          ),
          (
            stmt: [
              (
                ret: (
                  payload: 'error <: string',
                ),
                source_context: (
                  end: (
                    col: 38,
                    line: 206,
                  ),
                  file: 'all.sysl',
                  start: (
                    col: 16,
                    line: 206,
                  ),
                ),
                source_contexts: [
                  (
                    end: (
                      col: 38,
                      line: 206,
                    ),
                    file: 'all.sysl',
                    start: (
                      col: 16,
                      line: 206,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
      (),
      (),
      (),
      (),
      0,
      (),
      (),
      (),
      (),
    ),
    (
      ['Statements'],
      'Returns',
      {},
      (),
      (),
      (),
      (),
      (),
      0,
      (),
      (),
      (),
      (
        attr: (
          modifier: {},
          nvp: {},
        ),
        type: (
          primitive: 'string',
        ),
      ),
    ),
    (
      ['Statements'],
      'Returns',
      {},
      (),
      (),
      (),
      (),
      (),
      1,
      (),
      (),
      (),
      (
        attr: (
          modifier: {},
          nvp: {},
        ),
        type: (
          appName: ['Types'],
          typePath: ['Type'],
        ),
      ),
    ),
    (
      ['Statements'],
      'Returns',
      {},
      (),
      (),
      (),
      (),
      (),
      2,
      (),
      (),
      (),
      (
        attr: (
          modifier: {},
          nvp: {},
        ),
        type: (
          appName: ['Types'],
          typePath: ['Type'],
        ),
      ),
    ),
  },
  table: {
    |appName, pk, typeName|
    (['Types'], ['primaryKey'], 'Table'),
  },
  tag: (
    app: {
      |appName, appTag|
      (['App'], 'abstract'),
    },
    ep: {
      |appName, epName, epTag|
      (['RestEndpoint'], 'DELETE /', 'rest'),
      (['RestEndpoint'], 'DELETE /param', 'rest'),
      (['RestEndpoint'], 'GET /', 'rest'),
      (['RestEndpoint'], 'GET /nested1/nested2/nested3', 'rest'),
      (['RestEndpoint'], 'GET /notnested', 'rest'),
      (['RestEndpoint'], 'GET /param', 'rest'),
      (['RestEndpoint'], 'GET /pathwithtype/{native}', 'rest'),
      (['RestEndpoint'], 'GET /query', 'rest'),
      (['RestEndpoint'], 'PATCH /', 'rest'),
      (['RestEndpoint'], 'PATCH /param', 'rest'),
      (['RestEndpoint'], 'POST /', 'rest'),
      (['RestEndpoint'], 'POST /param', 'rest'),
      (['RestEndpoint'], 'PUT /', 'rest'),
      (['RestEndpoint'], 'PUT /param', 'rest'),
    },
    event: {},
    field: {
      |appName, fieldName, fieldTag, typeName|
      (['Types'], 'primaryKey', 'pk', 'Table'),
    },
    mixin: {},
    param: {
      |appName, epName, paramName, paramTag|
      (['RestEndpoint'], 'PATCH /param', 't', 'body'),
    },
    stmt: {},
    type: {
      |appName, typeName, typeTag|
      (['Types'], 'Enum', 'tag'),
      (['Types'], 'Table', 'tag'),
    },
    view: {},
  ),
  type: {
    |appName, typeDocstring, typeName, typeOpt|
    (['RestEndpoint'], {}, 'Type', {}),
    (['Types'], {}, 'Alias', {}),
    (['Types'], {}, 'AliasForeignRef', {}),
    (['Types'], {}, 'AliasForeignRefSet', {}),
    (['Types'], {}, 'AliasRef', {}),
    (['Types'], {}, 'AliasSequence', {}),
    (['Types'], {}, 'Enum', {}),
    (['Types'], {}, 'Table', {}),
    (['Types'], {}, 'Table.inplace', {}),
    (['Types'], {}, 'Type', {}),
    (['Types'], {}, 'Type.inplace', {}),
    (['Types'], {}, 'Union', {}),
  },
  view: {},
)
