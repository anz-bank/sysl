let (:annotations, :tags, :annoRel, :tagRel,
     :loadBytes, :polish, :normalize, :newNormalize, ...) = //{./sysl};

let _model = loadBytes(//[//encoding.bytes]{./out/model.pb});

let _app = (
    appName: 'App',
    attrs: {
        'foo': (s: 'bar'),
        'patterns': (a: (elt: [(s: 'db')])),
    },
);

(
    annotations: (
        empty: annotations(()) = {},
        string: annotations((attrs: {'foo': (s: 'bar')})) = {'foo': 'bar'},
        array: annotations((attrs: {'foo': (a: (elt: [(s: 'bar')]))})) = {'foo': ['bar']},
        arrayOfArrays:
            let result = annotations(
                (attrs:
                    {'foo':
                        (a: (elt: [
                            (a: (elt: [
                                (s: 'bar')
                            ]))
                        ]))
                    }
                )
            );
            let expected = {'foo': [['bar']]};
            //test.assert.equal(expected, result),
        item: annotations( (@:0, @item:(attrs: {'foo': (s: 'bar')})) ) = {'foo': 'bar'}
    ),
    tags: (
        empty: tags(()) = {},
        array: tags((attrs: {'patterns': (a: (elt: [(s: 'bar')]))})) = {'bar'},
    ),
    annoRel: (
        empty: //test.assert.equal({},annoRel('app', {})),
        single:
            let expected = {(appName: 'App', appAnnoName: 'foo', appAnnoValue: 'bar')};
            let result = annoRel('app', {(appName: 'App', app: _app)});
            //test.assert.equal(expected, result),
        statement:
            let expected = {(appName: ['App'], epName: 'ep', stmtAnnoName: 'foo', stmtAnnoValue: 'bar', stmtIndex: 0)};
            let rel = { (appName: ['App'], epName: 'ep', stmt: (@: 0, @item: (attrs: {'foo': (s: 'bar')} ) )) };
            let result = annoRel('stmt', rel);
            //test.assert.equal(expected, result),
    ),
    tagRel: (
        empty: tagRel('app', {}) = {},
        single: tagRel('app', {(appName: 'App', app: _app)}) =
             {(appName: 'App', appTag: 'db')},
    ),

    polish: (
        idempotent:
            let expected = polish(_model);
            let result = polish(polish(_model));
            //test.assert.equal(expected, result),
    ),
    normalize: (
        model:
            let result = normalize(_model);
            //test.assert.unequal((), result),
    ),
    newNormalize: (
        model:
            let result = newNormalize(_model);
            //test.assert.unequal((), result),
        all:
            let _all = loadBytes(//[//encoding.bytes]{./out/all.pb});
            let expected = //{./out/all_normalize};
            let result = newNormalize(_all);
            # //test.assert.equal(expected, result),
            true
    ),
)
