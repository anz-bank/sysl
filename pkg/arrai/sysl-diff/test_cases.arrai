let fakeSrc = (
    end: (
        col: 1,
        line: 1,
    ),
    file: 'test.sysl',
    start: (
        col: 1,
        line: 3,
    ),
);

let model = (
    anno: (
        app: {
            |appName, appAnnoName, appAnnoValue|
            (['part1', 'part2', 'part3'], 'app', 'annotation')
        },
        ep: {
            |appName, epName, epAnnoName, epAnnoValue|
            (['part1', 'part2', 'part3'], 'simple', 'ep', 'annotation')
        },
        event: {
            |appName, eventName, eventAnnoName, eventAnnoValue|
            (['part1', 'part2', 'part3'], 'event', 'event', 'annotation')
        },
        field: {
            |appName, typeName, fieldName, fieldAnnoName, fieldAnnoValue|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', 'field', 'annotation')
        },
        mixin: {
            |appName, mixinName, mixinAnnoName, mixinAnnoValue|
            (['part1', 'part2', 'part3'], 'mixin', 'mixin', 'annotation')
        },
        param: {
            |appName, epName, paramIndex, paramName, paramAnnoName, paramAnnoValue|
            (['part1', 'part2', 'part3'], 'simple', 0, 'x', 'param', 'annotation')
        },
        stmt: {
            # |appName, epName, stmt, stmtAnnoName, stmtAnnovalue|
            # ()
            # TODO: annotations on stmt currently do not work
        },
        type: {
            |appName, typeName, typeAnnoName, typeAnnoValue|
            (['part1', 'part2', 'part3'], 'Type', 'type', 'annotation')
        },
        view: {
            |appName, viewName, viewAnnoName, viewAnnoValue|
            (['part1', 'part2', 'part3'], 'view', 'view', 'annotation')
        },
    ),
    src: (
        app: {
            |appName, appSrc|
            (['part1', 'part2', 'part3'], fakeSrc)
        },
        ep: {
            |appName, epName, epSrc|
            (['part1', 'part2', 'part3'], 'simple', fakeSrc)
        },
        event: {
            |appName, eventName, eventSrc|
            (['part1', 'part2', 'part3'], 'event', fakeSrc)
        },
        field: {
            |appName, typeName, fieldName, fieldSrc|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', fakeSrc)
        },
        mixin: {
            |appName, mixinName, mixinSrc|
            (['part1', 'part2', 'part3'], 'mixin', fakeSrc)
        },
        param: {
            |appName, epName, paramName, paramSrc|
            (['part1', 'part2', 'part3'], 'simple', 'x', fakeSrc)
        },
        stmt: {
            # FIXME: no example on stmt src
            |appName, epName, stmtSrc|
            (['part1', 'part2', 'part3'], 'simple', fakeSrc)
        },
        type: {
            |appName, typeName, typeSrc|
            (['part1', 'part2', 'part3'], 'Type', fakeSrc)
        },
        view: {
            |appName, viewName, viewSrc|
            (['part1', 'part2', 'part3'], 'view', fakeSrc)
        },
    ),
    tag: (
        app: {
            |appName, appTag|
            (['part1', 'part2', 'part3'], 'tag')
        },
        ep: {
            |appName, epName, epTag|
            (['part1', 'part2', 'part3'], 'simple', 'tag')
        },
        event: {
            |appName, eventName, eventTag|
            (['part1', 'part2', 'part3'], 'event', 'tag')
        },
        field: {
            |appName, typeName, fieldName, fieldTag|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', 'tag')
        },
        mixin: {
            |appName, mixinName, mixinTag|
            (['part1', 'part2', 'part3'], 'mixin', 'tag')
        },
        param: {
            |appName, epName, paramName, paramTag|
            (['part1', 'part2', 'part3'], 'simple', 'x', 'tag')
        },
        stmt: {
            # |appName, epName, stmt, stmtTag|
            # ()
            # TODO: tags on stmt currently do not work
        },
        type: {
            |appName, typeName, typeTag|
            (['part1', 'part2', 'part3'], 'Type', 'tag')
        },
        view: {
            |appName, viewName, viewTag|
            (['part1', 'part2', 'part3'], 'view', 'tag')
        },
    ),
    app: {
        |appName, appLongName, appDocstring|
        (['part1', 'part2', 'part3'], 'long name', 'docstring'),
    },
    enum: {
        |appName, typeName, enumItems|
        (['part1', 'part2', 'part3'], 'Enum', {'ITEM_1': 1, 'ITEM_2': 2})
    },
    ep: {
        |appName, epname, epLongName, epDocstring, epEvent, rest|
        (['part1', 'part2', 'part3'], 'GET rest/', 'get_rest', 'doc', false, true),
        (['part1', 'part2', 'part3'], 'simple', 'simple', 'doc', false, false),
        (['part1', 'part2', 'part3'], 'event -> simple', 'event', 'doc', (appName: 'event', eventName: 'simple'), false),
    },
    event: {
        |appName, eventName|
        (['part1', 'part2', 'part3'], 'event')
    },
    field: {
        |appName, typeName, fieldName, fieldOpt, fieldType, fieldConstraint|
        (['part1', 'part2', 'part3'], 'Type', 'Field1', true, (primitive: 'INT'), ()),
        (['part1', 'part2', 'part3'], 'Type', 'Field2', true, (primitive: 'STRING'), ()),
        (['part1', 'part2', 'part3'], 'Type', 'Field3', false, (primitive: 'STRING'), ()),
    },
    mixin: {
        |appName, mixinName|
        (['part1', 'part2', 'part3'], 'mixin')
    },
    param: {
        |appName, epName, paramName, paramLoc, paramIndex, paramType, paramOpt|
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'method', 0, (primitive: 'INT'), true),
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'method', 1, (primitive: 'INT'), false),
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'path', 0, (primitive: 'INT'), true),
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'path', 1, (primitive: 'INT'), false),
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'query', 0, (primitive: 'INT'), true),
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'query', 1, (primitive: 'INT'), false),
    },
    stmt: {
        |appName, epName, stmtIndex, stmtParent, stmtAction, stmtCall, stmtCond, stmtLoop, stmtLoopN, stmtForeach, stmtAlt, stmtGroup, stmtRet|
        (['part1', 'part2', 'part3'], 'simple', 0, {}, {}, (appName: ['part1', 'part2', 'part3'], epName: 'simple'), {}, {}, {}, {}, {}, {}, {})
    },
    table: {
        |appName, typeName, pk|
        (['part1', 'part2', 'part3'], 'Table', ['Field1'])
    },
    type: {
        |appName, typeName, typeDocstring, typeOpt|
        (['part1', 'part2', 'part3'], 'Table', 'doc', false),
        (['part1', 'part2', 'part3'], 'Enum', 'doc', false),
        (['part1', 'part2', 'part3'], 'Type', 'doc', false),
    },
    view: {
        |appName, viewName, viewType|
        (['part1', 'part2', 'part3'], 'view', 'INT'),
    },
    alias: {
        |appName, typeName, aliasType|
        (['part1', 'part2', 'part3'], 'alias', 'INT'),
    },
);

let modSrc = (
    end: (
        col: 2,
        line: 100,
    ),
    file: 'changed.sysl',
    start: (
        col: 3,
        line: 500,
    ),
);

let modified = (
    anno: (
        app: {
            |appName, appAnnoName, appAnnoValue|
            (['part1', 'part2', 'part3'], 'app', 'changed')
        },
        ep: {
            |appName, epName, epAnnoName, epAnnoValue|
            (['part1', 'part2', 'part3'], 'simple', 'ep', 'changed')
        },
        event: {
            |appName, eventName, eventAnnoName, eventAnnoValue|
            (['part1', 'part2', 'part3'], 'event', 'event', 'changed')
        },
        field: {
            |appName, typeName, fieldName, fieldAnnoName, fieldAnnoValue|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', 'field', 'changed')
        },
        mixin: {
            |appName, mixinName, mixinAnnoName, mixinAnnoValue|
            (['part1', 'part2', 'part3'], 'mixin', 'mixin', 'changed')
        },
        param: {
            |appName, epName, paramIndex, paramName, paramAnnoName, paramAnnoValue|
            (['part1', 'part2', 'part3'], 'simple', 0, 'x', 'param', 'changed')
        },
        stmt: {
            # |appName, epName, stmt, stmtAnnoName, stmtAnnovalue|
            # ()
            # TODO: annotations on stmt currently do not work
        },
        type: {
            |appName, typeName, typeAnnoName, typeAnnoValue|
            (['part1', 'part2', 'part3'], 'Type', 'type', 'changed')
        },
        view: {
            |appName, viewName, viewAnnoName, viewAnnoValue|
            (['part1', 'part2', 'part3'], 'view', 'view', 'changed')
        },
    ),
    src: (
        app: {
            |appName, appSrc|
            (['part1', 'part2', 'part3'], modSrc)
        },
        ep: {
            |appName, epName, epSrc|
            (['part1', 'part2', 'part3'], 'simple', modSrc)
        },
        event: {
            |appName, eventName, eventSrc|
            (['part1', 'part2', 'part3'], 'event', modSrc)
        },
        field: {
            |appName, typeName, fieldName, fieldSrc|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', modSrc)
        },
        mixin: {
            |appName, mixinName, mixinSrc|
            (['part1', 'part2', 'part3'], 'mixin', modSrc)
        },
        param: {
            |appName, epName, paramName, paramSrc|
            (['part1', 'part2', 'part3'], 'simple', 'x', modSrc)
        },
        stmt: {
            # FIXME: no example on stmt src
            |appName, epName, stmtSrc|
            (['part1', 'part2', 'part3'], 'simple', modSrc)
        },
        type: {
            |appName, typeName, typeSrc|
            (['part1', 'part2', 'part3'], 'Type', modSrc)
        },
        view: {
            |appName, viewName, viewSrc|
            (['part1', 'part2', 'part3'], 'view', modSrc)
        },
    ),
    tag: (
        app: {
            |appName, appTag|
            (['part1', 'part2', 'part3'], 'newTag')
        },
        ep: {
            |appName, epName, epTag|
            (['part1', 'part2', 'part3'], 'simple', 'newTag')
        },
        event: {
            |appName, eventName, eventTag|
            (['part1', 'part2', 'part3'], 'event', 'newTag')
        },
        field: {
            |appName, typeName, fieldName, fieldTag|
            (['part1', 'part2', 'part3'], 'Type', 'Field1', 'newTag')
        },
        mixin: {
            |appName, mixinName, mixinTag|
            (['part1', 'part2', 'part3'], 'mixin', 'newTag')
        },
        param: {
            |appName, epName, paramName, paramTag|
            (['part1', 'part2', 'part3'], 'simple', 'x', 'newTag')
        },
        stmt: {
            # |appName, epName, stmt, stmtTag|
            # ()
            # TODO: tags on stmt currently do not work
        },
        type: {
            |appName, typeName, typeTag|
            (['part1', 'part2', 'part3'], 'Type', 'newTag')
        },
        view: {
            |appName, viewName, viewTag|
            (['part1', 'part2', 'part3'], 'view', 'newTag')
        },
    ),
    app: {
        |appName, appLongName, appDocstring|
        (['part1', 'part2', 'part3'], 'different long name', 'different docstring'),
    },
    enum: {
        |appName, typeName, enumItems|
        (['part1', 'part2', 'part3'], 'Enum', {'ITEM_1': 1, 'ITEM_2': 2, 'NEW_ITEM': 3})
    },
    ep: {
        |appName, epname, epLongName, epDocstring, epEvent, rest|
        (['part1', 'part2', 'part3'], 'GET rest/', 'get_rest', 'new doc', false, true),
        (['part1', 'part2', 'part3'], 'simple', 'simple', 'doc', true, false), # become event, not normal case but enough to show value changes
        (['part1', 'part2', 'part3'], 'event -> simple', 'event', 'doc', (appName: 'event', eventName: 'simple'), true), # become rest
    },
    event: {
        |appName, eventName|
        (['part1', 'part2', 'part3'], 'differentEvent')
    },
    field: {
        |appName, typeName, fieldName, fieldOpt, fieldType, fieldConstraint|
        (['part1', 'part2', 'part3'], 'Type', 'Field1', false, (primitive: 'INT'), ()), # becomes required
        (['part1', 'part2', 'part3'], 'Type', 'Field2', true, (primitive: 'INT'), ()), # change type
        (['part1', 'part2', 'part3'], 'Type', 'Field3', false, (primitive: 'STRING'), true), # change constraint
    },
    mixin: {
        |appName, mixinName|
        (['part1', 'part2', 'part3'], 'differentMixin')
    },
    param: {
        |appName, epName, paramName, paramLoc, paramIndex, paramType, paramOpt|
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'method', 0, (primitive: 'STRING'), true), # change type
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'method', 1, (primitive: 'INT'), true), # change optional
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'path', 0, (primitive: 'STRING'), true), # change type
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'path', 1, (primitive: 'INT'), true), # change optional
        (['part1', 'part2', 'part3'], 'simple', 'param1', 'query', 0, (primitive: 'STRING'), true), # change type
        (['part1', 'part2', 'part3'], 'simple', 'param2', 'query', 1, (primitive: 'INT'), true), # change optional
    },
    stmt: {
        |appName, epName, stmtIndex, stmtParent, stmtAction, stmtCall, stmtCond, stmtLoop, stmtLoopN, stmtForeach, stmtAlt, stmtGroup, stmtRet|
        (['part1', 'part2', 'part3'], 'simple', 0, {}, {}, (appName: ['part1', 'part2', 'part3'], epName: 'GET rest/'), {}, {}, {}, {}, {}, {}, {}), # change statement
    },
    table: {
        |appName, typeName, pk|
        (['part1', 'part2', 'part3'], 'Table', ['Field2']), # change PK
    },
    type: {
        |appName, typeName, typeDocstring, typeOpt|
        (['part1', 'part2', 'part3'], 'Table', 'new doc', false),
        (['part1', 'part2', 'part3'], 'Enum', 'doc', true), # change type opt
        # removed Type
    },
    view: {
        |appName, viewName, viewType|
        (['part1', 'part2', 'part3'], 'view', 'STRING'), # change type
    },
    alias: {
        |appName, typeName, aliasType|
        (['part1', 'part2', 'part3'], 'alias', 'STRING'), # change type
    },
);

(:model, :modified)
