let sysl = //{/pkg/arrai/sysl};
let pb = //[//encoding.bytes]{./test.pb};
let m = sysl.loadBytes(pb);
let ctx = (proto: m, rel: sysl.newNormalize(m));

let (:renderAll, ...) = //{/pkg/arrai/export/markdown/markdown};

(
    markdown: (
        let expected = {
            'A_App': {
                'A_App.md': '# Documentation\n\n## Integration Diagram\n\n@startuml\n\n\n\n@enduml\n\n> Namespace: `A :: App`\n\n## A :: App\n\nAn app.\n\n### App Ep\n\n@startuml\n[-> "A :: App": "Ep"\nactivate "A :: App"\n[<-- "A :: App"\ndeactivate "A :: App"\n@enduml\n\nAn endpoint.\n\n#### Request types\n\n@startuml\nentity "Message" as A :: App.Message\n{\n    m: string\n}\nentity "Req" as A :: App.Req\n{\n    a: string\n    b: Message\n}\n"A :: App.Req" }o--o| "A :: App.Message"\n@enduml\n\n#### Response types\n\n@startuml\nentity "Message" as A :: App.Message\n{\n    m: string\n}\nentity "Res" as A :: App.Res\n{\n    x: int\n    y: Message\n}\n"A :: App.Res" }o--o| "A :: App.Message"\n@enduml\n\n# Types\n\n## A :: App\n\n@startuml\nentity "Customer" as A :: App.Customer\n{\n    id: int\n}\nentity "Account" as A :: App.Account\n{\n    constraint: string\n    customer: Customer\n    customerId: Customer.id\n    extra: sequence of string\n    id: int\n}\n"A :: App.Account" }o--o| "A :: App.Customer"\n@enduml',
            },
        };
        let actual = renderAll(ctx);
        //test.assert.equal(expected, actual)
    ),
)
