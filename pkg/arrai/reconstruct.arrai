let (:syslSafeName, :syslSafePath, ...) = //{/pkg/importer/utils};
\m

let sysl = //{./sysl};

let import = m.import?:{};
let app = m.app?:{};
let enum = m.enum?:{};
let ep = m.ep?:{};
let event = m.event?:{};
let field = m.field?:{};
let mixin = m.mixin?:{};
let param = m.param?:{};
let stmt = m.stmt?:{};
let table = m.table?:{};
let type = m.type?:{};
let view = m.view?:{};
let anno = (
    app: m.anno?.app?:{},
    ep: m.anno?.ep?:{},
    field: m.anno?.field?:{},
    mixin: m.anno?.mixin?:{},
    stmt: m.anno?.stmt?:{},
    type: m.anno?.type?:{},
    view: m.anno?.view?:{},
);
let tag = (
    app: m.tag?.app?:{},
    ep: m.tag?.ep?:{},
    field: m.tag?.field?:{},
    mixin: m.tag?.mixin?:{},
    stmt: m.tag?.stmt?:{},
    type: m.tag?.type?:{},
    view: m.tag?.view?:{},
);
let src = (
    app: m.src?.app?:{},
    ep: m.src?.ep?:{},
    field: m.src?.field?:{},
    mixin: m.src?.mixin?:{},
    stmt: m.src?.stmt?:{},
    type: m.src?.type?:{},
    view: m.src?.view?:{},
);

let (:annotations, ...) = //{./sysl};

let (:reduce, ...) = //{github.com/arr-ai/arrai/contrib/util};
let (nativeDataTypes: native, :trimLines, :dictMerge, ...) = //{./util};

# syslSafeName adds suffix `_` to all keywords including native data types in case a field name is a sysl keyword.
# This function is only used to sanitise type.
let syslSafeType = \name (name <: native && name) || syslSafeName(name);

let joinedName = //seq.join(' :: ');

let nvpStr = \nvp
    let rec resolveVal = \v
        cond v {
            {k: _, ...}: $`${v orderby .@ >> $`${.@}=${resolveVal(.@value)}`::, }`,
            (a: (:elt)): resolveVal(elt),
            (a: [...]): resolveVal(v.a),
            [...]: $`[${v >> resolveVal(.)::, }]`,
            (:s): resolveVal(s),
            _: $`"${v}"`,
        };
    cond nvp {
        {}: '',
        _: ' ' ++ $`[${nvp orderby .@ >> $`${.@}=${resolveVal(.@value)}`::, }]`
    }
;

let resolveStmts = \stmt
    stmt >> cond {
        .stmtAction: $`${.stmtAction}`,
        .stmtAlt: .stmtAlt -> \(:choice, ...) $`
            one of:
                ${choice >> \c
                    # TODO: handle parent
                    # TODO: change the name attribute of cond
                    $`
                        ${c.cond?:''}:
                            ...
                    `
                ::\i}
        `,
        .stmtCall: .stmtCall -> \(:appName, :epName, ...) $`${joinedName(appName)} <- ${epName}`,
        .stmtCond: '', # TODO: seems something is wrong with this
        .stmtForeach: '', # TODO
        .stmtGroup: '', # TODO
        .stmtLoop: '', # TODO
        .stmtLoopN: '', # TODO
        # TODO: handle modifer
        .stmtRet: .stmtRet -> \(attr: (:modifier, :nvp), ?:status:'ok', :type) $`
            return ${status} <: ${sysl.resolvedType(type)}${nvpStr(nvp)}
        `
    }
;

let stmtBlock = \stmt \ep resolveStmts(stmt where .epName = ep orderby .stmtIndex) where .@item;

let resolvedAnnotations = \annotations
    let rec renderValue = \value
        cond value {
            [...]: $`[${value >> renderValue(.)::,}]`,
            _: cond {
                //seq.contains('\n', value):
                    let value = //seq.trim_suffix('\n', trimLines(value));
                    $`${//seq.split('\n', value) >> $`| ${//seq.trim_prefix(' ', .)}`::\i}`,

                _: $`${value:q}`,
            }
        }
    ;
    let isStr = \value (value where (.).@char?:false) = value;
    annotations orderby .name >> \(:name, :value)
        cond {
            isStr(value) && //seq.contains('\n', value):
                $`
                    @${name} =:
                        ${renderValue(value)}
                `
            ,
            _: $`@${name} = ${renderValue(value)}`
        }
;

let resolvedTypeAnno = \typeAnno \typeName
    resolvedAnnotations(
        (typeAnno where .typeName = typeName) => (name: .typeAnnoName, value: .typeAnnoValue)
    )
;

let resolvedFieldAnno = \fieldAnno \typeName \fieldName
    resolvedAnnotations(
        (fieldAnno where .fieldName = fieldName && .typeName = typeName) => (name: .fieldAnnoName, value: .fieldAnnoValue)
    )
;

let orderedField = \field \typeName
    (field where typeName = .typeName && .fieldType != 'inplace') orderby .fieldName
;

# Given a set of tags, return a Sysl source string to append to an element.
# e.g. {'b', 'a'} -> ' [~a, ~b]'
let tagsString = \tags
    let tags = tags => $`~${.}` orderby .;
    cond {tags: ' ' ++ $`[${//seq.join(', ', tags)}]`}
;

# Transform a REST endpoint spec to a path with type information on params.
let typedPath =
    let namesRe = //re.compile(`\{(\w+)\}`);
    let namesInPath = \path namesRe.match(path) >> (.(1) rank (:.@));
    let paramTypes = \params params => (@: .paramName, @value: sysl.resolvedType(.paramType));
    # Given types for names, return path with name substituted for name <: type.
    let subNameWithType = \types \path \name
        let type = types(name)?:'';
        //seq.sub($`{${name}}`, $`{${name}${type && ' ' ++ $`<: ${type}`}}`, path);
    \path \params reduce(namesInPath(path), subNameWithType(paramTypes(params)), path)
;

let fileContents = \file \apps
    let apps = apps orderby .appSrc.start?.line?:(.appName);
    let sortedEp = src.ep where .epSrc.file = file;
    //{./util}.trimLines($`
        ${import >> $`import ${.target}${cond {.name: ' as ' ++ joinedName(.name >> syslSafeName(.))}}`::\n}

        ${apps >> \(:appName, ...)
            # TODO: appDocstring
            let appLongName = ((app where .appName = appName) single).appLongName?:{};
            let appTags = tagsString((tag.app where .appName = appName) => .appTag);
            let [anno, src, tag] = [anno, src, tag] >> (. :> \v (v where .appName = appName));
            let appAnno = anno.app where .appName = appName;
            let (
                :ep,
                :type,
                :field,
                :table,
                :enum,
                :event,
                :mixin,
                :param,
                :stmt
            ) = (:ep, :type, :field, :table, :enum, :event, :mixin, :param, :stmt) :> \i (i where .appName = appName);

            # TODO: exclude union and alias
            let type =
                # TODO: inplace fields
                type where .typeName !<: (enum => .typeName)
            ;
            let isEmpty = //rel.union({ep, type, field, table, enum, mixin, appAnno}) = {};
            $`
                ${joinedName(appName >> syslSafeName(.))}${appLongName && (' ' ++ $`"${appLongName}"`)}${appTags}:
                    ${cond {isEmpty: '...'}}
                    ${resolvedAnnotations(
                        anno.app => \(:appAnnoName, :appAnnoValue, ...) (name: appAnnoName, value: appAnnoValue)
                    )::\i}
                    ${enum orderby .typeName >> \(:typeName, :enumItems, ...)
                        $`
                            !enum ${syslSafeName(typeName)}:
                                ${(enumItems orderby .@value >> $`${.@}: ${.@value}`) || ['...']::\i}
                        `
                    ::\i\n:\n}
                    ${type orderby .typeName >> \(:typeName, ...)
                        let typeTags = tagsString((tag.type where .typeName = typeName) => .typeTag);
                        let isTable = (type <&- {(:typeName)}) --- table;
                        $`
                            ${cond {isTable: "!table", _: "!type"}} ${syslSafeName(typeName)}${typeTags}:
                                ${resolvedTypeAnno(anno.type, typeName)::\i}
                                ${(orderedField(field, typeName) >> \(:fieldName, :fieldType, :fieldOpt, ...)
                                    let fieldTags = tagsString(tag.field <&- {(:typeName, :fieldName)} => .fieldTag);
                                    $`
                                        ${syslSafeName(fieldName)} <: ${sysl.resolvedType(fieldType)}${cond {fieldOpt: '?'}}${fieldTags}${
                                            let anno = resolvedFieldAnno(anno.field, typeName, fieldName);
                                            anno && $`
                                                :
                                                    ${anno::\i}
                                            `
                                        }
                                    `)
                                || ['...'] ::\i}
                        `
                    ::\i\n:\n}
                    ${((ep where .rest) =>
                        let path = typedPath(.rest.path, {. +> (paramLoc: 'path')} -&> param);
                        . +> (:.rest.method, :path)) nest ~|path|eps orderby .path
                            >> \(:path, :eps)
                                # TODO: stmts with parents
                                # TODO: handle parameterized path
                                $`
                                    ${path}:
                                        ${(eps orderby .method >> \(:method, :epName, ...)
                                            $`
                                                ${method}:
                                                    ${stmtBlock(stmt, epName) || ['...']::\i}
                                            `
                                        ) || ['...'] ::\i}

                                `
                    ::\i\n:\n}
                    ${(ep where !.rest orderby .epName) >> \(:epName, ...)
                        $`
                            ${syslSafeName(epName)}:
                                ${stmtBlock(stmt, epName) || ['...']::\i}
                        `
                    ::\i\n:\n}
            `
        ::\n:\n}
    `)
;

let fileMap = \file \apps
    let rec _fileMap = \parts
        cond parts {
            [f]: {f: fileContents(file, apps)},
            [head, ...tail]: {head: _fileMap(tail)}
        };
    _fileMap(//seq.split('/', //seq.trim_prefix('/', file)))
;

let missingSrc = app &~ (app <&- src.app) => (:.appName, appSrc: (file: "default.sysl"));
let files = ((src.app <&- app) | missingSrc => \(:appName, :appSrc, ...) (:appName, :appSrc, :appSrc.file)) nest |appName, appSrc|apps;
let fileMaps = files => fileMap(.file, .apps);
reduce(fileMaps orderby ., \k \v dictMerge(v, k), {})
