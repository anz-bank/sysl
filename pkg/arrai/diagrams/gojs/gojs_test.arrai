let gojs = //{./gojs};
let sysl = //{/pkg/arrai/sysl};
let (:integrationModel, ...) = //{/pkg/arrai/diagrams/integration_model};
let rel = sysl.newNormalize(sysl.loadBytes(//{/pkg/arrai/diagrams/testdata/node-edge-hierarchy.sysl.pb}));

(
    # Test the complete diagram.
    complete: (
        let im = integrationModel(rel, ());
        let actual = gojs.jsonDiagram(im, gojs.stdJsonNode, gojs.stdJsonLink);
        let expectedNodes = {|key, group, isGroup, label, visible, expanded| 
            ( (s: 'A'),             (s: {}),            (b: true),      (s: "A"),       (b: true),      (b: true)),
            ( (s: 'A :: B1'),       (s: 'A'),           (b: true),      (s: "B1"),      (b: true),      (b: true)),
            ( (s: 'A :: B1 :: C1'), (s: 'A :: B1'),     (b: false),     (s: "C1"),      (b: true),      (b: false)),
            ( (s: 'A :: B2'),       (s: 'A'),           (b: true),      (s: "B2"),      (b: true),      (b: true)),
            ( (s: 'A :: B2 :: C2'), (s: 'A :: B2'),     (b: false),     (s: "C2"),      (b: true),      (b: false)),
        } => cond .group { (s: {}): (:.key, :.isGroup, :.label, :.visible, :.expanded), _: . }; # Remove empty groups
        let actualNodes = actual.jsonNodes.a => .@item => //tuple(.);

        let expectedLinks = {|key, from, to, label, visible| 
            ( (s: 'A :: B1 :: C1-A :: B2 :: C2'), (s: 'A :: B1 :: C1'), (s: 'A :: B2 :: C2'), (s: ''), (b: true)) };
        let actualLinks = actual.jsonLinks.a => .@item => //tuple(.);
        
        (
            links: //test.assert.equal(expectedNodes, actualNodes),
            nodes: //test.assert.equal(expectedLinks, actualLinks)
        )
    ),
)
