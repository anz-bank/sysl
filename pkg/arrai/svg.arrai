# Functions for working with SVG documents.

let comment = \k \v k = "comment";
let at = \k \v //seq.has_prefix("@", k);
# Filters out nodes of an AST that are keyed by "comment" or "@*".
let pred = \k \v !comment(k, v) && !at(k, v);

# SVG attributes that have numeric values.
let nums = {'x', 'y', 'x1', 'x2', 'y1', 'y2', 'cx', 'cy', 'rx', 'ry',
    'textLength', 'font-size'};

# Transforms an SVG AST into a more natural arr.ai structure.
let transformDoc = \ast
    let rec transformNode = \node (
        @tag: node.tag.name.'',
        attrs: node.attr?:{} => \(@item:a, ...)
            let @ = a.name.'' rank (:.@);
            let v = a.value.'';
            (:@, @value: cond {{@} & nums: //eval.value(v), _: v}),
        text: //seq.join("", node.text?:{} >> .''),
        children: node.node?:{} >> transformNode(.),
    );
    (header: //seq.join(' ', ast.header?.'':{}), root: transformNode(ast.node))
;

# Serializes an SVG model to SVG XML.
let toSvg = \m
    let attrToString = \as $`${as => $`${.@}="${.@value}"` orderby .:: }`;
    let rec toString = \n
        cond {
            n.children?:{}: $`
                <${n.@tag} ${attrToString(n.attrs)}>
                    ${n.children >> toString(.)::\i}${n.text}
                </${n.@tag}>
            `,
            _: $`<${n.@tag} ${attrToString(n.attrs)}>${n.text}</${n.@tag}>`,
        }
    ;

    $`
        ${m.header?:''}
        ${toString(m.root)}
    `
;

# Manipulation functions

# Returns the ranked tag of the node.
let tag = \node node.@tag rank (:.@);
# Returns the first g node.
let g = \svg (svg.root.children where tag(.@item) = 'g' rank (:.@))(0);
# Returns all nodes with the given tag.
let byTag = \svg \t (g(svg).children where tag(.@item) = t) => .@item;

# Returns the uppermost y coordinate of the node.
let getY = \n
    let py = \poly //eval.value(//seq.split(',', poly.attrs('points'))(1));
    n.attrs('y')?:{} || n.attrs('y1')?:{} || py(n)
;

# Performs rough decoding of URL-encoded strings.
let urldecode = \in //seq.sub('&gt;', '>', //seq.sub('&lt;', '<', //seq.sub('%20', ' ', in)));

# Returns the LHS, RHS and arrow of an endpoint expression (e.g. x -> y).
let parts = \in
    let ing = //re.compile('#?\\s*([^-<>]*)\\s*([-<>]+)\\s*(.+)');
    let [[_, lhs, arrow, rhs]] = ing.match(//str.lower(urldecode(in)));
    (
        lhs: //seq.trim_suffix(' ', lhs) rank (:.@),
        arrow: arrow rank (:.@),
        rhs: (//seq.trim_suffix(' ', rhs))
    )
;

let kids = \ns ns => .children => .@item;

# Returns text nodes that contain the given text. May be nested in a nodes.
let texts = \svg \text
    let text = text rank (:.@);
    let raw = byTag(svg, 'text') where (.text rank (:.@)) = text;
    let as = kids(byTag(svg, 'a') where parts(.attrs('href')) = parts(text));
    let ats = kids(byTag(svg, 'a')) where (.text rank (:.@)) = text;
    raw | as | ats
;

# Returns the nodes most closely associated with the given text.
let byText = \svg \text
    let texts = texts(svg, text);
    //rel.union({'line', 'polygon'} => \t
        let elts = byTag(svg, t) orderby getY(.);
        texts => getY(.) => \y (elts where getY(.@item) > y rank (:.@))(0)?:{}
    ) | texts where .
;

# Regex matching the stroke attribute.
let strokeRe = //re.compile('stroke: [^;]+');
# Regex matching the stroke-width attribute.
let strokeWidthRe = //re.compile('stroke-width: [^;]+');

# Sets the relevant color attributes of a node.
let colorize = \node \color
    node +> (attrs: node.attrs >>> \k \v
        cond k {
            'style': strokeWidthRe.sub('stroke-width: 2.0', strokeRe.sub($`stroke: ${color}; cursor: pointer`, v)),
            'fill': color,
            _: v,
        }
    )
;
# Sets the text of a node.
let retext = \node \text node +> (
    :text,
    attrs: node.attrs >>> \k \v cond k {'textLength': v / node.text count * text count, _: v},
);

# Returns an updated copy of node with action applied.
let updateNode = \node \action
    let node = cond action('color')?:{} {{}: node, c: colorize(node, c)};
    let node = cond action('text')?:{} {{}: node, t: retext(node, t)};
    node
;

# Returns the SVG with the new text applied to the label nodes.
let update = \svg \actions
    let tags = actions => .@.@tag;
    svg +> (root: svg.root +> (children: svg.root.children >>
        cond tag(.) {
            'g': . +> (children: .children >> \child
                cond {
                    {child.@tag} & tags: updateNode(child, actions(child)),
                    child.children?:{}: child +> (children: child.children >>
                        cond {
                            {.@tag} & tags: updateNode(., actions(.)),
                            _: .
                        }
                    ),
                    _: child
                }),
            _: .,
        }
    ))
;

(
    macro: (
        @grammar: //{./svg_grammar},
        @transform: (doc: transformDoc),
    ),
    :toSvg,
    :byText,
    :update,
)
