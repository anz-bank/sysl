let (:loadBytes, :newNormalize, ...) = //{./sysl};

let model = newNormalize(loadBytes(//[//encoding.bytes]{./out/model.pb}));
let all = newNormalize(loadBytes(//[//encoding.bytes]{./out/all.pb}));

let reconstruct = //{./reconstruct};

let simpleNoSrc = (
    app: {(appName: ['A'])},
    type: {(appName: ['A'], typeName: 'T')},
    field: {(appName: ['A'], typeName: 'T', fieldName: 'f', fieldType: 'int', fieldOpt: false)},
);

let simple = simpleNoSrc +> (src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))}));

let table = (
    src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))}),
    app: {(appName: ['A'])},
    type: {(appName: ['A'], typeName: 'Tb')},
    table: {(appName: ['A'], typeName: 'Tb', pk: ['id'])},
    tag: (field: {(appName: ['A'], typeName: 'Tb', fieldName: 'id', fieldTag: 'pk')}),
    field: {
        (appName: ['A'], typeName: 'Tb', fieldName: 'c', fieldType: 'int', fieldOpt: false),
        (appName: ['A'], typeName: 'Tb', fieldName: 'id', fieldType: 'int', fieldOpt: false)
    },
);

let nested = (
    app: {(appName: ['A']), (appName: ['B'])},
    src: (app: {(appName: ['A'], appSrc: (file: 'foo/a.sysl')), (appName: ['B'], appSrc: (file: 'foo/bar/b.sysl'))}),
);

let rest = (
    app: {(appName: ['A'])},
    ep: {(appName: ['A'], epName: 'Ep', rest: (method: 'GET', path: '/path/{p}'))},
    param: {(appName: ['A'], epName: 'Ep', paramName: 'p', paramLoc: 'path', paramIndex: 0, paramOpt: false, paramType: (primitive: ('INT')))},
    src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))}),
);

let specialCharacters = (
    src: (app: {(appName: ['A.'], appSrc: (file: 'a.sysl'))}),
    app: {(appName: ['A.'])},
    ep: {(appName: ['A.'], epName: 'Ep.', rest: (method: 'GET', path: '/path/{p}'))},
    stmt: {
        |appName, epName, stmtAction, stmtAlt, stmtCall, stmtCond, stmtForeach, stmtGroup, stmtIndex, stmtLoop, stmtLoopN, stmtParent, stmtRet|
        (
            ['A.'],
            'Ep.',
            (),
            (),
            (),
            (),
            (),
            (),
            0,
            (),
            (),
            (),
            (attr: (modifier: {}, nvp: {}), status: 'ok', type: (appName: ['A.'], typePath: ['type.']))
        )
    },
    param: {(appName: ['A.'], epName: 'Ep.', paramName: 'p', paramLoc: 'path', paramIndex: 0, paramOpt: false, paramType: (appName: ['A.'], typePath: ['type.']))},
    src: (app: {(appName: ['A.'], appSrc: (file: 'a.sysl'))}),
    type: {
        (appName: ['A.'], typeName: 'Type.'),
        (appName: ['A.'], typeName: 'Table.'),
    },
    table: {(appName: ['A.'], typeName: 'Table.', pk: ['id'])},
    field: {
        (appName: ['A.'], typeName: 'Type.', fieldName: 'c.', fieldType: (appName: ['A.'], typePath: ['type.']), fieldOpt: false),
        (appName: ['A.'], typeName: 'Type.', fieldName: 'id.', fieldType: (appName: ['A.'], typePath: ['type.']), fieldOpt: false),
        (appName: ['A.'], typeName: 'Table.', fieldName: 'c.', fieldType: (appName: ['A.'], typePath: ['type.']), fieldOpt: false),
        (appName: ['A.'], typeName: 'Table.', fieldName: 'id.', fieldType: (appName: ['A.'], typePath: ['type.']), fieldOpt: false),
    },
);

(
    # Note: The following tests are commented out due to failure.
    #all: reconstruct(all) = //{./test_reconstruct_all},
    #model: reconstruct(model) = //{./test_reconstruct_model},

    simple: reconstruct(simple) = {
        'a.sysl': $`
            A:
                !type T:
                    f <: int

        `
    },

    simpleNoSrc: reconstruct(simpleNoSrc) = {
        'default.sysl': $`
            A:
                !type T:
                    f <: int

        `
    },

    simpleWrongSrc: reconstruct(simpleNoSrc +> (src: (app: {(appName: ['nonexistentApp'], appSrc: (file: 'a.sysl'))}))) = {
        'default.sysl': $`
            A:
                !type T:
                    f <: int

        `
    },

    optional:
        let data = simple +> (field: simple.field => . +> (fieldOpt: true));
        reconstruct(data) = {
            'a.sysl': $`
                A:
                    !type T:
                        f <: int?

            `
        },

    newline: reconstruct(simple +> (anno: (field: {
        (simple.field single) +> (fieldAnnoName: 'desc', fieldAnnoValue: '\n')
    }))) = {
        'a.sysl': $`
            A:
                !type T:
                    f <: int:
                        @desc =:
                            |

        `
    },

    tags:
        let appTag = (appName: ['A'], appTag: 'app_tag');
        let typeTag = (appName: ['A'], typeName: 'T', typeTag: 'type_tag');
        let fieldTag = (appName: ['A'], typeName: 'T', fieldName: 'f', fieldTag: 'field_tag');
        let tableTag = (appName: ['A'], typeName: 'Tb', typeTag: 'table_tag');
        let columnTag = (appName: ['A'], typeName: 'Tb', fieldName: 'c', fieldTag: 'column_tag');
        (
            noTags: reconstruct(simple) = {
                'a.sysl': $`
                    A:
                        !type T:
                            f <: int

                `
            },
            onApp: reconstruct(simple +> (tag: (app: {appTag}))) = {
                'a.sysl': $`
                    A [~app_tag]:
                        !type T:
                            f <: int

                `
            },
            onType: reconstruct(simple +> (tag: (type: {typeTag}))) = {
                'a.sysl': $`
                    A:
                        !type T [~type_tag]:
                            f <: int

                `
            },
            onField: reconstruct(simple +> (tag: (field: {fieldTag}))) = {
                'a.sysl': $`
                    A:
                        !type T:
                            f <: int [~field_tag]

                `
            },

            noTagsTable: reconstruct(table) = {
                'a.sysl': $`
                    A:
                        !table Tb:
                            c <: int
                            id <: int [~pk]

                `
            },
            noTagsMixed: reconstruct(table +> (type: table.type | simple.type, field: table.field | simple.field)) = {
                'a.sysl': $`
                    A:
                        !type T:
                            f <: int

                        !table Tb:
                            c <: int
                            id <: int [~pk]

                `
            },
            onTable: reconstruct(table +> (tag: table.tag +> (type: {tableTag}))) = {
                'a.sysl': $`
                    A:
                        !table Tb [~table_tag]:
                            c <: int
                            id <: int [~pk]

                `
            },
            onColumn: reconstruct(table +> (tag: (field: table.tag.field | {columnTag}))) = {
                'a.sysl': $`
                    A:
                        !table Tb:
                            c <: int [~column_tag]
                            id <: int [~pk]

                `
            },
            onPK: reconstruct(table +> (tag: (field: table.tag.field | {columnTag +> (fieldName: 'id')}))) = {
                'a.sysl': $`
                    A:
                        !table Tb:
                            c <: int
                            id <: int [~column_tag, ~pk]

                `
            },
        )
    ,

    nested:
        let expected = {
            'foo': {
                'a.sysl': $`
                    A:
                        ...

                `,
                'bar': {
                    'b.sysl': $`
                        B:
                            ...

                    `
                },
            },
        };
        let actual = reconstruct(nested);
        //test.assert.equal(expected, actual)
    ,

    rest:
        reconstruct(rest) = {
            'a.sysl': $`
                A:
                    /path/{p <: int}:
                        GET:
                            ...

            `
        }
    ,

    specialCharacters:
        reconstruct(specialCharacters) = {
            'a.sysl': $`
                A%2E:
                    !table Table%2E:
                        c%2E <: A%2E.type%2E
                        id%2E <: A%2E.type%2E

                    !type Type%2E:
                        c%2E <: A%2E.type%2E
                        id%2E <: A%2E.type%2E

                    /path/{p <: A%2E.type%2E}:
                        GET:
                            return ok <: A%2E.type%2E

            `
        }
    ,

    imports:
    (
        syslImport:
            let data = simple +> (import: [(target: 'other.sysl', name: {})]);
            reconstruct(data) = {
                'a.sysl': $`
                    import other.sysl

                    A:
                        !type T:
                            f <: int

                `
            },

        yamlImport:
            let data = simple +> (import: [(target: 'other.yaml', name: {})]);
            reconstruct(data) = {
                'a.sysl': $`
                    import other.yaml

                    A:
                        !type T:
                            f <: int

                `
            },

        yamlImportWithName:
            let data = simple +> (import: [(target: 'other.yaml', name: ['App'])]);
            reconstruct(data) = {
                'a.sysl': $`
                    import other.yaml as App

                    A:
                        !type T:
                            f <: int

                `
            },

        yamlImportWithMultipartName:
            let data = simple +> (import: [(target: 'other.yaml', name: ['Namespace', 'App'])]);
            reconstruct(data) = {
                'a.sysl': $`
                    import other.yaml as Namespace :: App

                    A:
                        !type T:
                            f <: int

                `
            },
    ),
    anno:
        let anno = simpleNoSrc.|app| +> (
            anno: (
                app: {
                    |appName, appAnnoName, appAnnoValue|
                    (['A']  , 'single'   , ['1']       ),
                    (['A']  , 'multiple' , ['1', '2']  ),
                }
            )
        );
        (reconstruct(anno) single).@value = $`
            A:
                @multiple = ["1", "2"]
                @single = ["1"]

        `
    ,
    escapeAnno:
        let escapeAnno = simpleNoSrc.|app| +> (
            anno: (
                app: {
                    |appName, appAnnoName      , appAnnoValue|
                    (['A']  , 'escape'         , '\b'        ),
                    (['A']  , 'backslash'      , `\`         ),
                    (['A']  , 'doubleQuote'    , `"`         ),
                    (['A']  , 'singleQuote'    , `'`         ),
                    (['A']  , 'arr_escape'     , ['\b']      ),
                    (['A']  , 'arr_backslash'  , [`\` ]      ),
                    (['A']  , 'arr_doubleQuote', [`"` ]      ),
                    (['A']  , 'arr_singleQuote', [`'` ]      ),
                }
            )
        );
        (reconstruct(escapeAnno) single).@value = $`
            A:
                @arr_backslash = ["\\"]
                @arr_doubleQuote = ["\""]
                @arr_escape = ["\b"]
                @arr_singleQuote = ["'"]
                @backslash = "\\"
                @doubleQuote = "\""
                @escape = "\b"
                @singleQuote = "'"

        `
    ,
    docstringAnno:
        let docAnno = simpleNoSrc.|app| +> (
            anno: (
                app: {
                    |appName, appAnnoName      , appAnnoValue                                                  |
                    (['A']  , 'simple'         , 'this is a string\nthis is another one'                       ),
                    (['A']  , 'retainIndent'   , 'this is a string\n  this is another one\n    and another one'),
                }
            )
        );
        (reconstruct(docAnno) single).@value = $`
            A:
                @retainIndent =:
                    | this is a string
                    |   this is another one
                    |     and another one
                @simple =:
                    | this is a string
                    | this is another one

        `
    ,
    stmt:
        let stmtTest = (
            app: {(appName: ['A'])},
            ep: {(appName: ['A'], epName: 'GET /ep', rest: (method: 'GET', path: '/ep'))},
            src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))}),
            stmt: {
                |appName, epName, stmtAction, stmtAlt, stmtCall, stmtCond, stmtForeach, stmtGroup, stmtIndex, stmtLoop, stmtLoopN, stmtParent, stmtRet|
                (
                    ['A'],
                    'GET /ep',
                    (),
                    (),
                    (appName: ['Test'], epName: 'TestEp'),
                    (),
                    (),
                    (),
                    0,
                    (),
                    (),
                    (),
                    (),
                ),
                (
                    ['A'],
                    'GET /ep',
                    (),
                    (),
                    (),
                    (),
                    (),
                    (),
                    1,
                    (),
                    (),
                    (),
                    (
                        attr: (
                            modifier: {'tag'},
                            nvp: {'annotation': (s: 'value')},
                        ),
                        status: 'ok',
                        type: (appName: ['A'], typePath: ['Type']),
                    )
                ),
            },
            anno: (
                stmt: {
                    |appName, epName, stmtIndex, stmtAnnoName, stmtAnnoValue|
                    (['A'], 'GET /ep', 0, 'annotation', 'value')
                }
            ),
            tag: (
                stmt: {
                    |appName, epName, stmtIndex, stmtTag|
                    (['A'], 'GET /ep', 0, 'tag')
                }
            ),
        );
        reconstruct(stmtTest) = {
            'a.sysl': $`
                A:
                    /ep:
                        GET:
                            Test <- TestEp [~tag, annotation="value"]
                            return ok <: A.Type [~tag, annotation="value"]

            `,
        }
)
