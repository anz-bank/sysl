let (:loadBytes, :newNormalize, ...) = //{./sysl};

let model = newNormalize(loadBytes(//[//encoding.bytes]{./out/model.pb}));
let all = newNormalize(loadBytes(//[//encoding.bytes]{./out/all.pb}));

let reconstruct = //{./reconstruct};

let simple = (
    app: {(appName: ['A'])},
    type: {(appName: ['A'], typeName: 'T')},
    field: {(appName: ['A'], typeName: 'T', fieldName: 'f', fieldType: 'int', fieldOpt: false)},
    src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))})
);

let nested = (
    app: {(appName: ['A']), (appName: ['B'])},
    src: (app: {(appName: ['A'], appSrc: (file: 'foo/a.sysl')), (appName: ['B'], appSrc: (file: 'foo/bar/b.sysl'))}),
);

let rest = (
    app: {(appName: ['A'])},
    ep: {(appName: ['A'], epName: 'Ep', rest: (method: 'GET', path: '/path/{p}'))},
    param: {(appName: ['A'], epName: 'Ep', paramName: 'p', paramLoc: 'path', paramIndex: 0, paramOpt: false, paramType: (primitive: ('INT')))},
    src: (app: {(appName: ['A'], appSrc: (file: 'a.sysl'))}),
);

(
    # Note: The following tests are commented out due to failure.
    #all: reconstruct(all) = //{./test_reconstruct_all},
    #model: reconstruct(model) = //{./test_reconstruct_model},

    simple: reconstruct(simple) = {
        'a.sysl': $`
            A:
                !type T:
                    f <: int

        `
    },

    optional:
        let data = simple +> (field: simple.field => . +> (fieldOpt: true));
        reconstruct(data) = {
            'a.sysl': $`
                A:
                    !type T:
                        f <: int?

            `
        },

    newline: reconstruct(simple +> (anno: (field: {
        (simple.field single) +> (fieldAnnoName: 'desc', fieldAnnoValue: '\n')
    }))) = {
        'a.sysl': $`
            A:
                !type T:
                    f <: int:
                        @desc =:
                            |

        `
    },

    nested:
        let expected = {
            'foo': {
                'a.sysl': $`
                    A:
                        ...

                `,
                'bar': {
                    'b.sysl': $`
                        B:
                            ...

                    `
                },
            },
        };
        let actual = reconstruct(nested);
        //test.assert.equal(expected, actual)
    ,

    rest:
        reconstruct(rest) = {
            'a.sysl': $`
                A:
                    /path/{p <: int}:
                        GET:
                            ...

            `
        }
    ,
)
