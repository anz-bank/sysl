let (:partsToAppName, ...) = //{/pkg/arrai/tools/appname};
let (:reduce, ...) = //{github.com/arr-ai/arrai/contrib/util};
let (:unescape, ...) = //{/pkg/importer/utils};
let (
    :renderInlineSections,
    :renderMultilineSections,
    ...
) = //{./util};


let inCurly = //re.compile(`^{([-\w]+)}$`).match;
let trimPrefixWS = //re.compile(`^\s*`).sub('');

# attrsToTagsAndAnno is a util function which splits attrs into two dictionaries, a dictionary with just patterns key
# and another dictionary of other annotations.
let attrsToTagsAndAnno = \attrs
    let anno = attrs where .@ != 'patterns';
    let tags = attrs &~ anno;
    # Ensures tags are not empty. If tags does not have 'patterns' or 'elt' is empty, then get empty set.
    # If not, return tags itself.
    let tags = cond tags {{'patterns': (a: (:elt))}: elt && tags};
    (:tags, :anno)
;

let renderLongName = \name name && $`"${name}"`;

let rec simplifyAnnoValue = \v
    cond v {
        (a: (:elt, ...), ...): elt >> simplifyAnnoValue(.),
        (:s, ...): s,
        _: v,
    }
;

# FIXME: sysl should be able to handle any type of annotations.
let rec renderInlineAnnoValue = \v
    # an annotation is complex if it is neither a string, an array of strings, or array of array of strings.
    let isComplex = \(a: (:elt, ...), ...)
        elt filter (.@item) {
            (a: (:elt, ...), ...): elt filter (.@item) {
                (a: (:elt, ...), ...): elt
            }
        } where .
    ;
    cond v {
        (a: (:elt, ...), ...):
            (isComplex(v) && renderInlineAnnoValue((s: $`${simplifyAnnoValue(v)}`))) ||
            $`[${elt >> renderInlineAnnoValue(.)::, }]`
        ,
        (:s, ...):
            $`"${//seq.sub(`"`, `\"`, //seq.sub(`\`, `\\`, trimPrefixWS(s)))}"`,
        _: //error(v),
    }
;

let renderAnnoStmts = \anno
    $`
        ${(
            anno => \(@: name, @value: value)
                $`
                    @${name} =${
                        cond value {
                            (a: (elt: _, ...), ...): ' ' ++ renderInlineAnnoValue(value),
                            (:s, ...): cond {
                                //seq.contains('\n', s):
                                    let s = //re.compile('\r?\n').sub('\n', s);
                                    let s = ' ' ++ //seq.trim_suffix('\n', trimPrefixWS(s));
                                    $`
                                        :
                                            ${//seq.split('\n', s) >> '|' ++ .::\i:}
                                    `,
                                _: ' ' ++ renderInlineAnnoValue(value),
                            }
                        }
                    }
                `
        ) orderby .::\i}
    `
;

let renderInlineAnnoAndTags = \attrs
    let (:tags, :anno) = attrsToTagsAndAnno(attrs);
    let tags = tags && (tags('patterns').a.elt rank (@: .@item)) >> $`~${.s}`;
    let anno = anno && (anno => $`${.@}=${renderInlineAnnoValue(.@value)}`) orderby .;
    let combined = tags ++ anno;
    combined && $`[${combined::, :}]`
;

let renderTypeUsage = \type
    let rec typeStr = \type cond type {
        (type_ref: (ref: (?:appname:(), :path), ...), ...):
            let appName = partsToAppName(appname.part?:[]);
            let appName = appName && appName ++ '.';
            $`${appName}${path::.:}`,

        (:primitive, ...): //str.lower(primitive),
        (:sequence, ...):  $`sequence of ${typeStr(sequence)}`,
        (:set, ...):       $`set of ${typeStr(set)}`,
    };
    let (?:opt:false, ?:constraint:{}, ...) = type;

    let constraintStr = cond constraint {
        [(length: ('max': maxLength, 'min': minLength), ...)]: $`(${minLength:d}..${maxLength:d})`,
        [(length: ('max': maxLength), ...)]: $`(${maxLength:d})`,
        [(length: ('min': minLength), ...)]: $`(${minLength:d}..)`,
    };

    let bitWidth = cond constraint {
        [(:bit_width, ...)]: bit_width <: {32, 64} && bit_width
    };

    $`${typeStr(type)}${bitWidth}${constraintStr}${opt && '?'}`
;

# renderTypeUsageWithInlineAnno is to be used for types usage in parameters, assignments, or
# aliases. It does not handle type definitions.
let renderTypeUsageWithInlineAnno = \type
    let (?:attrs:{}, ...) = type;
    $`${renderTypeUsage(type)}${attrs && ' ' ++ renderInlineAnnoAndTags(attrs)}`
;

let renderRegularParam = \(:name, :type) $`${name} <: ${renderTypeUsageWithInlineAnno(type)}`;

let renderRegularParams = \params params && $`(${params >> renderRegularParam(.)::, :})`;

let removeLengthConstraint = \type
    cond type {
        (constraint: [(length: _, ...c)], ...): type +> (constraint: [c]),
        _: type,
    }
;

let renderQueryParams = \params params &&
    let renderParamTypeUsage = \type
        # FIXME: sysl does not allow constraints in query parameters, remove this once it is allowed.
        let type = removeLengthConstraint(type);
        cond type {
            (primitive:_, ...): renderTypeUsage(type),
            _:
                let isOpt = type.opt?:false;
                let type = type +> (opt: false); # always change it to false to avoid rendering `?` in type
                $`{${renderTypeUsage(type)}}${isOpt && '?'}`,
        };
    $`?${params >> \(:name, :type) $`${name}=${renderParamTypeUsage(type)}`::&:}`
;

let renderParameterizedPath = \path \urlParam
    let renderedParamType = urlParam =>
        \(@item: (:name, :type), ...)
            # FIXME: sysl does not allow constraints in parameters, remove this once it is allowed.
            let type = removeLengthConstraint(type);
            (@: name, @value: renderTypeUsage(type))
    ;
    let segments = //seq.split('/', path) >> cond inCurly(.) {
        [[_, name]]: $`{${name} <: ${renderedParamType(name rank (:.@))}}`,
        _: .,
    };
    $`${segments::/}`
;

let rec stmtRenderers = (
    renderStmt: \stmt
        let stmtStr = cond stmt {
            (action: (:action), ...): action,
            (call: (target: (part: appName), :endpoint, ?:arg:[], ...), ...): $`
                ${partsToAppName(appName) || '.'} <- ${endpoint}${arg && $`(${arg >> .name::, })`}
            `,

            # FIXME: cond statements seems to only contain `if` and not the `else` predicates.
            ('cond': (:test, :stmt), ...): $`
                if ${test}:
                    ${stmtRenderers.renderStmts(stmt)}
            `,

            # All loops seem to be parsed as groups
            (loop: (:mode, :criterion, :stmt), ...): $`
                ${//str.lower(mode)}${criterion && ' ' ++ criterion}:
                    ${stmtRenderers.renderStmts(stmt)}
            `,

            # loop_n seems to not be used
            # (:loop_n, ...): ,
            (foreach: (:collection, :stmt), ...): $`
                for each ${collection}:
                    ${stmtRenderers.renderStmts(stmt)}
            `,
            (alt: (:choice), ...):
                # FIXME: `cond` isn't always populated by the sysl pb
                $`
                    ${choice >> \(cond?:condition:'', :stmt) $`
                        alt${condition && ' ' ++ condition}:
                            ${stmtRenderers.renderStmts(stmt)}
                    `::\i}
                `,

            (group: (:title, :stmt), ...): $`
                ${title}:
                    ${stmtRenderers.renderStmts(stmt)}
            `,
            (ret: (:payload), ...): $`return ${payload}`,
            _: //error($`unrecognised statement: ${stmt}`),
        };
        let attrs = stmt.attrs?:{};

        $`${stmtStr}${attrs && ' ' ++ renderInlineAnnoAndTags(attrs)}`,

    renderStmts: \stmts $`${stmts >> stmtRenderers.renderStmt(.) ::\i}` || '...',
);

let (:renderStmt, :renderStmts) = stmtRenderers;

let renderEndpointDocstring = \(:docstring, ?:maxLength:80)
    # to account for the `| ` prefix
    let maxLength = maxLength - 2;
    let renderLine = \lines \word
        cond lines {
            [...first, currLine]: cond {
                # maxLength-1 for the space between line and new word.
                (currLine count + word count) > maxLength-1: lines ++ [word],

                _: first ++ [$`${currLine} ${word}`],
            },
            []: [word],
        }
    ;
    let splitPerLine = //seq.split('\n', docstring) >> reduce(//seq.split(' ', .), renderLine, []);

    # flatten arrays
    let splitPerLine = reduce(splitPerLine, \acc \head acc ++ head, []) where .@item;
    $`
        ${splitPerLine >> $`| ${.}`::\i:}
    `
;

let renderRestEndpoints = \restEps
    let restEpsRel = (
        restEps =>
            let (
                rest_params: (:path, :method, query_param?:queryParam:[], url_param?:urlParam:[], ...),
                param?:regParam:[],
                ?:attrs:{},
                ?:stmt:[],
                ?:docstring:{},
                ...
            ) = .@value;
            let regParam = regParam where .@item; # remove empty tuple, this happens in params like `GET(Types.Type)`.
            (:path, :urlParam, :method, :queryParam, :regParam, :attrs, :stmt, :docstring)
    ) nest ~|path, urlParam|methods # urlParam is shared by all methods
    => \ep
            # group common attrs
            let (:path, :methods, ...) = ep;
            ep +>
                let commonAttrs = cond ((methods => .attrs) orderby .) {
                    [first, ...attrs]: reduce(attrs, \acc \value acc & value, first),
                    _: {},
                };

                # removed 'rest'
                let cleanedAttrs = cond commonAttrs {
                    {'patterns': (a: (elt: [(s: 'rest')])), ...tail}: tail,
                    {'patterns': (a: (:elt)), ...}:
                        commonAttrs +> {'patterns': (a: (elt: elt where .@item != (s: 'rest')))},
                    _: commonAttrs,
                };

                (
                    attrs: cleanedAttrs,
                    methods: (methods => \m m +> (attrs: m.attrs &~ commonAttrs)) orderby .method,
                )
    ;
    $`
        ${restEpsRel orderby [.path, .urlParam, .attrs] >> \(:path, :methods, :urlParam, :attrs)
            $`
                ${renderParameterizedPath(path, urlParam)}${attrs && ' ' ++ renderInlineAnnoAndTags(attrs)}:
                    ${methods >> \(:queryParam, :regParam, :attrs, :method, :stmt, :docstring)
                        let (:tags, :anno) = attrsToTagsAndAnno(attrs);
                        let tags = renderInlineAnnoAndTags(tags);
                        let regParam = renderRegularParams(regParam);
                        let queryParam = renderQueryParams(queryParam);
                        $`
                            ${method}${renderInlineSections([regParam, queryParam, tags])}:
                                ${docstring && renderEndpointDocstring((:docstring))}
                                ${renderAnnoStmts(anno)}
                                ${renderStmts(stmt)}
                        `
                    ::\i}
            `
        ::\i\n}
    `
;

let renderEndpoint = \ep
    let (:name, long_name?:longName:'', ?:docstring:{}, ?:attrs:{}, ?:param:[], ?:stmt:[], ...) = ep;
    let (:tags, :anno) = attrsToTagsAndAnno(attrs);
    let sections = [name, renderLongName(longName), renderRegularParams(param), renderInlineAnnoAndTags(tags)];
    $`
        ${renderInlineSections(sections)}:
            ${docstring && renderEndpointDocstring((:docstring))}
            ${renderAnnoStmts(anno)}
            ${renderStmts(stmt)}
    `
;

let renderEndpoints = \eps $`${eps => .@value orderby .name >> renderEndpoint(.) ::\n\n:}`;

let renderAllEndpoints = \eps
    let pubsubs = eps where .@value.is_pubsub?:false;
    let rest = eps where .@value.rest_params?:false;
    let regularEp = eps &~ (pubsubs | rest);
    cond regularEp {
        {'...': (name: '...')}: '...',

        # FIXME: render pubsubs
        _:
            $`
                ${renderMultilineSections([renderEndpoints(regularEp), renderRestEndpoints(rest)])}
            `
    }
;

let renderEnum = \(:name, type: (?:attrs:{}, enum: (:items), ...))
    # FIXME: enums don't seem to allow annotation statements
    $`
        !enum ${renderInlineSections([name, renderInlineAnnoAndTags(attrs)])}:
            ${items orderby .@value >> \(@: name, @value: i) $`${name} : ${i}` ::\i}
    `
;

let renderAlias = \(:name, :type)
    # FIXME: unable to use constraints in alias
    !(type.constraint?:false) &&
    let (:tags, :anno) = attrsToTagsAndAnno(type.attrs?:{});
    $`
        !alias ${renderInlineSections([name, renderInlineAnnoAndTags(tags)])}:
            ${renderAnnoStmts(anno)}
            ${renderTypeUsage(type)}
    `
;

let renderUnion = \(:name, type: (one_of: (type: union, ...), ?:attrs:{}, ...))
    let (:tags, :anno) = attrsToTagsAndAnno(attrs);
    $`
        !union ${renderInlineSections([name, renderInlineAnnoAndTags(tags)])}:
            ${renderAnnoStmts(anno)}
            ${union >> renderTypeUsage(.)::\i}
    `
;

let renderOneOf = \(:name, type: (one_of: (type: union, ...), ?:attrs:{}, ...))
let (:tags, :anno) = attrsToTagsAndAnno(attrs);
    $`
        ${renderInlineSections([name, renderInlineAnnoAndTags(tags)])}:
            ${renderAnnoStmts(anno)}
            ${union >> renderFieldDefinition(.)::\i}
    `
;

let rec renderFieldDefinition = \(:name, :type)
    cond type {
        (tuple: (attr_defs: fields, ...), ...):
            $`
                ${name} <:
                    ${fields orderby .@ >> \(@: name, @value: type) renderFieldDefinition((:name, :type))::\i}
            `,
        (:one_of, ...):
            # TODO: Add tags/annos when Sysl supports it
            $`
                ${name} <:
                    ${one_of.type >> renderFieldDefinition((name: .name, type: (.)))::\i}
            `,
        _:
            let (:tags, :anno) = attrsToTagsAndAnno(type.attrs?:{});
            $`${name} <: ${renderTypeUsage(type)}${tags && ' ' ++ renderInlineAnnoAndTags(tags)}${
                    anno && $`
                        :
                            ${renderAnnoStmts(anno)}
                    `
                }
            `
    };

let renderTypeOrTable = \(:name, :type)
    cond {
        # FIXME: handle inplace type definitions on fields
        //seq.contains('.', name): '',
        _:
            let attrs = type.attrs?:{};
            let (:tags, :anno) = attrsToTagsAndAnno(attrs);
            let inlineAnno = anno where .@ = "oneOfProtoField";
            let [kind, fields] = cond type {
                (tuple: (attr_defs: fields, ...), ...):    ['type', fields],
                (relation: (attr_defs: fields, ...), ...): ['table', fields],
                _: //error($`renderTypeOrTable: unrecognised type ${type}`),
            };
            let annoStmts = renderAnnoStmts(anno &~ inlineAnno);
            $`
                !${renderInlineSections([kind, name, renderInlineAnnoAndTags(tags +> inlineAnno)])}:
                    ${
                        (
                            # only render ... when there's nothing in the type.
                            (annoStmts && [annoStmts]) ++
                            (fields orderby .@ >> \(@: name, @value: type) renderFieldDefinition((:name, :type)))
                        ) || ['...']
                    ::\i}
            `
    }
;

let renderAllType = \t
    cond t.type {
        (one_of: _, ...):   renderUnion(t),
        (tuple: _, ...):    renderTypeOrTable(t),
        (relation: _, ...): renderTypeOrTable(t),
        (enum: _, ...):     renderEnum(t),
        _:                  renderAlias(t),
    }
;

let renderTypes = \types
    let types = types => (name: .@, type: .@value);
    $`${renderMultilineSections((types orderby [.name, .type] >> renderAllType(.)) where .@item)}`
;

# FIXME: render imports
let renderApp = \app
    let (
        name: (part: appName),
        long_name?:longName:'',
        ?:attrs:{},
        ?:endpoints:{},
        ?:types:{},
        # FIXME: handle mixin
        ...
    ) = app;
    let (:tags, :anno) = attrsToTagsAndAnno(attrs);
    let appID = [partsToAppName(appName), renderLongName(longName), renderInlineAnnoAndTags(tags)];
    let sections = [renderAnnoStmts(anno), renderAllEndpoints(endpoints), renderTypes(types)];

    $`
        ${renderInlineSections(appID)}:
            ${renderMultilineSections(sections)}
        `
;

(
    :renderAnnoStmts,
    :renderInlineAnnoAndTags,
    :renderTypeUsage,
    :renderTypeUsageWithInlineAnno,
    :renderRegularParam,
    :renderRegularParams,
    :renderQueryParams,
    :renderParameterizedPath,
    :renderRestEndpoints,
    :renderEndpoint,
    :renderEndpoints,
    :renderAllEndpoints,
    :renderEnum,
    :renderAlias,
    :renderFieldDefinition,
    :renderTypeOrTable,
    :renderAllType,
    :renderTypes,
    :renderApp,
)
